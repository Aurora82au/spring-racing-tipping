{"version":3,"sources":["components/ScrollToTop.jsx","components/Header.jsx","components/Login.jsx","components/RaceMeetSelector.jsx","components/Menu.jsx","components/Admin.jsx","components/Statistics.jsx","components/Information.jsx","components/TippingRaceList.jsx","components/Tips.jsx","components/Tip.jsx","components/Race.jsx","components/RaceMeet.jsx","components/Results.jsx","components/Podium.jsx","components/Leaderboard.jsx","App.js","index.js"],"names":["ScrollToTop","prevProps","this","props","location","window","scrollTo","children","Component","withRouter","Header","handleShowLogOutOverlay","setState","showLogOut","handleHideLogOutOverlay","handleLogOut","localStorage","clear","href","state","nextProps","nextState","informationBtn","page","to","path","key","className","activeClassName","logOutOverlay","onClick","type","user","punters","find","punterId","profilePic","src","pic","alt","adminBtn","isAdmin","reloadClass","loadingData","onReloadData","text","Login","handlePunterSelect","event","parseInt","target","value","wrongPassword","handlePasswordFocus","focused","handlePasswordBlur","handlePasswordChange","password","handleLoginClick","punter","handleLogin","history","push","sorted","sort","a","b","name","first","localeCompare","i","len","length","splice","options","map","last","unshift","errorClass","labelClass","onChange","htmlFor","id","defaultValue","onFocus","onBlur","RaceMeetSelector","split","date","meets","selectedMeetId","meet","meetId","Menu","Admin","setStateData","propsRaceMeets","propsSelectedMeet","races","placings","scratchings","handlePlacingChange","raceChanged","placingChanged","second","third","handleSaveClick","modifiedRace","getAttribute","onPlacingsChange","handleScratchingClick","modifiedScratchings","classList","contains","index","indexOf","innerText","onScratchingChange","number","raceMeets","selectedMeet","raceList","selections","j","includes","data-race","status","data-meet","data-status","onStatusChange","onMeetChange","App","handleTabClick","tab","tabSelected","onTabSelect","findMeet","thisMeetIndex","tips","tipsMeet","findRace","tipMeet","thisRaceIndex","tipsRace","findPunter","findPuntersStats","stats","findPuntersStatsMeet","puntersStats","calculateStats","c","d","puntersStatsMeet","raceScore","meetsArray","score","trifectas","quinellas","firsts","seconds","thirds","createStatArray","arrayToUpdate","arrayToUpdateName","stat","position","dangerouslySetInnerHTML","__html","selectedTab","tabBtn1Class","tabBtn2Class","tab1Class","tab2Class","turnbullTemp","guineasTemp","caulCupTemp","coxPlateTemp","derbyDayTemp","melbCupTemp","oaksDayTemp","stakesDayTemp","turnbull","guineas","caulCup","coxPlate","derbyDay","melbCup","oaksDay","stakesDay","leng","Information","TippingRaceList","setTips","passedProps","userTips","self","race","handleSelectionClick","tip","onSelectionChange","generateList","toString","time","raceListClass","raceDay","Date","setHours","setMinutes","Tips","Tip","tipPunter","firstClass","secondClass","thirdClass","Race","statusClass","punterTips","distance","RaceMeet","raceSelectors","selectedRace","raceTips","meetTips","tipRace","Results","onRaceChange","Podium","points","Leaderboard","findPuntersPoints","calculatePoints","puntersPoints","firstThree","topOdds","bottomOdds","oddsList","loserList","shift","authenticated","setItem","handleReloadData","getData","handleMeetSelect","handleRaceSelect","handleTabSelect","handleSaveTips","modifiedTips","axios","get","databaseURL","then","returnedTips","data","meetIndex","punterIndex","put","handleSavePlacings","modifiedPlacings","handleSaveStatus","handleSaveScratchings","appLoadFailed","counter","counterInterval","all","spread","catch","e","console","log","getItem","setTimeout","setInterval","clearInterval","newCount","exact","render","routeProps","from","initReactFastclick","ReactDOM","document","getElementById"],"mappings":"iWAIMA,E,2LACiBC,GACXC,KAAKC,MAAMC,WAAaH,EAAUG,UAClCC,OAAOC,SAAS,EAAG,K,+BAKvB,OAAOJ,KAAKC,MAAMI,a,GARAC,aAYXC,cAAWT,GCbLU,E,YACjB,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KAaVQ,wBAA0B,WACtB,EAAKC,SAAS,CACVC,YAAY,KAhBD,EAqBnBC,wBAA0B,WACtB,EAAKF,SAAS,CACVC,YAAY,KAvBD,EA4BnBE,aAAe,WACXC,aAAaC,QACbZ,OAAOD,SAASc,KAAO,UA5BvB,EAAKC,MAAQ,CACTN,YAAY,GAHD,E,mFASGO,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,OAASkB,IAAcnB,KAAKiB,S,+BAwBlD,IAAD,OAEDG,EACwB,WAApBpB,KAAKC,MAAMoB,KACP,GAEA,kBAAC,IAAD,CACIC,GAAItB,KAAKC,MAAMsB,KAAO,cACtBC,IAAI,IACJC,UAAU,YACVC,gBAAgB,YAJpB,KAQRC,EAAgB3B,KAAKiB,MAAMN,WACvB,yBACIa,IAAI,IACJC,UAAU,UACVG,QAAS5B,KAAKY,yBACd,4BACIa,UAAU,MACVI,KAAK,SACLD,QAAS5B,KAAKa,cAHlB,YAQJ,GAEJiB,EAAO9B,KAAKC,MAAM8B,QAAQC,KAAK,SAAAF,GAC3B,OAAOA,EAAKG,WAAa,EAAKhC,MAAM6B,OAExCI,EACwB,WAApBlC,KAAKC,MAAMoB,KACP,GAEA,yBACIG,IAAI,IACJC,UAAU,cACVU,IAAK,QAAUL,EAAKM,IACpBC,IAAI,cACJT,QAAS5B,KAAKS,0BAK1B6B,GACuB,IAAvBtC,KAAKC,MAAMsC,SAAwC,WAApBvC,KAAKC,MAAMoB,KACtC,kBAAC,IAAD,CACIC,GAAItB,KAAKC,MAAMsB,KAAO,QACtBC,IAAI,IACJC,UAAU,aACVC,gBAAgB,aAGpB,GAIFc,EAAcxC,KAAKC,MAAMwC,YAAc,qBAAuB,aAapE,MAAO,CACHrB,EACAO,EACAO,EACAI,EAfoB,WAApBtC,KAAKC,MAAMoB,KACP,4BACIG,IAAI,IACJC,UAAWe,EACXZ,QAAS5B,KAAKC,MAAMyC,cACpB,0BAAMjB,UAAU,iBAGpB,GASJ,wBAAID,IAAI,KAAR,yBAC0B,yBAAKW,IAAI,YAAYE,IAAI,eAC/C,0BAAMZ,UAAU,QAAhB,SAEJ,wBAAID,IAAI,KAAKxB,KAAKC,MAAMoB,MACxB,uBAAGG,IAAI,KAAKxB,KAAKC,MAAM0C,W,GAtHCrC,aCAfsC,E,YACjB,WAAY3C,GAAQ,IAAD,8BACf,4CAAMA,KAgBV4C,mBAAqB,SAAAC,GACjB,EAAKpC,SAAS,CACVoB,KAAMiB,SAASD,EAAME,OAAOC,MAAO,IACnCC,eAAe,KApBJ,EAyBnBC,oBAAsB,SAAAL,GAClB,EAAKpC,SAAS,CACV0C,SAAS,KA3BE,EAgCnBC,mBAAqB,SAAAP,GACjB,EAAKpC,SAAS,CACV0C,SAAS,KAlCE,EAuCnBE,qBAAuB,SAAAR,GACnB,EAAKpC,SAAS,CACV6C,SAAUT,EAAME,OAAOC,MACvBC,eAAe,KA1CJ,EAgDnBM,iBAAmB,WACf,IAAIC,EAAS,EAAKxD,MAAM8B,QAAQC,KAAK,SAAAyB,GAAY,OAAOA,EAAOxB,WAAa,EAAKhB,MAAMa,OACnF2B,EAAOF,WAAa,EAAKtC,MAAMsC,UAC/B,EAAK7C,SAAS,CACVwC,eAAe,IAGnB,EAAKjD,MAAMyD,YAAY,EAAKzC,MAAMa,KAAM2B,EAAOlB,SAE/C,EAAKtC,MAAM0D,QAAQC,KAAK,EAAK3D,MAAMsB,KAAO,YAG1C,EAAKb,SAAS,CACVwC,eAAe,KA3DvB,EAAKjC,MAAQ,CACTa,KAAM,EACNyB,SAAU,GACVL,eAAe,EACfE,SAAS,GANE,E,mFAYGlC,EAAWC,GAC7B,QAAUD,IAAclB,KAAKC,OAAWkB,IAAcnB,KAAKiB,S,+BA2D3D,IAHA,IAAI4C,EAAS7D,KAAKC,MAAM8B,QAAQ+B,KAAK,SAACC,EAAGC,GAAQ,OAAOD,EAAEE,KAAKC,MAAMC,cAAcH,EAAEC,KAAKC,SAGjFE,EAAI,EAAGC,EAAMR,EAAOS,OAAQF,EAAIC,EAAKD,IACb,QAAzBP,EAAOO,GAAGH,KAAKC,OAA4C,WAAzBL,EAAOO,GAAGH,KAAKC,OAA+C,YAAzBL,EAAOO,GAAGH,KAAKC,OACtFL,EAAOD,KAAKC,EAAOU,OAAOH,EAAG,GAAG,IAKxC,IAAII,EAAUX,EAAOY,IAAI,SAAAhB,GACrB,OAAO,4BAAQjC,IAAKiC,EAAOxB,SAAUgB,MAAOQ,EAAOxB,UAAWwB,EAAOQ,KAAKC,MAAnE,IAA2ET,EAAOQ,KAAKS,QAIlGF,EAAQG,QAAQ,4BAAQnD,IAAI,IAAIyB,MAAM,IAAtB,sBAGhB,IAAI2B,EAAa5E,KAAKiB,MAAMiC,cAAgB,QAAU,aAGlD2B,EAAc7E,KAAKiB,MAAMmC,SAAmC,KAAxBpD,KAAKiB,MAAMsC,SAAmB,yBAA2B,iBAEjG,OACI,yBAAK9B,UAAU,OACX,kBAAC,EAAD,CAAQJ,KAAK,SAASU,QAAS/B,KAAKC,MAAM8B,QAASD,KAAM9B,KAAKC,MAAM6B,KAAMS,QAASvC,KAAKC,MAAMsC,QAASI,KAAK,wFAC5G,yBAAKlB,UAAU,YACX,4BAAQqD,SAAU9E,KAAK6C,oBAClB2B,GAEL,0BAAM/C,UAAU,iBAEpB,2BAAOsD,QAAQ,WAAWtD,UAAWoD,GAArC,YACA,2BAAOG,GAAG,WAAWvD,UAAU,WAAWI,KAAK,WAAWoD,aAAa,GAChEC,QAASlF,KAAKmD,oBACdgC,OAAQnF,KAAKqD,mBACbyB,SAAU9E,KAAKsD,uBACtB,4BAAQ7B,UAAU,MAAMI,KAAK,SAASD,QAAS5B,KAAKwD,kBAApD,UACA,yBAAK/B,UAAWmD,GAAhB,4D,GA5GmBtE,aCDd8E,E,8LAEKlE,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAK5B,IACIoF,EAAOC,EADPC,EAAQvF,KAAKC,MAAMsF,MAAMzB,KAAK,SAACC,EAAGC,GAAQ,OAAOD,EAAEuB,KAAKnB,cAAcH,EAAEsB,QAG5E,OACI,yBAAK7D,UAAU,YACX,4BAAQwB,MAAOjD,KAAKC,MAAMuF,eAAgBV,SAAU9E,KAAKC,MAAM6E,UAC1DS,EAAMd,IAAI,SAAAgB,GAGP,OAFAJ,EAAQI,EAAKH,KAAKD,MAAM,KACxBC,EAAI,UAAMD,EAAM,GAAZ,YAAkBA,EAAM,IACrB,4BAAQ7D,IAAKiE,EAAKC,OAAQzC,MAAOwC,EAAKC,QAASD,EAAKxB,KAApD,KAA4DqB,EAA5D,QAGf,0BAAM7D,UAAU,qB,GApBcnB,aCCzBqF,E,8LAEKzE,EAAWC,GAC7B,OAAO,I,+BAIP,OACI,yBAAKM,UAAU,QACX,kBAAC,IAAD,CAASH,GAAItB,KAAKC,MAAMsB,KAAO,aAAcG,gBAAgB,YAAW,yBAAKD,UAAU,wBAAvF,cACA,kBAAC,IAAD,CAASH,GAAItB,KAAKC,MAAMsB,KAAO,OAAQG,gBAAgB,YAAW,yBAAKD,UAAU,qBAAjF,QACA,kBAAC,IAAD,CAASH,GAAItB,KAAKC,MAAMsB,KAAO,UAAWG,gBAAgB,YAAW,yBAAKD,UAAU,wBAApF,WACA,kBAAC,IAAD,CAASH,GAAItB,KAAKC,MAAMsB,KAAO,cAAeG,gBAAgB,YAAW,yBAAKD,UAAU,2BAAxF,oB,GAZkBnB,aCEbsF,E,YACjB,WAAY3F,GAAQ,IAAD,8BACf,4CAAMA,KAmHV4F,aAAe,SAACC,EAAgBC,GAM5B,IALA,IAAIC,EAAQ,EAAK/E,MAAM+E,MACnBP,EAAOK,EAAe9D,KAAK,SAAAyD,GACvB,OAAOA,EAAKC,SAAWK,IAGtB3B,EAAI,EAAGA,EAAIqB,EAAKO,MAAM1B,OAAQF,IACnC4B,EAAM5B,GAAG6B,SAAWR,EAAKO,MAAM5B,GAAG6B,SAClCD,EAAM5B,GAAG8B,YAAcT,EAAKO,MAAM5B,GAAG8B,YAGzC,EAAKxF,SAAS,CACVsF,MAAOA,KAhII,EAqInBG,oBAAsB,SAAArD,GAClB,IAAIkD,EAAQ,EAAK/E,MAAM+E,MACnBI,EAActD,EAAME,OAAOgC,GAAGK,MAAM,KAAK,GACzCgB,EAAiBvD,EAAME,OAAOgC,GAAGK,MAAM,KAAK,GAC5CY,EAAWD,EAAMI,EAAc,GAAGH,SAEf,UAAnBI,IACAJ,EAAS/B,MAAQpB,EAAME,OAAOC,OAEX,WAAnBoD,IACAJ,EAASK,OAASxD,EAAME,OAAOC,OAEZ,UAAnBoD,IACAJ,EAASM,MAAQzD,EAAME,OAAOC,OAGlC,EAAKvC,SAAS,CACVsF,MAAOA,KAtJI,EA4JnBQ,gBAAkB,SAAA1D,GACd,IAAI2D,EAAe3D,EAAME,OAAO0D,aAAa,aACzCT,EAAW,EAAKhF,MAAM+E,MAAMS,EAAe,GAAGR,SAClD,EAAKhG,MAAM0G,iBAAiBF,EAAcR,IA/J3B,EAoKnBW,sBAAwB,SAAA9D,GACpB,IAAIkD,EAAQ,EAAK/E,MAAM+E,MACnBS,EAAe1D,SAASD,EAAME,OAAO0D,aAAa,aAAc,IAChEG,EAAsBb,EAAMS,EAAe,GAAGP,YAGlD,GAAIpD,EAAME,OAAO8D,UAAUC,SAAS,aAAc,CAC9C,IAAIC,EAAQH,EAAoBI,QAC5BlE,SAASD,EAAME,OAAOkE,UAAW,KAEjCF,GAAS,GACTH,EAAoBtC,OAAOyC,EAAO,GAEtChB,EAAMS,EAAe,GAAGP,YAAcW,EACtC,EAAKnG,SAAS,CACVsF,MAAOA,IAEX,EAAK/F,MAAMkH,mBAAmBV,EAAcI,QAE5CA,EAAoBjD,KAAKb,SAASD,EAAME,OAAOkE,UAAW,KAC1DlB,EAAMS,EAAe,GAAGP,YAAcW,EACtC,EAAKnG,SAAS,CACVsF,MAAOA,IAEX,EAAK/F,MAAMkH,mBAAmBV,EAAcI,IA1LhD,EAAK5F,MAAQ,CACT+E,MAAO,CACH,CACIoB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,EACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,IAEjB,CACIkB,OAAQ,GACRnB,SAAU,CACN/B,MAAO,GACPoC,OAAQ,GACRC,MAAO,IAEXL,YAAa,MA5FV,E,mFAoGGhF,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,OAASkB,IAAcnB,KAAKiB,S,0CAKxDjB,KAAK6F,aAAa7F,KAAKC,MAAMoH,UAAWrH,KAAKC,MAAMqH,gB,gDAK7BpG,GACtBlB,KAAK6F,aAAa3E,EAAUmG,UAAWnG,EAAUoG,gB,+BA0FjD,IATM,IAMF7F,EANC,OACDgE,EAAOzF,KAAKC,MAAMoH,UAAUrF,KAAK,SAAAyD,GAC7B,OAAOA,EAAKC,SAAW,EAAKzF,MAAMqH,eAEtCC,EAAW,GACXC,EAAa,GAIRpD,EAAI,EAAGA,EAAIqB,EAAKO,MAAM1B,OAAQF,IAAK,CACxCoD,EAAa,GAGb,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBhG,EAAY,YACRzB,KAAKiB,MAAM+E,MAAM5B,GAAG8B,YAAYwB,SAASD,EAAI,KAC7ChG,GAAa,cAGjB+F,EAAW5D,KACP,yBACIpC,IAAKiG,EACLhG,UAAWA,EACXkG,YAAWvD,EAAI,EACfxC,QAAS5B,KAAK4G,uBACba,EAAI,IAMjBF,EAAS3D,KACL,yBAAKpC,IAAK4C,EAAG3C,UAAU,aACnB,yBAAKA,UAAU,WACX,0BAAMA,UAAU,QAAhB,QACUgE,EAAKO,MAAM5B,GAAGgD,QAExB,0BAAM3F,UAAU,QAAhB,YACkBgE,EAAKO,MAAM5B,GAAGH,OAGpC,yBAAKxC,UAAU,YACX,6BACI,2BAAOsD,QAAS,SAAWX,EAAI,GAAK,UAApC,OAGA,2BACIY,GAAI,SAAWZ,EAAI,GAAK,SACxBvC,KAAK,MACLoB,MAAOjD,KAAKiB,MAAM+E,MAAM5B,GAAG6B,SAAS/B,MACpCY,SAAU9E,KAAKmG,uBAGvB,6BACI,2BAAOpB,QAAS,SAAWX,EAAI,GAAK,WAApC,OAGA,2BACIY,GAAI,SAAWZ,EAAI,GAAK,UACxBvC,KAAK,MACLoB,MAAOjD,KAAKiB,MAAM+E,MAAM5B,GAAG6B,SAASK,OACpCxB,SAAU9E,KAAKmG,uBAGvB,6BACI,2BAAOpB,QAAS,SAAWX,EAAI,GAAK,UAApC,OAGA,2BACIY,GAAI,SAAWZ,EAAI,GAAK,SACxBvC,KAAK,MACLoB,MAAOjD,KAAKiB,MAAM+E,MAAM5B,GAAG6B,SAASM,MACpCzB,SAAU9E,KAAKmG,uBAGvB,4BACI1E,UAAU,WACVI,KAAK,SACL8F,YAAWvD,EAAI,EACfxC,QAAS5B,KAAKwG,iBAJlB,SAQJ,yBAAK/E,UAAU,cAAf,mBACA,yBAAKA,UAAU,mBACX,4BACIA,UAC6B,gBAAzBgE,EAAKO,MAAM5B,GAAGwD,OACR,mCACA,0BAEV/F,KAAK,SACLgG,YAAWpC,EAAKC,OAChBiC,YAAWvD,EAAI,EACf0D,cAAY,cACZlG,QAAS5B,KAAKC,MAAM8H,gBAVxB,eAaA,4BACItG,UAC6B,kBAAzBgE,EAAKO,MAAM5B,GAAGwD,OACR,mCACA,0BAEV/F,KAAK,SACLgG,YAAWpC,EAAKC,OAChBiC,YAAWvD,EAAI,EACf0D,cAAY,gBACZlG,QAAS5B,KAAKC,MAAM8H,gBAVxB,iBAaA,4BACItG,UAC6B,WAAzBgE,EAAKO,MAAM5B,GAAGwD,OACR,mCACA,0BAEV/F,KAAK,SACLgG,YAAWpC,EAAKC,OAChBiC,YAAWvD,EAAI,EACf0D,cAAY,SACZlG,QAAS5B,KAAKC,MAAM8H,gBAVxB,UAaA,4BACItG,UAC6B,YAAzBgE,EAAKO,MAAM5B,GAAGwD,OACR,mCACA,0BAEV/F,KAAK,SACLgG,YAAWpC,EAAKC,OAChBiC,YAAWvD,EAAI,EACf0D,cAAY,UACZlG,QAAS5B,KAAKC,MAAM8H,gBAVxB,YAcJ,yBAAKtG,UAAU,mBACX,yBAAKA,UAAU,cAAf,eACA,yBAAKA,UAAU,cAAc+F,MAM7C,OACI,yBAAK/F,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,iBACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,qIAET,kBAAC,EAAD,CACI4C,MAAOvF,KAAKC,MAAMoH,UAClB7B,eAAgBxF,KAAKC,MAAMqH,aAC3BxC,SAAU9E,KAAKC,MAAM+H,eAEzB,yBAAKvG,UAAU,iBAAiB8F,GAChC,kBAAC,EAAD,CAAMhG,KAAMvB,KAAKC,MAAMsB,Y,GAtWJjB,a,+jBCDd2H,E,YACjB,WAAYhI,GAAQ,IAAD,8BACf,4CAAMA,KAqBViI,eAAiB,SAAApF,GACb,IAAIqF,EAAM,EACNrF,EAAME,OAAO8D,UAAUC,SAAS,SAChCoB,EAAM,GAEV,EAAKzH,SAAS,CACV0H,YAAaD,IAEjB,EAAKlI,MAAMoI,YAAYF,IA9BR,EAkCnBG,SAAW,SAAAC,GACP,OAAO,EAAKtI,MAAMuI,KAAKxG,KAAK,SAAAyG,GACxB,OAAOA,EAAS/C,SAAW,EAAKzF,MAAMoH,UAAUkB,GAAe7C,UApCpD,EAyCnBgD,SAAW,SAACC,EAASJ,EAAeK,GAChC,OAAOD,EAAQ3C,MAAMhE,KAAK,SAAA6G,GACtB,OAAOA,EAASzB,SAAW,EAAKnH,MAAMoH,UAAUkB,GAAevC,MAAM4C,GAAexB,UA3CzE,EAgDnB0B,WAAa,SAAA7G,GACT,OAAO,EAAKhC,MAAM8B,QAAQC,KAAK,SAAAyB,GAC3B,OAAOA,EAAOxB,WAAaA,KAlDhB,EAuDnB8G,iBAAmB,SAACC,EAAO/G,GACvB,OAAO+G,EAAMhH,KAAK,SAAAyB,GACd,OAAOA,EAAOxB,WAAaA,KAzDhB,EA8DnBgH,qBAAuB,SAACC,EAAcxD,GAClC,OAAOwD,EAAa3D,MAAMvD,KAAK,SAAAyD,GAC3B,OAAOA,EAAKC,SAAWA,KAhEZ,EAqEnByD,eAAiB,WAeb,IAdA,IAIIC,EACAC,EACApD,EACA0C,EACAH,EACAU,EACAI,EACAC,EAXAP,EAAQ,GACRjF,EAAI,EAAK9D,MAAM8B,QAAQuC,OACvBN,EAAI,EAAK/D,MAAMoH,UAAU/C,OACzBkF,EAAa,GAWVxF,KACHwF,EAAW5F,KAAK,CACZ8B,OAAQ,EAAKzF,MAAMoH,UAAUrD,GAAG0B,OAChC+D,MAAO,IAKf,KAAO1F,KACHiF,EAAMpF,KAAK,CACP3B,SAAU,EAAKhC,MAAM8B,QAAQgC,GAAG9B,SAChCyH,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,OAAQ,EACRvE,MAAOiE,EAAW/E,IAAI,SAAAV,GAAC,YAAUA,OAQzC,IAHAC,EAAI,EAAK/D,MAAMoH,UAAU/C,OAGlBN,KAGH,IAFAoF,EAAI,EAAKnJ,MAAMoH,UAAUrD,GAAGgC,MAAM1B,OAE3B8E,KAQH,IANAnD,EAAW,EAAKhG,MAAMoH,UAAUrD,GAAGgC,MAAMoD,GAAGnD,SAE5C0C,EAAU,EAAKL,SAAStE,GAExBqF,GADAb,EAAO,EAAKE,SAASC,EAAS3E,EAAGoF,IACxBrH,QAAQuC,OAEV+E,KAEHE,EAAY,EAEZL,EAAe,EAAKH,iBAAiBC,EAAOR,EAAKzG,QAAQsH,GAAGpH,UAE5DqH,EAAmB,EAAKL,qBAAqBC,EAAc,EAAKjJ,MAAMoH,UAAUrD,GAAG0B,QAE/E8C,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAAS/B,SACvCgF,EAAaU,SACbL,GAAa,GAEbf,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAASK,UACvC4C,EAAaW,UACbN,GAAa,GAEbf,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAASM,SACvC2C,EAAaY,SACbP,GAAa,GAEC,IAAdA,GACAL,EAAaQ,YAEC,IAAdH,GACAL,EAAaS,YAGjBL,EAAiBG,OAASF,EAKtC,OAAOP,GAvJQ,EA2JnBe,gBAAkB,SAACf,EAAOgB,EAAeC,GAGrC,IAFA,IAAIC,EAAMzG,EAAQ0G,EAET/F,EAAI,EAAGC,EAAM2E,EAAM1E,OAAQF,EAAIC,EAAKD,IAAK,CAE9C,OAAQ6F,GACJ,IAAK,YACDC,EAAOlB,EAAM5E,GAAGsF,UAChB,MACJ,IAAK,YACDQ,EAAOlB,EAAM5E,GAAGuF,UAChB,MACJ,IAAK,SACDO,EAAOlB,EAAM5E,GAAGwF,OAChB,MACJ,IAAK,UACDM,EAAOlB,EAAM5E,GAAGyF,QAChB,MACJ,IAAK,SACDK,EAAOlB,EAAM5E,GAAG0F,OAChB,MACJ,IAAK,OACDI,EAAOlB,EAAM5E,GAAGqF,MAMxBhG,EAAS,EAAKqF,WAAWE,EAAM5E,GAAGnC,UAI9BkI,EADA/F,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EACtB,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBAEA,gBAIf4F,EAAcpG,KACV,yBAAKpC,IAAK4C,EAAG3C,UAAU,aACnB,yBAAKA,UAAU,SAAS2I,wBAAyB,CAAEC,OAAQjG,EAAI,EAAI+F,KACnE,yBAAKhI,IAAK,QAAUsB,EAAOrB,IAAKC,IAAI,cAAcZ,UAAU,QAC5D,yBAAKA,UAAU,QAAQgC,EAAOQ,KAAKC,OACnC,yBAAKzC,UAAU,QAAQyI,OAxMnC,EAAKjJ,MAAQ,CACTmH,YAAa,GAHF,E,mFASGlH,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,OAASkB,IAAcnB,KAAKiB,S,0CAKxDjB,KAAKU,SAAS,CACV0H,YAAapI,KAAKC,MAAMqK,gB,+BAkM5B,IAsBIC,EACAC,EACAC,EACAC,EAzBA1B,EAAQhJ,KAAKmJ,iBACbwB,EAAe,GACfC,EAAc,GACdC,EAAc,GACdC,EAAe,GACfC,EAAe,GACfC,EAAc,GACdC,EAAc,GACdC,EAAgB,GAChBC,EAAW,GACXC,EAAU,GACVC,EAAU,GACVC,EAAW,GACXC,EAAW,GACXC,EAAU,GACVC,EAAU,GACVC,EAAY,GACZhC,EAAY,GACZC,EAAY,GACZC,EAAS,GACTC,EAAU,GACVC,EAAS,GAOkB,IAA3B9J,KAAKiB,MAAMmH,aACXmC,EAAe,2BACfC,EAAe,kBACfC,EAAY,GACZC,EAAY,SAEZH,EAAe,kBACfC,EAAe,2BACfC,EAAY,OACZC,EAAY,IAIhB,IAAK,IAAItG,EAAI,EAAGC,EAAM2E,EAAM1E,OAAQF,EAAIC,EAAKD,IACzC,IAAK,IAAIqD,EAAI,EAAGkE,EAAO3C,EAAM5E,GAAGmB,MAAMjB,OAAQmD,EAAIkE,EAAMlE,IACnB,aAA7BuB,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBiF,EAAa/G,KAAK,CACd3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,gBAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBkF,EAAYhH,KAAK,CACb3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,YAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBmF,EAAYjH,KAAK,CACb3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,aAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBoF,EAAalH,KAAK,CACd3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,aAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBqF,EAAanH,KAAK,CACd3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,YAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBsF,EAAYpH,KAAK,CACb3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,YAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBuF,EAAYrH,KAAK,CACb3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QAGA,cAA7BT,EAAM5E,GAAGmB,MAAMkC,GAAG/B,QAClBwF,EAActH,KAAK,CACf3B,SAAU+G,EAAM5E,GAAGnC,SACnBwH,MAAOT,EAAM5E,GAAGmB,MAAMkC,GAAGgC,QA8GzC,OAvGAkB,EAAa7G,KAAK,SAACC,EAAGC,GAClB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBY,EAAcQ,EAAU,QAG7CP,EAAY9G,KAAK,SAACC,EAAGC,GACjB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBa,EAAaQ,EAAS,QAG3CP,EAAY/G,KAAK,SAACC,EAAGC,GACjB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBc,EAAaQ,EAAS,QAG3CP,EAAahH,KAAK,SAACC,EAAGC,GAClB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBe,EAAcQ,EAAU,QAG7CP,EAAajH,KAAK,SAACC,EAAGC,GAClB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBgB,EAAcQ,EAAU,QAG7CP,EAAYlH,KAAK,SAACC,EAAGC,GACjB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBiB,EAAaQ,EAAS,QAG3CP,EAAYnH,KAAK,SAACC,EAAGC,GACjB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBkB,EAAaQ,EAAS,QAG3CP,EAAcpH,KAAK,SAACC,EAAGC,GACnB,OAAOA,EAAEyF,MAAQ1F,EAAE0F,QAIvBzJ,KAAK+J,gBAAgBmB,EAAeQ,EAAW,QAG/C1C,EAAMlF,KAAK,SAACC,EAAGC,GACX,OAAOA,EAAE0F,UAAY3F,EAAE2F,YAI3B1J,KAAK+J,gBAAgBf,EAAOU,EAAW,aAGvCV,EAAMlF,KAAK,SAACC,EAAGC,GACX,OAAOA,EAAE2F,UAAY5F,EAAE4F,YAI3B3J,KAAK+J,gBAAgBf,EAAOW,EAAW,aAGvCX,EAAMlF,KAAK,SAACC,EAAGC,GACX,OAAOA,EAAE4F,OAAS7F,EAAE6F,SAIxB5J,KAAK+J,gBAAgBf,EAAOY,EAAQ,UAGpCZ,EAAMlF,KAAK,SAACC,EAAGC,GACX,OAAOA,EAAE6F,QAAU9F,EAAE8F,UAIzB7J,KAAK+J,gBAAgBf,EAAOa,EAAS,WAGrCb,EAAMlF,KAAK,SAACC,EAAGC,GACX,OAAOA,EAAE8F,OAAS/F,EAAE+F,SAIxB9J,KAAK+J,gBAAgBf,EAAOc,EAAQ,UAGhC,yBAAKrI,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,aACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,0IAET,yBAAKlB,UAAU,YACX,4BAAQA,UAAW8I,EAAc3I,QAAS5B,KAAKkI,gBAA/C,eAGA,4BAAQzG,UAAW+I,EAAc5I,QAAS5B,KAAKkI,gBAA/C,UAIJ,yBAAKzG,UAAWgJ,GACZ,yBAAKhJ,UAAU,oBAAf,mBACA,yBAAKA,UAAU,kBAAkB0J,GACjC,6BACA,yBAAK1J,UAAU,oBAAf,qBACA,yBAAKA,UAAU,kBAAkB2J,GACjC,6BACA,yBAAK3J,UAAU,oBAAf,iBACA,yBAAKA,UAAU,kBAAkB4J,GACjC,6BACA,yBAAK5J,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkB6J,GACjC,6BACA,yBAAK7J,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkB8J,GACjC,6BACA,yBAAK9J,UAAU,oBAAf,iBACA,yBAAKA,UAAU,kBAAkB+J,GACjC,6BACA,yBAAK/J,UAAU,oBAAf,YACA,yBAAKA,UAAU,kBAAkBgK,GACjC,6BACA,yBAAKhK,UAAU,oBAAf,cACA,yBAAKA,UAAU,kBAAkBiK,IAErC,yBAAKjK,UAAWiJ,GACZ,yBAAKjJ,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkBiI,GACjC,6BACA,yBAAKjI,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkBkI,GACjC,6BACA,yBAAKlI,UAAU,oBAAf,UACA,yBAAKA,UAAU,kBAAkBmI,GACjC,6BACA,yBAAKnI,UAAU,oBAAf,WACA,yBAAKA,UAAU,kBAAkBoI,GACjC,6BACA,yBAAKpI,UAAU,oBAAf,UACA,yBAAKA,UAAU,kBAAkBqI,IAErC,kBAAC,EAAD,CAAMvI,KAAMvB,KAAKC,MAAMsB,Y,GAtdNjB,aCAZsL,E,8LAEK1K,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAK5B,OACI,yBAAKwB,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,cACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,mKAET,yBAAKlB,UAAU,cAAf,mBACA,wLAKA,wBAAIA,UAAU,gBACV,4BACI,0BAAMA,UAAU,mBADpB,UAGA,4BACI,0BAAMA,UAAU,mBADpB,UAGA,4BACI,0BAAMA,UAAU,oBADpB,WAGA,4BACI,0BAAMA,UAAU,kBADpB,UAIJ,yBAAKA,UAAU,cAAf,iBACA,6JAKA,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SACX,yBACIU,IAAK,mBACLE,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QAAf,YAEJ,yBAAKA,UAAU,SACX,yBACIU,IAAK,mBACLE,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QAAf,aAEJ,yBAAKA,UAAU,SACX,yBACIU,IAAK,mBACLE,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QAAf,iBAGR,wEACA,qJAIA,2JAKA,yBAAKA,UAAU,cAAf,QACA,gcAUA,wNAMA,yHAIA,+HAIA,yBAAKA,UAAU,cAAf,WACA,8KAnGJ,wJA2GI,4BACI,4BACI,0BAAMA,UAAU,wBADpB,gBAGA,4BACI,0BAAMA,UAAU,0BADpB,kBAGA,4BACI,0BAAMA,UAAU,uBADpB,WAGA,4BACI,0BAAMA,UAAU,yBADpB,aAIJ,mPAMA,2SAOA,yBAAKA,UAAU,cAAf,eACA,wUAQA,wIAIA,yBAAKA,UAAU,cAAf,SACA,wJAGY,0BAAMA,UAAU,qBAE5B,4LAKA,8JAKA,yBAAKA,UAAU,cAAf,gBACA,wBAAIA,UAAU,eACV,kQAOA,4FAIA,wHAIA,0FAIA,4MAMA,qNAKI,6BALJ,mCAOI,4BACI,4BACI,kEACA,6BACI,wCADJ,4CAIA,6BACI,4CADJ,oHAOJ,4BACI,mDACA,6BACI,wCADJ,0CAIA,6BACI,4CADJ,oKAQJ,4BACI,mDACA,6BACI,wCADJ,uDAIA,6BACI,4CADJ,8CAKJ,4BACI,sDACA,6BACI,wCADJ,wBAGA,6BACI,4CADJ,0PAUJ,4BACI,0CACA,6BACI,wCADJ,6BAGA,6BACI,4CADJ,mQAUJ,4BACI,sEACA,6BACI,wCADJ,mCAIA,6BACI,4CADJ,6FAMJ,4BACI,gDACA,6BACI,wCADJ,mCAIA,6BACI,4CADJ,6JAOJ,4BACI,gDACA,6BACI,wCADJ,MAGA,6BACI,4CADJ,qBAIJ,4BACI,iDACA,6BACI,wCADJ,MAGA,6BACI,4CADJ,+BAOhB,iLAKA,kBAAC,EAAD,CAAMF,KAAMvB,KAAKC,MAAMsB,Y,GAtUEjB,a,QCFpBuL,E,YACjB,WAAY5L,GAAQ,IAAD,8BACf,4CAAMA,KAkCV6L,QAAU,SAACC,GAMP,IALA,IAEIlD,EAAUmD,EAFVC,EAAI,eACJzD,EAAO,EAAKvH,MAAMuH,KAFC,WAMdpE,GACLyE,EAAWkD,EAAYvD,KAAKxC,MAAMhE,KAAK,SAAAkK,GAAU,OAAOA,EAAK9E,SAAYhD,EAAI,IAC7E4H,EAAWnD,EAAS9G,QAAQC,KAAK,SAAAyB,GAC7B,OAAOA,EAAOxB,WAAagK,EAAKhM,MAAM6B,OAE1C0G,EAAKpE,GAAK,CAAE,KAASA,EAAI,EAAIoD,WAAYwE,EAASxD,OAL7CpE,EAAI,EAAGA,EAAI2H,EAAYtG,KAAKO,MAAM1B,OAAQF,IAAM,EAAhDA,GAQT,EAAK1D,SAAS,CACV8H,KAAMA,KAlDK,EAwDnB2D,qBAAuB,SAAArJ,GACnB,IAAI0F,EAAO,EAAKvH,MAAMuH,KAClB/B,EAAe1D,SAASD,EAAME,OAAO0D,aAAa,aAAc,IAChE0F,EAAM5D,EAAKxG,KAAK,SAAAoK,GAAS,OAAOA,EAAIF,OAASzF,IAC7CO,EAAQwB,EAAKvB,QAAQmF,GAGzB,GAAItJ,EAAME,OAAO8D,UAAUC,SAAS,YAAa,CAC7C,IAAIC,EAAQoF,EAAI5E,WAAWP,QAAQnE,EAAME,OAAOkE,WAC5CF,GAAS,GAAKoF,EAAI5E,WAAWjD,OAAOyC,EAAO,GAC/C,EAAKtG,SAAS,CACV8H,KAAMA,IAEV,EAAKvI,MAAMoM,kBAAkB5F,EAAc2F,QAEtCA,EAAI5E,WAAWlD,OAAS,IAC7B8H,EAAI5E,WAAW5D,KAAKd,EAAME,OAAOkE,WACjCsB,EAAKxB,GAASoF,EACd,EAAK1L,SAAS,CACV8H,KAAMA,IAEV,EAAKvI,MAAMoM,kBAAkB5F,EAAc2F,KA7EhC,EAkFnBE,aAAe,WAMX,IALA,IAEI7K,EAFAuE,EAAQ,GACRwB,EAAa,GAIRpD,EAAI,EAAGA,EAAI,EAAKnE,MAAMwF,KAAKO,MAAM1B,OAAQF,IAAK,CAEnDoD,EAAa,GAGb,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBhG,EAAY,YACR,EAAKxB,MAAMwF,KAAKO,MAAM5B,GAAG8B,YAAYwB,SAASD,EAAI,KAAMhG,GAAa,cACrE,EAAKR,MAAMuH,KAAKpE,GAAGoD,WAAWE,UAAUD,EAAI,GAAG8E,cAAe9K,GAAa,aAE/E+F,EAAW5D,KAAK,yBAAKpC,IAAKiG,EAAGhG,UAAWA,EAAWkG,YAAYvD,EAAI,EAAIxC,QAAS,EAAKuK,sBAAuB1E,EAAI,IAIpHzB,EAAMpC,KACF,yBAAKpC,IAAK4C,EAAG3C,UAAU,aACnB,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QAAf,QAA4B,EAAKxB,MAAMwF,KAAKO,MAAM5B,GAAGgD,QACrD,8BAAO,EAAKnH,MAAMwF,KAAKO,MAAM5B,GAAGoI,MAChC,0BAAM/K,UAAU,QAAhB,YAAqC,EAAKxB,MAAMwF,KAAKO,MAAM5B,GAAGH,OAElE,yBAAKxC,UAAU,cACV+F,KAMjB,OAAOxB,GAlHP,EAAK/E,MAAQ,CACTuH,KAAM,CACF,CAAE,KAAQ,EAAGhB,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,EAAGA,WAAY,IACzB,CAAE,KAAQ,GAAIA,WAAY,MAbnB,E,mFAoBGtG,EAAWC,GAC7B,QAAUD,IAAclB,KAAKC,OAAWkB,IAAcnB,KAAKiB,S,0CAK3DjB,KAAK8L,QAAQ9L,KAAKC,S,gDAIIiB,GACtBlB,KAAK8L,QAAQ5K,K,+BA0Fb,IAEIuL,EAFAlF,EAAWvH,KAAKsM,eAChBI,EAAU,IAAIC,KAAK3M,KAAKC,MAAMwF,KAAKH,MAcvC,OAVAoH,EAAQE,SAAS,IACjBF,EAAQG,WAAW,IAGfJ,EADA,IAAIE,KAASD,EACG,oBAGA,WAIhB,yBAAKjL,UAAWgL,GACXlF,O,GA3I4BjH,aCIxBwM,E,8LAEK5L,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAItB,IAAD,OACDwF,EAAOzF,KAAKC,MAAMoH,UAAUrF,KAAK,SAAAyD,GAC7B,OAAOA,EAAKC,SAAW,EAAKzF,MAAMqH,eAEtCkB,EAAOxI,KAAKC,MAAMuI,KAAKxG,KAAK,SAAAwG,GACxB,OAAOA,EAAK9C,SAAW,EAAKzF,MAAMqH,eAG1C,OACI,yBAAK7F,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,OACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,8QAET,2BACI,8EAEJ,yEACA,kBAAC,EAAD,CACI4C,MAAOvF,KAAKC,MAAMoH,UAClB7B,eAAgBxF,KAAKC,MAAMqH,aAC3BxC,SAAU9E,KAAKC,MAAM+H,eAEzB,yBAAKvG,UAAU,gBACX,0BAAMA,UAAU,sBAAhB,MACA,0CACA,0BAAMA,UAAU,uBAAhB,MACA,2CACA,0BAAMA,UAAU,gCAAhB,MACA,uCAEJ,kBAAC,EAAD,CACIgE,KAAMA,EACN+C,KAAMA,EACN1G,KAAM9B,KAAKC,MAAM6B,KACjBuK,kBAAmBrM,KAAKC,MAAMoM,oBAElC,kBAAC,EAAD,CAAM9K,KAAMvB,KAAKC,MAAMsB,Y,GAlDLjB,aCJbyM,E,8LAEK7L,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAK5B,IAGI+G,EAHAiF,EAAOjM,KACPyD,EAASzD,KAAKC,MAAM8B,QAAQC,KAAK,SAAAgL,GAAe,OAAOA,EAAU/K,WAAagK,EAAKhM,MAAMuI,KAAKvG,WAC9FwH,EAAQ,EAERwD,EAAa,GACbC,EAAc,GACdC,EAAa,GA2BjB,OAxBAnG,EAAQiF,EAAKhM,MAAMuI,KAAKA,KAAKvB,QAAQgF,EAAKhM,MAAMgG,SAAS/B,SAC5C,IACTuF,GAAS,EACK,IAAVzC,IAAeiG,EAAa,WAClB,IAAVjG,IAAekG,EAAc,WACnB,IAAVlG,IAAemG,EAAa,aAGpCnG,EAAQiF,EAAKhM,MAAMuI,KAAKA,KAAKvB,QAAQgF,EAAKhM,MAAMgG,SAASK,UAC5C,IACTmD,GAAS,EACK,IAAVzC,IAAeiG,EAAa,WAClB,IAAVjG,IAAekG,EAAc,WACnB,IAAVlG,IAAemG,EAAa,aAGpCnG,EAAQiF,EAAKhM,MAAMuI,KAAKA,KAAKvB,QAAQgF,EAAKhM,MAAMgG,SAASM,SAC5C,IACTkD,IACc,IAAVzC,IAAeiG,EAAa,WAClB,IAAVjG,IAAekG,EAAc,WACnB,IAAVlG,IAAemG,EAAa,YAIhC,yBAAK1L,UAAU,OACX,yBAAKU,IAAK,QAAUsB,EAAOrB,IAAKC,IAAI,cAAcZ,UAAU,QAC5D,0BAAMA,UAAU,QAAQgC,EAAOQ,KAAKC,MAApC,IAA4CT,EAAOQ,KAAKS,MACxD,yBAAKjD,UAAU,WACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAWwL,GAAahB,EAAKhM,MAAMuI,KAAKA,KAAK,KAEvD,yBAAK/G,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAWyL,GAAcjB,EAAKhM,MAAMuI,KAAKA,KAAK,KAExD,yBAAK/G,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAW0L,GAAalB,EAAKhM,MAAMuI,KAAKA,KAAK,MAG3D,yBAAK/G,UAAU,SACX,yBAAKA,UAAU,aAAf,SACA,6BAAMgI,S,GA7DOnJ,aCCZ8M,E,8LAEKlM,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAK5B,IAIIoN,EAJApB,EAAOjM,KACPwI,EAAOyD,EAAKhM,MAAMuI,KAAKzG,QAAQ0C,IAAI,SAAA6I,GAC/B,OAAO,kBAAC,EAAD,CAAK9L,IAAK8L,EAAWrL,SAAUuG,KAAM8E,EAAYvL,QAASkK,EAAKhM,MAAM8B,QAASkE,SAAUgG,EAAKhM,MAAMiM,KAAKjG,aAIvH,OAAQgG,EAAKhM,MAAMiM,KAAKtE,QACpB,IAAK,UAAWyF,EAAc,eAAgB,MAC9C,IAAK,gBAAiBA,EAAc,gBAAiB,MACrD,IAAK,SAAUA,EAAc,aAAc,MAC3C,IAAK,cAAeA,EAAc,cAAe,MACjD,QAASA,EAAc,SAG3B,OACI,yBAAK5L,UAAU,QACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aAAf,WACA,yBAAKA,UAAU,aAAawK,EAAKhM,MAAMiM,KAAKjI,MAC5C,yBAAKxC,UAAU,QAAQwK,EAAKhM,MAAMiM,KAAKM,MACvC,yBAAK/K,UAAU,QAAQwK,EAAKhM,MAAMiM,KAAKqB,UACvC,6BACI,0BAAM9L,UAAU,gBAAhB,eACA,0BAAMA,UAAW4L,GAAcpB,EAAKhM,MAAMiM,KAAKtE,UAGvD,yBAAKnG,UAAU,YACX,yBAAKA,UAAU,aAAf,YACA,yBAAKA,UAAU,QAAO,0BAAMA,UAAU,qBAAhB,OAAtB,OAA2EwK,EAAKhM,MAAMiM,KAAKjG,SAAS/B,OACpG,yBAAKzC,UAAU,QAAO,0BAAMA,UAAU,uBAAhB,OAAtB,OAA6EwK,EAAKhM,MAAMiM,KAAKjG,SAASK,QACtG,6BAAK,0BAAM7E,UAAU,uBAAhB,OAAL,OAA4DwK,EAAKhM,MAAMiM,KAAKjG,SAASM,QAEzF,yBAAK9E,UAAU,qBAAf,QACA,yBAAKA,UAAU,QACV+G,Q,GA1CalI,aCAbkN,E,8LAEKtM,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAUxB,IALJ,IAAIgM,EAAOjM,KACPyN,EAAgB,GAChBvB,EAAOD,EAAKhM,MAAMwF,KAAKO,MAAMhE,KAAK,SAAAkK,GAAU,OAAOA,EAAK9E,SAAW6E,EAAKhM,MAAMyN,eAC9EC,EAAW1B,EAAKhM,MAAM2N,SAAS5H,MAAMhE,KAAK,SAAA6L,GAAa,OAAOA,EAAQzG,SAAW6E,EAAKhM,MAAMyN,eAEnFtJ,EAAI,EAAGA,EAAI6H,EAAKhM,MAAMwF,KAAKO,MAAM1B,OAAQF,IAAK,CACnD,IAAI3C,OAAS,EAEb,OAAQwK,EAAKhM,MAAMwF,KAAKO,MAAM5B,GAAGwD,QAC7B,IAAK,UAAWnG,EAAY,kBAAmB,MAC/C,IAAK,gBAAiBA,EAAY,mBAAoB,MACtD,IAAK,SAAUA,EAAY,gBAAiB,MAC5C,QAASA,EAAY,iBAGrBwK,EAAKhM,MAAMwF,KAAKO,MAAM5B,GAAGgD,SAAW6E,EAAKhM,MAAMyN,eAAgBjM,GAAa,aAEhFgM,EAAc7J,KAAK,yBAAKpC,IAAK4C,EAAGY,GAAIZ,EAAI,EAAG3C,UAAWA,EAAWG,QAASqK,EAAKhM,MAAM2B,SAAUwC,EAAI,IAG3G,OACI,yBAAK3C,UAAU,aACX,yBAAKA,UAAU,iBACVgM,GAEL,oCAAUvB,EAAK9E,QACf,kBAAC,EAAD,CAAM8E,KAAMA,EAAMnK,QAASkK,EAAKhM,MAAM8B,QAASyG,KAAMmF,S,GAlC/BrN,aCGjBwN,E,8LAEK5M,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BAItB,IAAD,OACDwF,EAAOzF,KAAKC,MAAMoH,UAAUrF,KAAK,SAAAyD,GAC7B,OAAOA,EAAKC,SAAW,EAAKzF,MAAMqH,eAEtCsG,EAAW5N,KAAKC,MAAMuI,KAAKxG,KAAK,SAAAyD,GAC5B,OAAOA,EAAKC,SAAW,EAAKzF,MAAMqH,eAG1C,OACI,yBAAK7F,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,UACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,oMAET,kBAAC,EAAD,CACI4C,MAAOvF,KAAKC,MAAMoH,UAClB7B,eAAgBxF,KAAKC,MAAMqH,aAC3BxC,SAAU9E,KAAKC,MAAM+H,eAEzB,kBAAC,EAAD,CACIvC,KAAMA,EACNiI,aAAc1N,KAAKC,MAAMyN,aACzB3L,QAAS/B,KAAKC,MAAM8B,QACpB6L,SAAUA,EACVhM,QAAS5B,KAAKC,MAAM8N,eAExB,kBAAC,EAAD,CAAMxM,KAAMvB,KAAKC,MAAMsB,Y,GAvCFjB,aCJtB,SAAS0N,EAAO/N,GAE3B,MAAO,CACH,wBAAIuB,IAAI,IAAIC,UAAU,mBAAtB,UACA,yBAAKD,IAAI,IAAIC,UAAU,UACnB,yBAAKA,UAAU,UACX,yBAAKU,IAAK,QAAUlC,EAAMqG,OAAOlE,IAAKC,IAAI,cAAcZ,UAAU,QAClE,0BAAMA,UAAU,QAAQxB,EAAMqG,OAAOrC,KAAKC,MAA1C,IAAkDjE,EAAMqG,OAAOrC,KAAKS,MACpE,yBAAKjD,UAAU,OACX,yBAAKA,UAAU,UAAf,IAAyB,oCACzB,yBAAKA,UAAU,UAAUxB,EAAMgO,OAAO,GAAGA,OAAzC,UAGR,yBAAKxM,UAAU,SACX,yBAAKU,IAAK,QAAUlC,EAAMiE,MAAM9B,IAAKC,IAAI,cAAcZ,UAAU,QACjE,0BAAMA,UAAU,QAAQxB,EAAMiE,MAAMD,KAAKC,MAAzC,IAAiDjE,EAAMiE,MAAMD,KAAKS,MAClE,yBAAKjD,UAAU,OACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,UAAf,IAAyB,oCACzB,yBAAKA,UAAU,UAAUxB,EAAMgO,OAAO,GAAGA,OAAzC,UAGR,yBAAKxM,UAAU,SACX,yBAAKU,IAAK,QAAUlC,EAAMsG,MAAMnE,IAAKC,IAAI,cAAcZ,UAAU,QACjE,0BAAMA,UAAU,QAAQxB,EAAMsG,MAAMtC,KAAKC,MAAzC,IAAiDjE,EAAMsG,MAAMtC,KAAKS,MAClE,yBAAKjD,UAAU,OACX,yBAAKA,UAAU,UAAf,IAAyB,oCACzB,yBAAKA,UAAU,UAAUxB,EAAMgO,OAAO,GAAGA,OAAzC,Y,ICxBCC,E,2MAOjB5F,SAAW,SAAAC,GACP,OAAO,EAAKtI,MAAMuI,KAAKxG,KAAK,SAAAyG,GACxB,OACIA,EAAS/C,SAAW,EAAKzF,MAAMoH,UAAUkB,GAAe7C,U,EAMpEgD,SAAW,SAACC,EAASJ,EAAeK,GAChC,OAAOD,EAAQ3C,MAAMhE,KAAK,SAAA6G,GACtB,OACIA,EAASzB,SACT,EAAKnH,MAAMoH,UAAUkB,GAAevC,MAAM4C,GAAexB,U,EAMrE0B,WAAa,SAAA7G,GACT,OAAO,EAAKhC,MAAM8B,QAAQC,KAAK,SAAAyB,GAC3B,OAAOA,EAAOxB,WAAaA,K,EAKnCkM,kBAAoB,SAACF,EAAQhM,GACzB,OAAOgM,EAAOjM,KAAK,SAAAyB,GACf,OAAOA,EAAOxB,WAAaA,K,EAKnCmM,gBAAkB,WAad,IAZA,IAGIhF,EACAC,EACApD,EACA0C,EACAH,EACA6F,EACA9E,EATA0E,EAAS,GACTlK,EAAI,EAAK9D,MAAM8B,QAAQuC,OACvBN,EAAI,EAAK/D,MAAMoH,UAAU/C,OAUtBP,KACHkK,EAAOrK,KAAK,CACR3B,SAAU,EAAKhC,MAAM8B,QAAQgC,GAAG9B,SAChCgM,OAAQ,EACRvE,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,OAAQ,IAKhB,KAAO9F,KAGH,IAFAoF,EAAI,EAAKnJ,MAAMoH,UAAUrD,GAAGgC,MAAM1B,OAE3B8E,KAQH,IANAnD,EAAW,EAAKhG,MAAMoH,UAAUrD,GAAGgC,MAAMoD,GAAGnD,SAE5C0C,EAAU,EAAKL,SAAStE,GAExBqF,GADAb,EAAO,EAAKE,SAASC,EAAS3E,EAAGoF,IACxBrH,QAAQuC,OAEV+E,KACHE,EAAY,EACZ8E,EAAgB,EAAKF,kBACjBF,EACAzF,EAAKzG,QAAQsH,GAAGpH,UAEhBuG,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAAS/B,SACvCmK,EAAcJ,QAAU,EACxB1E,GAAa,EACb8E,EAAczE,UAEdpB,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAASK,UACvC+H,EAAcJ,QAAU,EACxB1E,GAAa,EACb8E,EAAcxE,WAEdrB,EAAKzG,QAAQsH,GAAGb,KAAKd,SAASzB,EAASM,SACvC8H,EAAcJ,QAAU,EACxB1E,GAAa,EACb8E,EAAcvE,UAEA,IAAdP,GACA8E,EAAc3E,YAEA,IAAdH,GACA8E,EAAc1E,YAM9B,OAAOsE,G,qFA1GW/M,EAAWC,GAC7B,QAASD,IAAclB,KAAKC,S,+BA8G5B,IAGIqO,EACAC,EACAC,EACAtK,EACAoC,EACAC,EACA9C,EACA0G,EAVA8D,EAASjO,KAAKoO,kBACdK,EAAW,GACXC,EAAY,GAWhBJ,EAAatO,KAAK8I,WAAWmF,EAAO,GAAGhM,UACvCsM,EAAUvO,KAAK8I,WAAWmF,EAAO,GAAGhM,UACpCuM,EAAaxO,KAAK8I,WAAWmF,EAAO,GAAGhM,UAGvCwM,EAAS7K,KACL,yBAAKpC,IAAI,IAAIC,UAAU,SACnB,yBACIU,IAAK,QAAUmM,EAAWlM,IAC1BC,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QACV6M,EAAWrK,KAAKC,MADrB,IAC6BoK,EAAWrK,KAAKS,MAE7C,yBAAKjD,UAAU,UAAUwM,EAAO,GAAGA,OAAnC,UAGRQ,EAAS7K,KACL,yBAAKpC,IAAI,IAAIC,UAAU,SACnB,yBACIU,IAAK,QAAUoM,EAAQnM,IACvBC,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QACV8M,EAAQtK,KAAKC,MADlB,IAC0BqK,EAAQtK,KAAKS,MAEvC,yBAAKjD,UAAU,UAAUwM,EAAO,GAAGA,OAAnC,UAGRQ,EAAS7K,KACL,yBAAKpC,IAAI,IAAIC,UAAU,SACnB,yBACIU,IAAK,QAAUqM,EAAWpM,IAC1BC,IAAI,cACJZ,UAAU,QAEd,yBAAKA,UAAU,QACV+M,EAAWvK,KAAKC,MADrB,IAC6BsK,EAAWvK,KAAKS,MAE7C,yBAAKjD,UAAU,UAAUwM,EAAO,GAAGA,OAAnC,UAKRA,EAAOU,QACPV,EAAOU,QACPV,EAAOU,QAGPV,EAAOnK,KAAK,SAACC,EAAGC,GACZ,OACIA,EAAEiK,OAASlK,EAAEkK,QACbjK,EAAE0F,UAAY3F,EAAE2F,WAChB1F,EAAE2F,UAAY5F,EAAE4F,WAChB3F,EAAE4F,OAAS7F,EAAE6F,QACb5F,EAAE6F,QAAU9F,EAAE8F,UAKtB3F,EAAQlE,KAAK8I,WAAWmF,EAAO,GAAGhM,UAClCqE,EAAStG,KAAK8I,WAAWmF,EAAO,GAAGhM,UACnCsE,EAAQvG,KAAK8I,WAAWmF,EAAO,GAAGhM,UAGlC,IAAK,IAAImC,EAAI,EAAGA,EAAI6J,EAAO3J,OAAQF,IAErB,IAANA,GAAiB,IAANA,GAAiB,IAANA,IAEtBX,EAASzD,KAAK8I,WAAWmF,EAAO7J,GAAGnC,UAI/BkI,EADA/F,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EACtB,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBAEA,gBAIfsK,EAAU9K,KACN,yBAAKpC,IAAK4C,EAAG3C,UAAU,SACnB,0BACIA,UAAU,SACV2I,wBAAyB,CACrBC,OAAQjG,EAAI,EAAI+F,KAGxB,0BAAM1I,UAAU,UAAUwM,EAAO7J,GAAG6J,OAApC,QACA,yBACI9L,IAAK,QAAUsB,EAAOrB,IACtBC,IAAI,cACJZ,UAAU,QAEd,0BAAMA,UAAU,QACXgC,EAAOQ,KAAKC,MADjB,IACyBT,EAAOQ,KAAKS,SAOrD,OACI,yBAAKjD,UAAU,OACX,kBAAC,EAAD,CACIJ,KAAK,cACLE,KAAMvB,KAAKC,MAAMsB,KACjBQ,QAAS/B,KAAKC,MAAM8B,QACpBD,KAAM9B,KAAKC,MAAM6B,KACjBY,aAAc1C,KAAKC,MAAMyC,aACzBD,YAAazC,KAAKC,MAAMwC,YACxBF,QAASvC,KAAKC,MAAMsC,QACpBI,KAAK,gEAET,wBAAIlB,UAAU,cAAd,iBACA,yBAAKA,UAAU,eAAegN,GAC9B,kBAACT,EAAD,CACI9J,MAAOA,EACPoC,OAAQA,EACRC,MAAOA,EACP0H,OAAQA,IAEZ,wBAAIxM,UAAU,cAAd,oBACCiN,EACD,kBAAC,EAAD,CAAMnN,KAAMvB,KAAKC,MAAMsB,Y,GA/PEjB,aCQpB2H,G,kBACjB,WAAYhI,GAAQ,IAAD,8BACf,4CAAMA,KAoHVyD,YAAc,SAAC5B,EAAMS,GAEjB,EAAK7B,SAAS,CACVkO,eAAe,EACf9M,KAAMA,EACNS,QAASA,IAGbzB,aAAa+N,QAAQ,OAAQ/M,GAC7BhB,aAAa+N,QAAQ,UAAWtM,IA9HjB,EAkInBuM,iBAAmB,WACf,EAAKC,WAnIU,EAuInBC,iBAAmB,SAAAlM,GACf,EAAKpC,SAAS,CACV4G,aAAcxE,EAAME,OAAOC,MAC3ByK,aAAc,IAElB5M,aAAa+N,QAAQ,eAAgB/L,EAAME,OAAOC,QA5InC,EAgJnBgM,iBAAmB,SAAAnM,GACf,EAAKpC,SAAS,CACVgN,aAAc3K,SAASD,EAAME,OAAOgC,GAAI,OAlJ7B,EAuJnBkK,gBAAkB,SAAA/G,GACd,EAAKzH,SAAS,CACV4J,YAAanC,KAzJF,EA+JnBgH,eAAiB,SAAC1I,EAAc2I,GAC5BC,IAAMC,IAAI,EAAKC,YAAc,SAASC,KAAK,SAAAC,GACvC,IAAIjH,EAAO,EAAKvH,MAAMuH,KAClBC,EAAWgH,EAAaC,KAAK1N,KAAK,SAAAyD,GAC9B,OAAOA,EAAKC,SAAW,EAAKzE,MAAMqG,eAEtC7D,EAASgF,EAASzC,MAAMS,EAAe,GAAG1E,QAAQC,KAAK,SAAAyB,GACnD,OAAOA,EAAOxB,WAAa,EAAKhB,MAAMa,OAE1C6N,EAAYF,EAAaC,KAAKzI,QAAQwB,GACtCmH,EAAcH,EAAaC,KAAKC,GAAW3J,MAAMS,EAAe,GAAG1E,QAAQkF,QAAQxD,GAGvFgF,EAASzC,MAAMS,EAAe,GAAG1E,QAAQ6N,GAAapH,KAAO4G,EAAa5H,WAG1EgB,EAAKmH,GAAalH,EAGlB4G,IAAMQ,IAAI,EAAKN,YAAc,SAAW,EAAKtO,MAAMqG,aAAcmB,GAGjE,EAAK/H,SAAS,CACV8H,KAAMA,OAtLC,EA4LnBsH,mBAAqB,SAACrJ,EAAcsJ,GAChC,IAAI1I,EAAY,EAAKpG,MAAMoG,UACvB5B,EAAO4B,EAAUrF,KAAK,SAAAyD,GAClB,OAAOA,EAAKC,SAAW,EAAKzE,MAAMqG,eAEtCqI,EAAYtI,EAAUJ,QAAQxB,GAGlCA,EAAKO,MAAMS,EAAe,GAAGR,SAAW8J,EAGxC1I,EAAUsI,GAAalK,EAGvB4J,IAAMQ,IAAI,EAAKN,YAAc,cAAgB,EAAKtO,MAAMqG,aAAc7B,GAGtE,EAAK/E,SAAS,CACV2G,UAAWA,KA9MA,EAmNnB2I,iBAAmB,SAAAlN,GACf,IAAIuE,EAAY,EAAKpG,MAAMoG,UACvB5B,EAAO4B,EAAUrF,KAAK,SAAAyD,GAClB,OAAOA,EAAKC,SAAW,EAAKzE,MAAMqG,eAEtCqI,EAAYtI,EAAUJ,QAAQxB,GAGlCA,EAAKO,MAAMlD,EAAME,OAAO0D,aAAa,aAAe,GAAGkB,OAAS9E,EAAME,OAAO0D,aAAa,eAG1FW,EAAUsI,GAAalK,EAGvB4J,IAAMQ,IAAI,EAAKN,YAAc,cAAgB,EAAKtO,MAAMqG,aAAc7B,GAGtE,EAAK/E,SAAS,CACV2G,UAAWA,KArOA,EA0OnB4I,sBAAwB,SAACxJ,EAAcI,GACnC,IAAIQ,EAAY,EAAKpG,MAAMoG,UACvB5B,EAAO4B,EAAUrF,KAAK,SAAAyD,GAClB,OAAOA,EAAKC,SAAW,EAAKzE,MAAMqG,eAEtCqI,EAAYtI,EAAUJ,QAAQxB,GAGlCA,EAAKO,MAAMS,EAAe,GAAGP,YAAcW,EAG3CQ,EAAUsI,GAAalK,EAGvB4J,IAAMQ,IAAI,EAAKN,YAAc,cAAgB,EAAKtO,MAAMqG,aAAc7B,GAGtE,EAAK/E,SAAS,CACV2G,UAAWA,KA1Pf,EAAKpG,MAAQ,CACToG,UAAW,GACXtF,QAAS,GACTyG,KAAM,GACNoG,eAAe,EACf9M,KAAM,EACNS,SAAS,EACT+E,aAAc,WACdoG,aAAc,EACdpD,YAAa,EACb4F,eAAe,EACfzN,aAAa,EACb0N,QAAS,GAGb,EAAKZ,YAAc,4CAEnB,EAAKhO,KAAO,IAGZ,EAAK6O,gBAAkB,KAtBR,E,mFA0BGlP,EAAWC,GAC7B,QAASA,IAAcnB,KAAKiB,S,8IAKxBgL,EAAOjM,KACX,IACIiM,EAAKvL,SAAS,CACV+B,aAAa,IAgBjB4M,IACKgB,IAAI,CACDhB,IAAMC,IAAItP,KAAKuP,YAAc,cAC7BF,IAAMC,IAAItP,KAAKuP,YAAc,YAC7BF,IAAMC,IAAItP,KAAKuP,YAAc,WAEhCC,KACGH,IAAMiB,OAAO,SAAS/K,EAAOxD,EAASyG,GAClCyD,EAAKvL,SAAS,CACV2G,UAAW9B,EAAMmK,KACjB3N,QAASA,EAAQ2N,KACjBlH,KAAMA,EAAKkH,KACXjN,aAAa,OAIxB8N,MAAM,SAASC,GACZC,QAAQC,IAAI,4BAA8BF,GAC1CvE,EAAKvL,SAAS,CACV+B,aAAa,MAG3B,MAAO+N,GACLC,QAAQC,IAAI,sBAAwBF,GACpCvE,EAAKvL,SAAS,CACV+B,aAAa,I,8IAMJ,IAAD,OAEhBzC,KAAK+O,UAEDjO,aAAa6P,QAAQ,SACrB3Q,KAAKU,SAAS,CACVkO,eAAe,EACf9M,KAAMiB,SAASjC,aAAa6P,QAAQ,QAAS,IAC7CpO,QAA6C,SAApCzB,aAAa6P,QAAQ,WAC9BrJ,aAAcxG,aAAa6P,QAAQ,iBAAmB,aAI9DC,WAAW,WACF,EAAK3P,MAAMc,QAAQuC,QACpB,EAAK5D,SAAS,CACVwP,eAAe,KAGxB,KACHlQ,KAAKoQ,gBAAkBS,YAAY,WAC/B,GAAK,EAAK5P,MAAMc,QAAQuC,OAQpBwM,cAAc,EAAKV,qBARS,CAC5B,IACMW,EADQ,EAAK9P,MAAMkP,QACA,EACzB,EAAKzP,SAAS,CACVyP,QAASY,MAMlB,O,+BAgJG,IAAD,OACL,OAAI/Q,KAAKiB,MAAMoG,UAAU/C,OAGjB,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI0M,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,QAClB0P,OAAQ,SAAAC,GAAU,OACd,kBAAC,EAAD,iBACQA,EADR,CAEI3P,KAAM,EAAKA,KACXQ,QAAS,EAAKd,MAAMc,QACpB2B,YAAa,EAAKA,YAClBkL,cAAe,EAAK3N,MAAM2N,cAC1B9M,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,cAIhC,kBAAC,IAAD,CACIyO,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,QAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,eAAiB,EAAK3N,MAAMsB,QACnC,kBAAC,EAAD,iBACQ2O,EADR,CAEI3P,KAAM,EAAKA,KACX8F,UAAW,EAAKpG,MAAMoG,UACtBtF,QAAS,EAAKd,MAAMc,QACpBuF,aAAc,EAAKrG,MAAMqG,aACzB5E,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBuF,aAAc,EAAKgH,iBACnBrI,iBAAkB,EAAKmJ,mBACvB/H,eAAgB,EAAKiI,iBACrB7I,mBAAoB,EAAK8I,sBACzBnO,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACIyP,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,cAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,cACP,kBAAC,EAAD,iBACQsC,EADR,CAEI3P,KAAM,EAAKA,KACXQ,QAAS,EAAKd,MAAMc,QACpBW,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBmM,cAAe,EAAK3N,MAAM2N,cAC1B9M,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACIyP,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,aAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,cACP,kBAAC,EAAD,iBACQsC,EADR,CAEI3P,KAAM,EAAKA,KACX8F,UAAW,EAAKpG,MAAMoG,UACtBtF,QAAS,EAAKd,MAAMc,QACpByG,KAAM,EAAKvH,MAAMuH,KACjB8B,YAAa,EAAKrJ,MAAMqJ,YACxBjC,YAAa,EAAK6G,gBAClBxM,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBmM,cAAe,EAAK3N,MAAM2N,cAC1B9M,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACIyP,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,OAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,cACP,kBAAC,EAAD,iBACQsC,EADR,CAEI3P,KAAM,EAAKA,KACX8F,UAAW,EAAKpG,MAAMoG,UACtBmB,KAAM,EAAKvH,MAAMuH,KACjBzG,QAAS,EAAKd,MAAMc,QACpBuF,aAAc,EAAKrG,MAAMqG,aACzB5E,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBuF,aAAc,EAAKgH,iBACnB3C,kBAAmB,EAAK8C,eACxBrN,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACIyP,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,UAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,cACP,kBAAC,EAAD,iBACQsC,EADR,CAEI3P,KAAM,EAAKA,KACX8F,UAAW,EAAKpG,MAAMoG,UACtBtF,QAAS,EAAKd,MAAMc,QACpByG,KAAM,EAAKvH,MAAMuH,KACjBlB,aAAc,EAAKrG,MAAMqG,aACzBoG,aAAc,EAAKzM,MAAMyM,aACzBhL,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBuF,aAAc,EAAKgH,iBACnBjB,aAAc,EAAKkB,iBACnBnN,KAAM,EAAKb,MAAMa,KACjBS,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACIyP,OAAK,EACLzP,KAAMvB,KAAKuB,KAAO,cAClB0P,OAAQ,SAAAC,GAAU,OACd,EAAKjQ,MAAM2N,cACP,kBAAC,EAAD,iBACQsC,EADR,CAEI3P,KAAM,EAAKA,KACX8F,UAAW,EAAKpG,MAAMoG,UACtBtF,QAAS,EAAKd,MAAMc,QACpByG,KAAM,EAAKvH,MAAMuH,KACjB1G,KAAM,EAAKb,MAAMa,KACjBY,aAAc,EAAKoM,iBACnBrM,YAAa,EAAKxB,MAAMwB,YACxBF,QAAS,EAAKtB,MAAMsB,WAGxB,kBAAC,IAAD,CAAUjB,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CAAU4P,KAAK,IAAI7P,GAAItB,KAAKuB,KAAO,eAK5CvB,KAAKiB,MAAMiP,cAEd,yBAAKzO,UAAU,eACX,yBAAKU,IAAI,YAAYE,IAAI,yCACzB,0FACA,6DACA,wDAKJ,yBAAKZ,UAAU,eACX,yBAAKU,IAAI,UAAUE,IAAI,0BACvB,yBAAKZ,UAAU,QAAf,cACA,6BAAMzB,KAAKiB,MAAMkP,QAAjB,iB,GAtba7P,c,MCNjC8Q,MAGAC,IAASJ,OAAO,kBAAC,EAAD,MAASK,SAASC,eAAe,W","file":"static/js/main.d08a2f61.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n/* This is a component to reset the page scroll to the top whenever the router changes the page */\r\nclass ScrollToTop extends Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showLogOut: false\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* Updates the state to show the log out overlay when the user has clicked the profile picture */\r\n    handleShowLogOutOverlay = () => {\r\n        this.setState({\r\n            showLogOut: true\r\n        });\r\n    };\r\n\r\n    /* Updates the state to hide the log out overlay when the user has clicked on the overlay background */\r\n    handleHideLogOutOverlay = () => {\r\n        this.setState({\r\n            showLogOut: false\r\n        });\r\n    };\r\n\r\n    /* Clear the localStorage and redirect the user to the Login page when they click the 'Log Out' button */\r\n    handleLogOut = () => {\r\n        localStorage.clear();\r\n        window.location.href = '/login';\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        // Show the user profile pic on every page but the Login page\r\n        let informationBtn =\r\n                this.props.page === 'Log In' ? (\r\n                    ''\r\n                ) : (\r\n                    <NavLink\r\n                        to={this.props.path + 'information'}\r\n                        key=\"a\"\r\n                        className=\"info-icon\"\r\n                        activeClassName=\"selected\">\r\n                        i\r\n                    </NavLink>\r\n                ),\r\n            logOutOverlay = this.state.showLogOut ? (\r\n                <div\r\n                    key=\"b\"\r\n                    className=\"overlay\"\r\n                    onClick={this.handleHideLogOutOverlay}>\r\n                    <button\r\n                        className=\"btn\"\r\n                        type=\"button\"\r\n                        onClick={this.handleLogOut}>\r\n                        Log Out\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                ''\r\n            ),\r\n            user = this.props.punters.find(user => {\r\n                return user.punterId === this.props.user;\r\n            }),\r\n            profilePic =\r\n                this.props.page === 'Log In' ? (\r\n                    ''\r\n                ) : (\r\n                    <img\r\n                        key=\"c\"\r\n                        className=\"profile-pic\"\r\n                        src={'pics/' + user.pic}\r\n                        alt=\"profile-pic\"\r\n                        onClick={this.handleShowLogOutOverlay}\r\n                    />\r\n                );\r\n\r\n        // Show the admin button only if the user is an admin and it's not the Login page\r\n        let adminBtn =\r\n            this.props.isAdmin === true && this.props.page !== 'Log In' ? (\r\n                <NavLink\r\n                    to={this.props.path + 'admin'}\r\n                    key=\"d\"\r\n                    className=\"icon-admin\"\r\n                    activeClassName=\"selected\"\r\n                />\r\n            ) : (\r\n                ''\r\n            );\r\n\r\n        // Show the reload button on every page but the Login page\r\n        const reloadClass = this.props.loadingData ? 'reload-btn loading' : 'reload-btn';\r\n        let reloadBtn =\r\n            this.props.page !== 'Log In' ? (\r\n                <button\r\n                    key=\"e\"\r\n                    className={reloadClass}\r\n                    onClick={this.props.onReloadData}>\r\n                    <span className=\"icon-reload\" />\r\n                </button>\r\n            ) : (\r\n                ''\r\n            );\r\n\r\n        return [\r\n            informationBtn,\r\n            logOutOverlay,\r\n            profilePic,\r\n            adminBtn,\r\n            reloadBtn,\r\n            <h2 key=\"f\">\r\n                Spring Racing Tipping <img src=\"horse.png\" alt=\"Title logo\" />\r\n                <span className=\"beta\">BETA</span>\r\n            </h2>,\r\n            <h3 key=\"g\">{this.props.page}</h3>,\r\n            <p key=\"h\">{this.props.text}</p>\r\n        ];\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: 1,\r\n            password: '',\r\n            wrongPassword: false,\r\n            focused: false\r\n        }\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !((nextProps === this.props) && (nextState === this.state));\r\n    }\r\n    \r\n    /* When the user selects a punter from the drop down, set that user in the state and hide the password error */\r\n    handlePunterSelect = event => {\r\n        this.setState({\r\n            user: parseInt(event.target.value, 10),\r\n            wrongPassword: false\r\n        });\r\n    }\r\n\r\n    /* When the user focuses the password field, set focused in the state to true.  Used to shift the label out of the field */\r\n    handlePasswordFocus = event => {\r\n        this.setState({\r\n            focused: true\r\n        });\r\n    }\r\n\r\n    /* When focus is lost on the password field, set focused in the state to false.  Used to shift the label into the field */\r\n    handlePasswordBlur = event => {\r\n        this.setState({\r\n            focused: false\r\n        });\r\n    }\r\n\r\n    /* When the user enters a password, set it in the state and hide the wrong password message */\r\n    handlePasswordChange = event => {\r\n        this.setState({\r\n            password: event.target.value,\r\n            wrongPassword: false\r\n        });\r\n    }\r\n\r\n    /* When the user clicks the 'Log In' button, if the password stored in the state matches the selected users password then call the\r\n       handleLogin function passed from App.js and redirect the user to the Results page, else display the wrong password error */\r\n    handleLoginClick = () => {\r\n        let punter = this.props.punters.find(punter => { return punter.punterId === this.state.user });\r\n        if (punter.password === this.state.password) {\r\n            this.setState({\r\n                wrongPassword: false\r\n            });\r\n            // Call handleLogin from App.js to set the logged in user and if they are an admin\r\n            this.props.handleLogin(this.state.user, punter.isAdmin);\r\n            // Redirect to the Results page\r\n            this.props.history.push(this.props.path + 'results');\r\n        }\r\n        else {\r\n            this.setState({\r\n                wrongPassword: true\r\n            });\r\n        }\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        // Sort names in ascending order by first name, then create an <option> for each of them\r\n        let sorted = this.props.punters.sort((a, b) => { return a.name.first.localeCompare(b.name.first) });\r\n\r\n        // Move Top odds, Bottom Odds and 1, 2, 3 to the end of the array\r\n        for (let i = 0, len = sorted.length; i < len; i++) {\r\n            if (sorted[i].name.first === \"Top\" || sorted[i].name.first === \"Bottom\" || sorted[i].name.first === \"1, 2, 3\") {\r\n                sorted.push(sorted.splice(i, 1)[0])\r\n            }\r\n        }\r\n\r\n        // Create an array of option elements for each punter\r\n        let options = sorted.map(punter => {\r\n            return <option key={punter.punterId} value={punter.punterId}>{punter.name.first} {punter.name.last}</option>\r\n        });\r\n        \r\n        // Add a default <option> at the beginning\r\n        options.unshift(<option key=\"a\" value=\"\">-- Select Name --</option>);\r\n\r\n        // Show the error message if the password is wrong\r\n        let errorClass = this.state.wrongPassword ? 'error' : 'error hide';\r\n\r\n        // Set focused class on the password label to have it move out of the input, but not go back in if there is a value\r\n        let labelClass = (this.state.focused || this.state.password !== '') ? 'password-label focused' : 'password-label';\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header page=\"Log In\" punters={this.props.punters} user={this.props.user} isAdmin={this.props.isAdmin} text=\"Please select your name from the drop down, and then enter your password to log in.\" />\r\n                <div className=\"selector\">\r\n                    <select onChange={this.handlePunterSelect}>\r\n                        {options}\r\n                    </select>\r\n                    <span className=\"icon-select\"></span>\r\n                </div>\r\n                <label htmlFor=\"password\" className={labelClass}>Password</label>\r\n                <input id=\"password\" className=\"password\" type=\"password\" defaultValue=\"\" \r\n                       onFocus={this.handlePasswordFocus}\r\n                       onBlur={this.handlePasswordBlur}\r\n                       onChange={this.handlePasswordChange} />\r\n                <button className=\"btn\" type=\"button\" onClick={this.handleLoginClick}>Log In</button>\r\n                <div className={errorClass}>The password for the name you selected is incorrect</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class RaceMeetSelector extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        let meets = this.props.meets.sort((a, b) => { return a.date.localeCompare(b.date) }), // Sort the race meets by date\r\n            split, date;\r\n\r\n        return (\r\n            <div className=\"selector\">\r\n                <select value={this.props.selectedMeetId} onChange={this.props.onChange}>\r\n                    {meets.map(meet => {\r\n                        split = meet.date.split('-');\r\n                        date = `${split[2]}/${split[1]}`;\r\n                        return <option key={meet.meetId} value={meet.meetId}>{meet.name} ({date})</option>\r\n                    })}\r\n                </select>\r\n                <span className=\"icon-select\"></span>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class Menu extends Component {\r\n    /* Determines whether React should re-render the component, in this case it never should */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"menu\">\r\n                <NavLink to={this.props.path + 'statistics'} activeClassName=\"selected\"><div className=\"icon icon-pie-chart\"></div>Statistics</NavLink>\r\n                <NavLink to={this.props.path + 'tips'} activeClassName=\"selected\"><div className=\"icon icon-pencil\"></div>Tips</NavLink>\r\n                <NavLink to={this.props.path + 'results'} activeClassName=\"selected\"><div className=\"icon icon-clipboard\"></div>Results</NavLink>\r\n                <NavLink to={this.props.path + 'leaderboard'} activeClassName=\"selected\"><div className=\"icon icon-leader-board\"></div>Leaderboard</NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport RaceMeetSelector from './RaceMeetSelector';\r\nimport Menu from './Menu';\r\n\r\nexport default class Admin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: [\r\n                {\r\n                    number: 1,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 2,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 3,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 4,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 5,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 6,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 7,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 8,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 9,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 10,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* Runs when the component first mounts and calls setStateData with the passed race meet and selected meet props */\r\n    componentDidMount() {\r\n        this.setStateData(this.props.raceMeets, this.props.selectedMeet);\r\n    }\r\n\r\n    /* Runs when the component receives new props, but before it renders, and calls setStateData with the next props race meet \r\n       and selected meet */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setStateData(nextProps.raceMeets, nextProps.selectedMeet);\r\n    }\r\n\r\n    /* Takes the passed race meets and selected meet and updates the state */\r\n    setStateData = (propsRaceMeets, propsSelectedMeet) => {\r\n        let races = this.state.races,\r\n            meet = propsRaceMeets.find(meet => {\r\n                return meet.meetId === propsSelectedMeet;\r\n            });\r\n\r\n        for (let i = 0; i < meet.races.length; i++) {\r\n            races[i].placings = meet.races[i].placings;\r\n            races[i].scratchings = meet.races[i].scratchings;\r\n        }\r\n\r\n        this.setState({\r\n            races: races\r\n        });\r\n    };\r\n\r\n    /* When the user enters a value in one of the placing fields, update it in the state */\r\n    handlePlacingChange = event => {\r\n        let races = this.state.races,\r\n            raceChanged = event.target.id.split('-')[1],\r\n            placingChanged = event.target.id.split('-')[2],\r\n            placings = races[raceChanged - 1].placings;\r\n\r\n        if (placingChanged === 'first') {\r\n            placings.first = event.target.value;\r\n        }\r\n        if (placingChanged === 'second') {\r\n            placings.second = event.target.value;\r\n        }\r\n        if (placingChanged === 'third') {\r\n            placings.third = event.target.value;\r\n        }\r\n\r\n        this.setState({\r\n            races: races\r\n        });\r\n    };\r\n\r\n    /* When the user clicks a Save button, pass the modified placings to the onPlacingsChange function\r\n       passed in via props from App.js */\r\n    handleSaveClick = event => {\r\n        let modifiedRace = event.target.getAttribute('data-race'),\r\n            placings = this.state.races[modifiedRace - 1].placings;\r\n        this.props.onPlacingsChange(modifiedRace, placings);\r\n    };\r\n\r\n    /* When the user selects a scratching, add or remove it from the state and pass the modified scratchings to the\r\n       onScratchingChange function passed in via props from App.js */\r\n    handleScratchingClick = event => {\r\n        let races = this.state.races,\r\n            modifiedRace = parseInt(event.target.getAttribute('data-race'), 10),\r\n            modifiedScratchings = races[modifiedRace - 1].scratchings;\r\n\r\n        // If the selection is already selected, remove it, else add it\r\n        if (event.target.classList.contains('scratched')) {\r\n            let index = modifiedScratchings.indexOf(\r\n                parseInt(event.target.innerText, 10)\r\n            );\r\n            if (index > -1) {\r\n                modifiedScratchings.splice(index, 1);\r\n            }\r\n            races[modifiedRace - 1].scratchings = modifiedScratchings;\r\n            this.setState({\r\n                races: races\r\n            });\r\n            this.props.onScratchingChange(modifiedRace, modifiedScratchings);\r\n        } else {\r\n            modifiedScratchings.push(parseInt(event.target.innerText, 10));\r\n            races[modifiedRace - 1].scratchings = modifiedScratchings;\r\n            this.setState({\r\n                races: races\r\n            });\r\n            this.props.onScratchingChange(modifiedRace, modifiedScratchings);\r\n        }\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let meet = this.props.raceMeets.find(meet => {\r\n                return meet.meetId === this.props.selectedMeet;\r\n            }),\r\n            raceList = [],\r\n            selections = [],\r\n            className;\r\n\r\n        // For each race in the selected meet\r\n        for (let i = 0; i < meet.races.length; i++) {\r\n            selections = [];\r\n\r\n            // Generate 24 selections for the scratchings\r\n            for (let j = 0; j < 24; j++) {\r\n                className = 'selection';\r\n                if (this.state.races[i].scratchings.includes(j + 1)) {\r\n                    className += ' scratched';\r\n                }\r\n\r\n                selections.push(\r\n                    <div\r\n                        key={j}\r\n                        className={className}\r\n                        data-race={i + 1}\r\n                        onClick={this.handleScratchingClick}>\r\n                        {j + 1}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            // Create the HTML for each race and insert into the raceList array\r\n            raceList.push(\r\n                <div key={i} className=\"adminRace\">\r\n                    <div className=\"details\">\r\n                        <span className=\"bold\">\r\n                            RACE {meet.races[i].number}\r\n                        </span>\r\n                        <span className=\"name\">\r\n                            &nbsp;-&nbsp;{meet.races[i].name}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"placings\">\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-first'}>\r\n                                1st\r\n                            </label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-first'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.first}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-second'}>\r\n                                2nd\r\n                            </label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-second'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.second}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-third'}>\r\n                                3rd\r\n                            </label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-third'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.third}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <button\r\n                            className=\"save-btn\"\r\n                            type=\"button\"\r\n                            data-race={i + 1}\r\n                            onClick={this.handleSaveClick}>\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"mb-10 bold\">Set Race Status</div>\r\n                    <div className=\"status-selector\">\r\n                        <button\r\n                            className={\r\n                                meet.races[i].status === 'Not Run Yet'\r\n                                    ? 'btn status-selector-btn selected'\r\n                                    : 'btn status-selector-btn'\r\n                            }\r\n                            type=\"button\"\r\n                            data-meet={meet.meetId}\r\n                            data-race={i + 1}\r\n                            data-status=\"Not Run Yet\"\r\n                            onClick={this.props.onStatusChange}>\r\n                            Not Run Yet\r\n                        </button>\r\n                        <button\r\n                            className={\r\n                                meet.races[i].status === 'About To Jump'\r\n                                    ? 'btn status-selector-btn selected'\r\n                                    : 'btn status-selector-btn'\r\n                            }\r\n                            type=\"button\"\r\n                            data-meet={meet.meetId}\r\n                            data-race={i + 1}\r\n                            data-status=\"About To Jump\"\r\n                            onClick={this.props.onStatusChange}>\r\n                            About To Jump\r\n                        </button>\r\n                        <button\r\n                            className={\r\n                                meet.races[i].status === 'Racing'\r\n                                    ? 'btn status-selector-btn selected'\r\n                                    : 'btn status-selector-btn'\r\n                            }\r\n                            type=\"button\"\r\n                            data-meet={meet.meetId}\r\n                            data-race={i + 1}\r\n                            data-status=\"Racing\"\r\n                            onClick={this.props.onStatusChange}>\r\n                            Racing\r\n                        </button>\r\n                        <button\r\n                            className={\r\n                                meet.races[i].status === 'Has Run'\r\n                                    ? 'btn status-selector-btn selected'\r\n                                    : 'btn status-selector-btn'\r\n                            }\r\n                            type=\"button\"\r\n                            data-meet={meet.meetId}\r\n                            data-race={i + 1}\r\n                            data-status=\"Has Run\"\r\n                            onClick={this.props.onStatusChange}>\r\n                            Has Run\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"scratching-list\">\r\n                        <div className=\"mb-10 bold\">Scratchings</div>\r\n                        <div className=\"selections\">{selections}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Administration\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is the Administration page used to set placings and race statuses.  In the future you will also be able to set scratchings.\"\r\n                />\r\n                <RaceMeetSelector\r\n                    meets={this.props.raceMeets}\r\n                    selectedMeetId={this.props.selectedMeet}\r\n                    onChange={this.props.onMeetChange}\r\n                />\r\n                <div className=\"adminRaceList\">{raceList}</div>\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Menu from './Menu';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tabSelected: 1\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* When the component mounts, set the selected tab in the state based off the selected tab passed via props */\r\n    componentDidMount() {\r\n        this.setState({\r\n            tabSelected: this.props.selectedTab\r\n        });\r\n    }\r\n\r\n    /* When the user clicks a tab, set it as the selected tab in local state, and pass it to the onTabSelect function in App.js\r\n       passed via props */\r\n    handleTabClick = event => {\r\n        let tab = 1;\r\n        if (event.target.classList.contains('two')) {\r\n            tab = 2;\r\n        }\r\n        this.setState({\r\n            tabSelected: tab\r\n        });\r\n        this.props.onTabSelect(tab);\r\n    };\r\n\r\n    /* Find the particular meet from the tips data */\r\n    findMeet = thisMeetIndex => {\r\n        return this.props.tips.find(tipsMeet => {\r\n            return tipsMeet.meetId === this.props.raceMeets[thisMeetIndex].meetId;\r\n        });\r\n    };\r\n\r\n    /* Find the particular race from the tips data  */\r\n    findRace = (tipMeet, thisMeetIndex, thisRaceIndex) => {\r\n        return tipMeet.races.find(tipsRace => {\r\n            return tipsRace.number === this.props.raceMeets[thisMeetIndex].races[thisRaceIndex].number;\r\n        });\r\n    };\r\n\r\n    /* Find the particular punter from the punters data */\r\n    findPunter = punterId => {\r\n        return this.props.punters.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Find the current punter's stats from the stats array */\r\n    findPuntersStats = (stats, punterId) => {\r\n        return stats.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Find the current race meet from the current punter's stats */\r\n    findPuntersStatsMeet = (puntersStats, meetId) => {\r\n        return puntersStats.meets.find(meet => {\r\n            return meet.meetId === meetId;\r\n        });\r\n    };\r\n\r\n    /* Function to calculate each users points, trifectas, quinellas, firsts, seconds and thirds and score for each meet */\r\n    calculateStats = () => {\r\n        let stats = [],\r\n            a = this.props.punters.length,\r\n            b = this.props.raceMeets.length,\r\n            meetsArray = [],\r\n            c,\r\n            d,\r\n            placings,\r\n            tipMeet,\r\n            tips,\r\n            puntersStats,\r\n            puntersStatsMeet,\r\n            raceScore;\r\n\r\n        // Create a meets array to hold the score for each meet.  This will be added to each punters stats.\r\n        while (b--) {\r\n            meetsArray.push({\r\n                meetId: this.props.raceMeets[b].meetId,\r\n                score: 0\r\n            });\r\n        }\r\n\r\n        // Load each punter into the points array with a score of 0\r\n        while (a--) {\r\n            stats.push({\r\n                punterId: this.props.punters[a].punterId,\r\n                trifectas: 0,\r\n                quinellas: 0,\r\n                firsts: 0,\r\n                seconds: 0,\r\n                thirds: 0,\r\n                meets: meetsArray.map(a => ({ ...a })) // Use map and the spread operator to clone the array with cloned values, instead of references\r\n            });\r\n        }\r\n\r\n        // Reset the length of the race meets after the first while loop\r\n        b = this.props.raceMeets.length;\r\n\r\n        // For each meet\r\n        while (b--) {\r\n            c = this.props.raceMeets[b].races.length;\r\n            // For each race in meet\r\n            while (c--) {\r\n                // Set placings to the placings for this race\r\n                placings = this.props.raceMeets[b].races[c].placings;\r\n                // Find race meet in tips, and then get the associated tips\r\n                tipMeet = this.findMeet(b);\r\n                tips = this.findRace(tipMeet, b, c);\r\n                d = tips.punters.length;\r\n                // For each punters tips\r\n                while (d--) {\r\n                    // Reset the race score\r\n                    raceScore = 0;\r\n                    // Get the current punter's stats from the stats array\r\n                    puntersStats = this.findPuntersStats(stats, tips.punters[d].punterId);\r\n                    // Get the current race meet from the current punter's stats\r\n                    puntersStatsMeet = this.findPuntersStatsMeet(puntersStats, this.props.raceMeets[b].meetId);\r\n                    // Update the stats of that punter\r\n                    if (tips.punters[d].tips.includes(placings.first)) {\r\n                        puntersStats.firsts++;\r\n                        raceScore += 3;\r\n                    }\r\n                    if (tips.punters[d].tips.includes(placings.second)) {\r\n                        puntersStats.seconds++;\r\n                        raceScore += 2;\r\n                    }\r\n                    if (tips.punters[d].tips.includes(placings.third)) {\r\n                        puntersStats.thirds++;\r\n                        raceScore += 1;\r\n                    }\r\n                    if (raceScore === 6) {\r\n                        puntersStats.trifectas++;\r\n                    }\r\n                    if (raceScore === 5) {\r\n                        puntersStats.quinellas++;\r\n                    }\r\n                    // Add the race score to this meets score\r\n                    puntersStatsMeet.score += raceScore;\r\n                }\r\n            }\r\n        }\r\n\r\n        return stats;\r\n    };\r\n\r\n    /* Function create the stat item HTML for each punter and adding to the arrayToUpdate */\r\n    createStatArray = (stats, arrayToUpdate, arrayToUpdateName) => {\r\n        let stat, punter, position;\r\n\r\n        for (let i = 0, len = stats.length; i < len; i++) {\r\n            // Set the correct stat data according to the array to update\r\n            switch (arrayToUpdateName) {\r\n                case 'trifectas':\r\n                    stat = stats[i].trifectas;\r\n                    break;\r\n                case 'quinellas':\r\n                    stat = stats[i].quinellas;\r\n                    break;\r\n                case 'firsts':\r\n                    stat = stats[i].firsts;\r\n                    break;\r\n                case 'seconds':\r\n                    stat = stats[i].seconds;\r\n                    break;\r\n                case 'thirds':\r\n                    stat = stats[i].thirds;\r\n                    break;\r\n                case 'meet':\r\n                    stat = stats[i].score;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            // Get the current punters details\r\n            punter = this.findPunter(stats[i].punterId);\r\n\r\n            // Get positon ending name (adding 1 to index to account for array starting from 0)\r\n            if (i + 1 !== 11 && (i + 1) % 10 === 1) {\r\n                position = '<sup>ST</sup>';\r\n            } else if (i + 1 !== 12 && (i + 1) % 10 === 2) {\r\n                position = '<sup>ND</sup>';\r\n            } else if (i + 1 !== 13 && (i + 1) % 10 === 3) {\r\n                position = '<sup>RD</sup>';\r\n            } else {\r\n                position = '<sup>TH</sup>';\r\n            }\r\n\r\n            // Create the stat item and add to the array to update\r\n            arrayToUpdate.push(\r\n                <div key={i} className=\"stat-item\">\r\n                    <div className=\"number\" dangerouslySetInnerHTML={{ __html: i + 1 + position }} />\r\n                    <img src={'pics/' + punter.pic} alt=\"Profile pic\" className=\"pic\" />\r\n                    <div className=\"name\">{punter.name.first}</div>\r\n                    <div className=\"stat\">{stat}</div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let stats = this.calculateStats(),\r\n            turnbullTemp = [],\r\n            guineasTemp = [],\r\n            caulCupTemp = [],\r\n            coxPlateTemp = [],\r\n            derbyDayTemp = [],\r\n            melbCupTemp = [],\r\n            oaksDayTemp = [],\r\n            stakesDayTemp = [],\r\n            turnbull = [],\r\n            guineas = [],\r\n            caulCup = [],\r\n            coxPlate = [],\r\n            derbyDay = [],\r\n            melbCup = [],\r\n            oaksDay = [],\r\n            stakesDay = [],\r\n            trifectas = [],\r\n            quinellas = [],\r\n            firsts = [],\r\n            seconds = [],\r\n            thirds = [],\r\n            tabBtn1Class,\r\n            tabBtn2Class,\r\n            tab1Class,\r\n            tab2Class;\r\n\r\n        // Set the tab status and hide/show the tabs\r\n        if (this.state.tabSelected === 1) {\r\n            tabBtn1Class = 'btn tab-btn one selected';\r\n            tabBtn2Class = 'btn tab-btn two';\r\n            tab1Class = '';\r\n            tab2Class = 'hide';\r\n        } else {\r\n            tabBtn1Class = 'btn tab-btn one';\r\n            tabBtn2Class = 'btn tab-btn two selected';\r\n            tab1Class = 'hide';\r\n            tab2Class = '';\r\n        }\r\n\r\n        // Populate each of the temporary meet arrays with each punters score for that meet\r\n        for (let i = 0, len = stats.length; i < len; i++) {\r\n            for (let j = 0, leng = stats[i].meets.length; j < leng; j++) {\r\n                if (stats[i].meets[j].meetId === 'TURNBULL') {\r\n                    turnbullTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'CAULGUINEAS') {\r\n                    guineasTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'CAULCUP') {\r\n                    caulCupTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'COXPLATE') {\r\n                    coxPlateTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'DERBYDAY') {\r\n                    derbyDayTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'MELBCUP') {\r\n                    melbCupTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'OAKSDAY') {\r\n                    oaksDayTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n                if (stats[i].meets[j].meetId === 'STAKESDAY') {\r\n                    stakesDayTemp.push({\r\n                        punterId: stats[i].punterId,\r\n                        score: stats[i].meets[j].score\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort punters in descending order by their score in the Turnbull Cup\r\n        turnbullTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Caulfield Guineas\r\n        this.createStatArray(turnbullTemp, turnbull, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Caulfield Guineas\r\n        guineasTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Caulfield Cup\r\n        this.createStatArray(guineasTemp, guineas, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Caulfield Cup\r\n        caulCupTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Cox Plate\r\n        this.createStatArray(caulCupTemp, caulCup, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Cox Plate\r\n        coxPlateTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Cox Plate\r\n        this.createStatArray(coxPlateTemp, coxPlate, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Derby Day\r\n        derbyDayTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Derby Day\r\n        this.createStatArray(derbyDayTemp, derbyDay, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Melbourne Cup\r\n        melbCupTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Melbourne Cup\r\n        this.createStatArray(melbCupTemp, melbCup, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Oaks Day\r\n        oaksDayTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Oaks Day\r\n        this.createStatArray(oaksDayTemp, oaksDay, 'meet');\r\n\r\n        // Sort punters in descending order by their score in the Stakes Day\r\n        stakesDayTemp.sort((a, b) => {\r\n            return b.score - a.score;\r\n        });\r\n\r\n        // Create list of punters for the Stakes Day\r\n        this.createStatArray(stakesDayTemp, stakesDay, 'meet');\r\n\r\n        // Sort punters in descending order by trifectas\r\n        stats.sort((a, b) => {\r\n            return b.trifectas - a.trifectas;\r\n        });\r\n\r\n        // Create list of punters in order of trifectas\r\n        this.createStatArray(stats, trifectas, 'trifectas');\r\n\r\n        // Sort punters in descending order by quinellas\r\n        stats.sort((a, b) => {\r\n            return b.quinellas - a.quinellas;\r\n        });\r\n\r\n        // Create list of punters in order of quinellas\r\n        this.createStatArray(stats, quinellas, 'quinellas');\r\n\r\n        // Sort punters in descending order by firsts\r\n        stats.sort((a, b) => {\r\n            return b.firsts - a.firsts;\r\n        });\r\n\r\n        // Create list of punters in order of firsts\r\n        this.createStatArray(stats, firsts, 'firsts');\r\n\r\n        // Sort punters in descending order by seconds\r\n        stats.sort((a, b) => {\r\n            return b.seconds - a.seconds;\r\n        });\r\n\r\n        // Create list of punters in order of seconds\r\n        this.createStatArray(stats, seconds, 'seconds');\r\n\r\n        // Sort punters in descending order by thirds\r\n        stats.sort((a, b) => {\r\n            return b.thirds - a.thirds;\r\n        });\r\n\r\n        // Create list of punters in order of thirds\r\n        this.createStatArray(stats, thirds, 'thirds');\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Statistics\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"Here you can find various statistics, such as the placings for each race meet, number of trifectas, quinellas, 1sts, 2nds, 3rds, etc.\"\r\n                />\r\n                <div className=\"tab-btns\">\r\n                    <button className={tabBtn1Class} onClick={this.handleTabClick}>\r\n                        Meet Scores\r\n                    </button>\r\n                    <button className={tabBtn2Class} onClick={this.handleTabClick}>\r\n                        Other\r\n                    </button>\r\n                </div>\r\n                <div className={tab1Class}>\r\n                    <div className=\"bold mt-20 mb-10\">Turnbull Stakes</div>\r\n                    <div className=\"stat-container\">{turnbull}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Caulfield Guineas</div>\r\n                    <div className=\"stat-container\">{guineas}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Caulfield Cup</div>\r\n                    <div className=\"stat-container\">{caulCup}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Cox Plate</div>\r\n                    <div className=\"stat-container\">{coxPlate}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Derby Day</div>\r\n                    <div className=\"stat-container\">{derbyDay}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Melbourne Cup</div>\r\n                    <div className=\"stat-container\">{melbCup}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Oaks Day</div>\r\n                    <div className=\"stat-container\">{oaksDay}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Stakes Day</div>\r\n                    <div className=\"stat-container\">{stakesDay}</div>\r\n                </div>\r\n                <div className={tab2Class}>\r\n                    <div className=\"bold mt-20 mb-10\">Trifectas</div>\r\n                    <div className=\"stat-container\">{trifectas}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Quinellas</div>\r\n                    <div className=\"stat-container\">{quinellas}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Firsts</div>\r\n                    <div className=\"stat-container\">{firsts}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Seconds</div>\r\n                    <div className=\"stat-container\">{seconds}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Thirds</div>\r\n                    <div className=\"stat-container\">{thirds}</div>\r\n                </div>\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Menu from './Menu';\r\n\r\nexport default class Information extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Information\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is where you can find a run down of how each of the pages of this app work, as well as the browser support and what some of the ideas for the future are.\"\r\n                />\r\n                <div className=\"bold mt-20\">Browser Support</div>\r\n                <p>\r\n                    While this app will work fine on tablets and desktop, it was\r\n                    designed for mobile screen size, and to run in the latest\r\n                    version of the following browsers:\r\n                </p>\r\n                <ul className=\"browser-list\">\r\n                    <li>\r\n                        <span className=\"browser chrome\" />Chrome\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"browser safari\" />Safari\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"browser firefox\" />Firefox\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"browser opera\" />Opera\r\n                    </li>\r\n                </ul>\r\n                <div className=\"bold mt-20\">Game Accounts</div>\r\n                <p>\r\n                    There are three game accounts which appear in lists like\r\n                    regular people (excluding the leaderboard). These three\r\n                    accounts are:\r\n                </p>\r\n                <div className=\"odds-totals\">\r\n                    <div className=\"total\">\r\n                        <img\r\n                            src={'pics/Default.png'}\r\n                            alt=\"Profile pic\"\r\n                            className=\"pic\"\r\n                        />\r\n                        <div className=\"name\">1, 2, 3</div>\r\n                    </div>\r\n                    <div className=\"total\">\r\n                        <img\r\n                            src={'pics/Default.png'}\r\n                            alt=\"Profile pic\"\r\n                            className=\"pic\"\r\n                        />\r\n                        <div className=\"name\">Top Odds</div>\r\n                    </div>\r\n                    <div className=\"total\">\r\n                        <img\r\n                            src={'pics/Default.png'}\r\n                            alt=\"Profile pic\"\r\n                            className=\"pic\"\r\n                        />\r\n                        <div className=\"name\">Bottom Odds</div>\r\n                    </div>\r\n                </div>\r\n                <p>1, 2, 3 = Always picks horses 1, 2 and 3.</p>\r\n                <p>\r\n                    Top Odds = Always picks the horses with the top three odds.\r\n                    Decided on form if more than one horse have the same odds.\r\n                </p>\r\n                <p>\r\n                    Bottom Odds = Always picks the horses with the bottom three\r\n                    odds. Decided on form if more than one horse have the same\r\n                    odds.\r\n                </p>\r\n                <div className=\"bold mt-20\">Tips</div>\r\n                <p>\r\n                    On the Tips page you can select a race meet from the drop\r\n                    down menu to view the list of races and their associated\r\n                    tips. You can submit 3 tips for each race of every race\r\n                    meet. If you have selected 3 horses already, but want to\r\n                    change a selection, then you will have to unselect a horse\r\n                    before you can select a new one. If you select less than 3\r\n                    horses, then you simply miss out on the opprtunity to get\r\n                    those points.\r\n                </p>\r\n                <p>\r\n                    To select or unselect a number, you must\r\n                    double-click/double-tap on it. This is to help prevent\r\n                    people accidently selecting or unselecting things while they\r\n                    are just scrolling the page.\r\n                </p>\r\n                <p>\r\n                    The tips for each race meet must be submitted by 10:00am\r\n                    AEDT on the day of the race meet.\r\n                </p>\r\n                <p>\r\n                    The tips for all the races of a race meet will be disabled\r\n                    after 10:00am on the day of the meet.\r\n                </p>\r\n                <div className=\"bold mt-20\">Results</div>\r\n                <p>\r\n                    On the Results page you can select a race meet to view the\r\n                    races for that meet, and the associated details and each\r\n                    punters tips for each race.\r\n                </p>\r\n                The races appear as coloured circles below the race meet drop\r\n                down. The selected race has a tapered bottom. The colours match\r\n                the status of the race:\r\n                <ul>\r\n                    <li>\r\n                        <span className=\"demo-square bg-blue\" /> Not Yet Run\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"demo-square bg-orange\" /> About To Jump\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"demo-square bg-red\" /> Racing\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"demo-square bg-green\" /> Has Run\r\n                    </li>\r\n                </ul>\r\n                <p>\r\n                    5 minutes before a race is due to run its status will\r\n                    automatically change to 'About To Jump'. An admin will then\r\n                    have to manually set it to 'Racing' and 'Has Run' on the\r\n                    Admin page, as they can tend to run late.\r\n                </p>\r\n                <p>\r\n                    When you select a race you can see its details and placings\r\n                    appear, and below that will be a list of everybody's tips\r\n                    for that race. Each person's tips shows each of their 3\r\n                    picks and the calculated score. Any correct tips will be\r\n                    shown in teal with a tick next to it.\r\n                </p>\r\n                <div className=\"bold mt-20\">Leaderboard</div>\r\n                <p>\r\n                    On the Leaderboard page you can see the current rank of all\r\n                    the punters. The rank is determined first by people's\r\n                    overall score, then how many trifectas (first, second,\r\n                    third) they have, then how many quinellas (first, second)\r\n                    they have, then by number of first places, then finally\r\n                    second places.\r\n                </p>\r\n                <p>\r\n                    The top three will appear on the podium, everybody else will\r\n                    be listed in order under 'Best of the Rest'.\r\n                </p>\r\n                <div className=\"bold mt-20\">Admin</div>\r\n                <p>\r\n                    Anybody who is marked as an admin will see an admin icon\r\n                    appear in the top right of the screen, below the profile\r\n                    picture <span className=\"icon-admin demo\" />\r\n                </p>\r\n                <p>\r\n                    When you click the admin link it will take you to the Admin\r\n                    page. Currently on the Admin page you can set the placings,\r\n                    status and scratchings for each race.\r\n                </p>\r\n                <p>\r\n                    In the future I'd like to add more functionality here, like\r\n                    for example the ability to disable people from getting\r\n                    points, etc.\r\n                </p>\r\n                <div className=\"bold mt-20\">Future Plans</div>\r\n                <ul className=\"marked-list\">\r\n                    <li>\r\n                        After the Caulfield Cup I would like to replace this\r\n                        information page on the menu with a Statistics section\r\n                        that shows various statistics, like who won each race\r\n                        meet, most number of trifectas, quinellas, 1st, 2nds,\r\n                        3rds, etc.\r\n                    </li>\r\n                    <li>\r\n                        People can create accounts and it has proper\r\n                        authentication.\r\n                    </li>\r\n                    <li>\r\n                        Introduce groups, so different groups of people can have\r\n                        their own tipping competitions.\r\n                    </li>\r\n                    <li>\r\n                        To improve the design for tablet and desktop screen\r\n                        sizes.\r\n                    </li>\r\n                    <li>\r\n                        Use a service worker to allow people to pin the page to\r\n                        their Home screens with an icon, and cache all the files\r\n                        so that the page will start up instantly like a native\r\n                        app.\r\n                    </li>\r\n                    <li>\r\n                        Make a different version of the same app, but introduce\r\n                        some game-type elements. So it would be more for fun\r\n                        than serious tipping. It could also be modified to be\r\n                        for the greyhounds.\r\n                        <br />\r\n                        Ideas for the game elements are:\r\n                        <ul>\r\n                            <li>\r\n                                <div>7 x Carrots (1 per meet probably)</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> Makes a horse surge home at\r\n                                    the finish.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Earn points for one\r\n                                    place higher than it actually finishes.\r\n                                    Wasted if the horse comes in 1st, or 5th or\r\n                                    below.\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>2 x Purple Carrots</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> More nutritious than\r\n                                    regular carrots.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Earn points for two\r\n                                    places higher. Wasted if the horse comes in\r\n                                    1st, or 6th or below. If it comes in 2nd\r\n                                    then get the points for 1st, same as a\r\n                                    regular carrot\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Juiced Syringe</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> Turn your nags into the\r\n                                    Lance Armstrong of horses.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Get double points for a\r\n                                    whole race meet.\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Poisioned Syringe</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> 'Phar Lap' a horse.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Kill a horse so nobody\r\n                                    can get points for it for that race. Perhaps\r\n                                    could be a bonus that is awarded to the\r\n                                    person who wins the second meet or\r\n                                    something, so then it is limited to only\r\n                                    being used once by one person, but affects\r\n                                    everyone equally?\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Shank</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> 'Monica Seles' a jockey.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Shank a jockey so\r\n                                    nobody can get points for them for that race\r\n                                    meet. Perhaps could be a bonus that is\r\n                                    awarded to the person that wins the first\r\n                                    meet or something, so then it is limited to\r\n                                    only being used once by one person, but\r\n                                    affects everyone equally?\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>7 x Glue Sticks (1 per meet probably)</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> Get out of a sticky\r\n                                    situation.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> If any of the horses\r\n                                    you pick come last, send them to the glue\r\n                                    factory to earn 1 point.\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Ricky Bobby</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> If you ain't first, your\r\n                                    last.\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Pick a horse to put\r\n                                    everything on (only one tip for that race).\r\n                                    If it comes first you get double points (6).\r\n                                    If it comes anything else you get nothing.\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>? x Sugar Cubes</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> ?\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Something good?\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div>? x Riding Crops</div>\r\n                                <div>\r\n                                    <b>Tag line:</b> ?\r\n                                </div>\r\n                                <div>\r\n                                    <b>Explaination:</b> Something good or bad?\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <p>\r\n                    If you come across any issues, or you have any ideas for\r\n                    things to add or improve, let me know via Facebook Messager\r\n                    or email - sanmerah@gmail.com\r\n                </p>\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class TippingRaceList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tips: [\r\n                { \"race\": 1, selections: [] },\r\n                { \"race\": 2, selections: [] },\r\n                { \"race\": 3, selections: [] },\r\n                { \"race\": 4, selections: [] },\r\n                { \"race\": 5, selections: [] },\r\n                { \"race\": 6, selections: [] },\r\n                { \"race\": 7, selections: [] },\r\n                { \"race\": 8, selections: [] },\r\n                { \"race\": 9, selections: [] },\r\n                { \"race\": 10, selections: [] }\r\n            ]\r\n        }\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !((nextProps === this.props) && (nextState === this.state));\r\n    }\r\n\r\n    /* When the component mounts, call setTips and pass it the props */\r\n    componentDidMount() {\r\n        this.setTips(this.props);\r\n    }\r\n\r\n    /* When the component is updating and is receiving the new props, call setTips passing it the new props */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setTips(nextProps);\r\n    }\r\n\r\n    /* Function to take the passed props and set the currently selected tips */\r\n    setTips = (passedProps) => {\r\n        let self = this,\r\n            tips = this.state.tips,\r\n            tipsRace, userTips;\r\n\r\n        // Set the current users tips for each race of the chosen race meet\r\n        for (let i = 0; i < passedProps.meet.races.length; i++) {\r\n            tipsRace = passedProps.tips.races.find(race => { return race.number === (i + 1) });\r\n            userTips = tipsRace.punters.find(punter => { \r\n                return punter.punterId === self.props.user }\r\n            );\r\n            tips[i] = { \"race\": (i + 1), selections: userTips.tips }\r\n        }\r\n\r\n        this.setState({\r\n            tips: tips\r\n        });\r\n    }\r\n    \r\n    /* When the user selects a number, either add or remove it from the local state and pass it to the onSelectionChange function\r\n       passed in via props from App.js */\r\n    handleSelectionClick = event => {\r\n        let tips = this.state.tips,\r\n            modifiedRace = parseInt(event.target.getAttribute('data-race'), 10),\r\n            tip = tips.find(tip => { return tip.race === modifiedRace }),\r\n            index = tips.indexOf(tip);\r\n            \r\n        // If the selection is already selected, remove it, else if there is less than 3 selected add it\r\n        if (event.target.classList.contains('selected')) {\r\n            let index = tip.selections.indexOf(event.target.innerText);\r\n            if (index > -1) { tip.selections.splice(index, 1); }\r\n            this.setState({\r\n                tips: tips\r\n            });\r\n            this.props.onSelectionChange(modifiedRace, tip);\r\n        }\r\n        else if (tip.selections.length < 3) {\r\n            tip.selections.push(event.target.innerText);\r\n            tips[index] = tip;\r\n            this.setState({\r\n                tips: tips\r\n            });\r\n            this.props.onSelectionChange(modifiedRace, tip);\r\n        }\r\n    }\r\n\r\n    /* Generate the HTML for the tips for each race */\r\n    generateList = () => {\r\n        let races = [],\r\n            selections = [],\r\n            className;\r\n            \r\n        // For each race in the selected meet\r\n        for (let i = 0; i < this.props.meet.races.length; i++) {\r\n            // Clear selections for each race\r\n            selections = [];\r\n\r\n            // Generate 24 selections for the tips\r\n            for (let j = 0; j < 24; j++) {\r\n                className = 'selection';\r\n                if (this.props.meet.races[i].scratchings.includes(j + 1)) { className += ' scratched'; }\r\n                if (this.state.tips[i].selections.includes((j + 1).toString())) { className += ' selected'; }\r\n                \r\n                selections.push(<div key={j} className={className} data-race={(i + 1)} onClick={this.handleSelectionClick}>{j + 1}</div>);\r\n            }\r\n\r\n            // Create the HTML for each race and insert into the races array\r\n            races.push(\r\n                <div key={i} className=\"tip-group\">\r\n                    <div className=\"details\">\r\n                        <div className=\"bold\">RACE {this.props.meet.races[i].number}</div>\r\n                        <span>{this.props.meet.races[i].time}</span>\r\n                        <span className=\"name\">&nbsp;-&nbsp;{this.props.meet.races[i].name}</span>\r\n                    </div>\r\n                    <div className=\"selections\">\r\n                        {selections}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return races;\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let raceList = this.generateList(),\r\n            raceDay = new Date(this.props.meet.date),\r\n            raceListClass;\r\n\r\n        // Set the meet to disabled if it is after 10:15am on race day\r\n        raceDay.setHours(10);\r\n        raceDay.setMinutes(15);\r\n\r\n        if (new Date() > raceDay) {\r\n            raceListClass = 'raceList disabled';\r\n        }\r\n        else {\r\n            raceListClass = 'raceList';\r\n        }\r\n\r\n        return (\r\n            <div className={raceListClass}>\r\n                {raceList}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport RaceMeetSelector from './RaceMeetSelector';\r\nimport TippingRaceList from './TippingRaceList';\r\nimport Menu from './Menu';\r\n\r\nexport default class Tips extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let meet = this.props.raceMeets.find(meet => {\r\n                return meet.meetId === this.props.selectedMeet;\r\n            }),\r\n            tips = this.props.tips.find(tips => {\r\n                return tips.meetId === this.props.selectedMeet;\r\n            });\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Tips\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"You want a tip?.....be good to your mother.  Otherwise, simply select 3 horses for each race.  If you already have 3 selected and want to change one, simply unselect one of them. Don't worry about saving at the end, your tips are saved every time you make a change.\"\r\n                />\r\n                <p>\r\n                    <b>* Tips must be in by 10:00am AEDT on race day.</b>\r\n                </p>\r\n                <p>The tips will be disabled after this time.</p>\r\n                <RaceMeetSelector\r\n                    meets={this.props.raceMeets}\r\n                    selectedMeetId={this.props.selectedMeet}\r\n                    onChange={this.props.onMeetChange}\r\n                />\r\n                <div className=\"tip-examples\">\r\n                    <span className=\"selection selected\">18</span>\r\n                    <span>Selected</span>\r\n                    <span className=\"selection scratched\">18</span>\r\n                    <span>Scratched</span>\r\n                    <span className=\"selection selected scratched\">18</span>\r\n                    <span>Both</span>\r\n                </div>\r\n                <TippingRaceList\r\n                    meet={meet}\r\n                    tips={tips}\r\n                    user={this.props.user}\r\n                    onSelectionChange={this.props.onSelectionChange}\r\n                />\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Tip extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        let self = this,\r\n            punter = this.props.punters.find(tipPunter => { return tipPunter.punterId === self.props.tips.punterId }),\r\n            score = 0,\r\n            index,\r\n            firstClass = '',\r\n            secondClass = '',\r\n            thirdClass = '';\r\n\r\n        // Set the scores and the 'correct' class on punters picks\r\n        index = self.props.tips.tips.indexOf(self.props.placings.first);\r\n        if (index > -1) {\r\n            score += 3;\r\n            if (index === 0) { firstClass = 'correct' }\r\n            if (index === 1) { secondClass = 'correct' }\r\n            if (index === 2) { thirdClass = 'correct' }\r\n        }\r\n\r\n        index = self.props.tips.tips.indexOf(self.props.placings.second);\r\n        if (index > -1) {\r\n            score += 2;\r\n            if (index === 0) { firstClass = 'correct' }\r\n            if (index === 1) { secondClass = 'correct' }\r\n            if (index === 2) { thirdClass = 'correct' }\r\n        }\r\n\r\n        index = self.props.tips.tips.indexOf(self.props.placings.third);\r\n        if (index > -1) {\r\n            score ++;\r\n            if (index === 0) { firstClass = 'correct' }\r\n            if (index === 1) { secondClass = 'correct' }\r\n            if (index === 2) { thirdClass = 'correct' }\r\n        }\r\n\r\n        return (\r\n            <div className=\"tip\">\r\n                <img src={'pics/' + punter.pic} alt=\"Profile pic\" className=\"pic\" />\r\n                <span className=\"name\">{punter.name.first} {punter.name.last}</span>\r\n                <div className=\"numbers\">\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 1</span>&nbsp;-&nbsp;\r\n                        <span className={firstClass}>{self.props.tips.tips[0]}</span>\r\n                    </div>\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 2</span>&nbsp;-&nbsp;\r\n                        <span className={secondClass}>{self.props.tips.tips[1]}</span>\r\n                    </div>\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 3</span>&nbsp;-&nbsp;\r\n                        <span className={thirdClass}>{self.props.tips.tips[2]}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"score\">\r\n                    <div className=\"mb-5 bold\">Score</div>\r\n                    <div>{score}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Tip from './Tip';\r\n\r\nexport default class Race extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        let self = this,\r\n            tips = self.props.tips.punters.map(punterTips => {\r\n                return <Tip key={punterTips.punterId} tips={punterTips} punters={self.props.punters} placings={self.props.race.placings}  />\r\n            }),\r\n            statusClass;\r\n        // Set the statusClass based on race's status\r\n        switch (self.props.race.status) {\r\n            case \"Has Run\": statusClass = \"status green\"; break;\r\n            case \"About To Jump\": statusClass = \"status orange\"; break;\r\n            case \"Racing\": statusClass = \"status red\"; break;\r\n            case \"Not Run Yet\": statusClass = \"status blue\"; break;\r\n            default: statusClass = \"status\"; break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"race\">\r\n                <div className=\"details\">\r\n                    <div className=\"mb-5 bold\">Details</div>\r\n                    <div className=\"mb-5 name\">{self.props.race.name}</div>\r\n                    <div className=\"mb-5\">{self.props.race.time}</div>\r\n                    <div className=\"mb-5\">{self.props.race.distance}</div>\r\n                    <div>\r\n                        <span className=\"status-label\">Status:&nbsp;</span>\r\n                        <span className={statusClass}>{self.props.race.status}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"placings\">\r\n                    <div className=\"mb-5 bold\">Placings</div>\r\n                    <div className=\"mb-5\"><span className=\"placing bold gold\">1st</span>&nbsp;{self.props.race.placings.first}</div>\r\n                    <div className=\"mb-5\"><span className=\"placing bold silver\">2nd</span>&nbsp;{self.props.race.placings.second}</div>\r\n                    <div><span className=\"placing bold bronze\">3rd</span>&nbsp;{self.props.race.placings.third}</div>\r\n                </div>\r\n                <div className=\"tips-heading bold\">Tips</div>\r\n                <div className=\"tips\">\r\n                    {tips}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Race from './Race';\r\n\r\nexport default class RaceMeet extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        let self = this,\r\n            raceSelectors = [],\r\n            race = self.props.meet.races.find(race => { return race.number === self.props.selectedRace }),\r\n            raceTips = self.props.meetTips.races.find(tipRace => { return tipRace.number === self.props.selectedRace });\r\n            // For each race of the meet passed in via props\r\n            for (let i = 0; i < self.props.meet.races.length; i++) {\r\n                let className;\r\n                // Select the colour class for the race circles based on the status of the race\r\n                switch (self.props.meet.races[i].status) {\r\n                    case \"Has Run\": className = 'circle bg-green'; break;\r\n                    case \"About To Jump\": className = 'circle bg-orange'; break;\r\n                    case \"Racing\": className = 'circle bg-red'; break;\r\n                    default: className = 'circle bg-blue'; break;\r\n                }\r\n                // If race is the currently selected race, add the 'selected' class to className\r\n                if (self.props.meet.races[i].number === self.props.selectedRace) { className += ' selected' }\r\n                // Create selector HTML and add to the raceSelectors array\r\n                raceSelectors.push(<div key={i} id={i + 1} className={className} onClick={self.props.onClick}>{i + 1}</div>);\r\n            }\r\n        \r\n        return (\r\n            <div className=\"race-meet\">\r\n                <div className=\"race-selector\">\r\n                    {raceSelectors}\r\n                </div>\r\n                <h3>RACE {race.number}</h3>\r\n                <Race race={race} punters={self.props.punters} tips={raceTips} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport RaceMeet from './RaceMeet';\r\nimport RaceMeetSelector from './RaceMeetSelector';\r\nimport Menu from './Menu';\r\n\r\nexport default class Results extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let meet = this.props.raceMeets.find(meet => {\r\n                return meet.meetId === this.props.selectedMeet;\r\n            }),\r\n            meetTips = this.props.tips.find(meet => {\r\n                return meet.meetId === this.props.selectedMeet;\r\n            });\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Results\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is where you can see the results of the hours of peoples research, strategy and rumination....before they just picked a number because they liked the jockey's pink star-spangled uniform.\"\r\n                />\r\n                <RaceMeetSelector\r\n                    meets={this.props.raceMeets}\r\n                    selectedMeetId={this.props.selectedMeet}\r\n                    onChange={this.props.onMeetChange}\r\n                />\r\n                <RaceMeet\r\n                    meet={meet}\r\n                    selectedRace={this.props.selectedRace}\r\n                    punters={this.props.punters}\r\n                    meetTips={meetTips}\r\n                    onClick={this.props.onRaceChange}\r\n                />\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Podium(props) {\r\n    // Returns the HTML for the podium, inserting the details for first, second and third from the passed props\r\n    return [\r\n        <h4 key=\"a\" className=\"lb-heading teal\">PODIUM</h4>,\r\n        <div key=\"b\" className=\"podium\">\r\n            <div className=\"second\">\r\n                <img src={'pics/' + props.second.pic} alt=\"Profile pic\" className=\"pic\" />\r\n                <span className=\"name\">{props.second.name.first} {props.second.name.last}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"number\">2<sup>ND</sup></div>\r\n                    <div className=\"points\">{props.points[1].points} PTS</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"first\">\r\n                <img src={'pics/' + props.first.pic} alt=\"Profile pic\" className=\"pic\" />\r\n                <span className=\"name\">{props.first.name.first} {props.first.name.last}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"icon-trophy\"></div>\r\n                    <div className=\"number\">1<sup>ST</sup></div>\r\n                    <div className=\"points\">{props.points[0].points} PTS</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"third\">\r\n                <img src={'pics/' + props.third.pic} alt=\"Profile pic\" className=\"pic\" />\r\n                <span className=\"name\">{props.third.name.first} {props.third.name.last}</span>\r\n                <div className=\"bar\">\r\n                    <div className=\"number\">3<sup>RD</sup></div>\r\n                    <div className=\"points\">{props.points[2].points} PTS</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ];\r\n}","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Podium from './Podium';\r\nimport Menu from './Menu';\r\n\r\nexport default class Leaderboard extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Find the particular meet from the tips data */\r\n    findMeet = thisMeetIndex => {\r\n        return this.props.tips.find(tipsMeet => {\r\n            return (\r\n                tipsMeet.meetId === this.props.raceMeets[thisMeetIndex].meetId\r\n            );\r\n        });\r\n    };\r\n\r\n    /* Find the particular race from the tips data  */\r\n    findRace = (tipMeet, thisMeetIndex, thisRaceIndex) => {\r\n        return tipMeet.races.find(tipsRace => {\r\n            return (\r\n                tipsRace.number ===\r\n                this.props.raceMeets[thisMeetIndex].races[thisRaceIndex].number\r\n            );\r\n        });\r\n    };\r\n\r\n    /* Find the particular punter from the punters data */\r\n    findPunter = punterId => {\r\n        return this.props.punters.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Get the particular punters data from the points array */\r\n    findPuntersPoints = (points, punterId) => {\r\n        return points.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Function to calculate each users points, trifectas, quinellas, firsts, seconds and thirds */\r\n    calculatePoints = () => {\r\n        let points = [],\r\n            a = this.props.punters.length,\r\n            b = this.props.raceMeets.length,\r\n            c,\r\n            d,\r\n            placings,\r\n            tipMeet,\r\n            tips,\r\n            puntersPoints,\r\n            raceScore;\r\n\r\n        // Load each punter into the points array with a score of 0\r\n        while (a--) {\r\n            points.push({\r\n                punterId: this.props.punters[a].punterId,\r\n                points: 0,\r\n                trifectas: 0,\r\n                quinellas: 0,\r\n                firsts: 0,\r\n                seconds: 0,\r\n                thirds: 0\r\n            });\r\n        }\r\n\r\n        // For each meet\r\n        while (b--) {\r\n            c = this.props.raceMeets[b].races.length;\r\n            // For each race in meet\r\n            while (c--) {\r\n                // Set placings to the placings for this race\r\n                placings = this.props.raceMeets[b].races[c].placings;\r\n                // Find race meet in tips, and then get the associated tips\r\n                tipMeet = this.findMeet(b);\r\n                tips = this.findRace(tipMeet, b, c);\r\n                d = tips.punters.length;\r\n                // For each punters tips\r\n                while (d--) {\r\n                    raceScore = 0;\r\n                    puntersPoints = this.findPuntersPoints(\r\n                        points,\r\n                        tips.punters[d].punterId\r\n                    );\r\n                    if (tips.punters[d].tips.includes(placings.first)) {\r\n                        puntersPoints.points += 3;\r\n                        raceScore += 3;\r\n                        puntersPoints.firsts++;\r\n                    }\r\n                    if (tips.punters[d].tips.includes(placings.second)) {\r\n                        puntersPoints.points += 2;\r\n                        raceScore += 2;\r\n                        puntersPoints.seconds++;\r\n                    }\r\n                    if (tips.punters[d].tips.includes(placings.third)) {\r\n                        puntersPoints.points += 1;\r\n                        raceScore += 1;\r\n                        puntersPoints.thirds++;\r\n                    }\r\n                    if (raceScore === 6) {\r\n                        puntersPoints.trifectas++;\r\n                    }\r\n                    if (raceScore === 5) {\r\n                        puntersPoints.quinellas++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return points;\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        let points = this.calculatePoints(),\r\n            oddsList = [],\r\n            loserList = [],\r\n            firstThree,\r\n            topOdds,\r\n            bottomOdds,\r\n            first,\r\n            second,\r\n            third,\r\n            punter,\r\n            position;\r\n\r\n        // Set '1, 2, 3', Top Odds and Bottom Odds\r\n        firstThree = this.findPunter(points[2].punterId);\r\n        topOdds = this.findPunter(points[1].punterId);\r\n        bottomOdds = this.findPunter(points[0].punterId);\r\n\r\n        // Populate the oddsList array\r\n        oddsList.push(\r\n            <div key=\"a\" className=\"total\">\r\n                <img\r\n                    src={'pics/' + firstThree.pic}\r\n                    alt=\"Profile pic\"\r\n                    className=\"pic\"\r\n                />\r\n                <div className=\"name\">\r\n                    {firstThree.name.first} {firstThree.name.last}\r\n                </div>\r\n                <div className=\"points\">{points[2].points} PTS</div>\r\n            </div>\r\n        );\r\n        oddsList.push(\r\n            <div key=\"b\" className=\"total\">\r\n                <img\r\n                    src={'pics/' + topOdds.pic}\r\n                    alt=\"Profile pic\"\r\n                    className=\"pic\"\r\n                />\r\n                <div className=\"name\">\r\n                    {topOdds.name.first} {topOdds.name.last}\r\n                </div>\r\n                <div className=\"points\">{points[1].points} PTS</div>\r\n            </div>\r\n        );\r\n        oddsList.push(\r\n            <div key=\"c\" className=\"total\">\r\n                <img\r\n                    src={'pics/' + bottomOdds.pic}\r\n                    alt=\"Profile pic\"\r\n                    className=\"pic\"\r\n                />\r\n                <div className=\"name\">\r\n                    {bottomOdds.name.first} {bottomOdds.name.last}\r\n                </div>\r\n                <div className=\"points\">{points[0].points} PTS</div>\r\n            </div>\r\n        );\r\n\r\n        // Remove odds totals from the points\r\n        points.shift();\r\n        points.shift();\r\n        points.shift();\r\n\r\n        // Sort points in descending order by total points, then trifectas, then quinellas, then first places, then second places\r\n        points.sort((a, b) => {\r\n            return (\r\n                b.points - a.points ||\r\n                b.trifectas - a.trifectas ||\r\n                b.quinellas - a.quinellas ||\r\n                b.firsts - a.firsts ||\r\n                b.seconds - a.seconds\r\n            );\r\n        });\r\n\r\n        // Set winners\r\n        first = this.findPunter(points[0].punterId);\r\n        second = this.findPunter(points[1].punterId);\r\n        third = this.findPunter(points[2].punterId);\r\n\r\n        // Generate list of losers\r\n        for (let i = 0; i < points.length; i++) {\r\n            // If not the winners\r\n            if (i !== 0 && i !== 1 && i !== 2) {\r\n                // Get the punter details\r\n                punter = this.findPunter(points[i].punterId);\r\n\r\n                // Get positon ending name (adding 1 to index to account for array starting from 0)\r\n                if (i + 1 !== 11 && (i + 1) % 10 === 1) {\r\n                    position = '<sup>ST</sup>';\r\n                } else if (i + 1 !== 12 && (i + 1) % 10 === 2) {\r\n                    position = '<sup>ND</sup>';\r\n                } else if (i + 1 !== 13 && (i + 1) % 10 === 3) {\r\n                    position = '<sup>RD</sup>';\r\n                } else {\r\n                    position = '<sup>TH</sup>';\r\n                }\r\n\r\n                // Add them to the losers array\r\n                loserList.push(\r\n                    <div key={i} className=\"loser\">\r\n                        <span\r\n                            className=\"number\"\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: i + 1 + position\r\n                            }}\r\n                        />\r\n                        <span className=\"points\">{points[i].points} PTS</span>\r\n                        <img\r\n                            src={'pics/' + punter.pic}\r\n                            alt=\"Profile pic\"\r\n                            className=\"pic\"\r\n                        />\r\n                        <span className=\"name\">\r\n                            {punter.name.first} {punter.name.last}\r\n                        </span>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Leaderboard\"\r\n                    path={this.props.path}\r\n                    punters={this.props.punters}\r\n                    user={this.props.user}\r\n                    onReloadData={this.props.onReloadData}\r\n                    loadingData={this.props.loadingData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"To the victors go the spoils, and to the losers....go home.\"\r\n                />\r\n                <h4 className=\"lb-heading\">GAME ACCOUNTS</h4>\r\n                <div className=\"odds-totals\">{oddsList}</div>\r\n                <Podium\r\n                    first={first}\r\n                    second={second}\r\n                    third={third}\r\n                    points={points}\r\n                />\r\n                <h4 className=\"lb-heading\">BEST OF THE REST</h4>\r\n                {loserList}\r\n                <Menu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ScrollToTop from './components/ScrollToTop';\r\nimport Login from './components/Login';\r\nimport Admin from './components/Admin';\r\nimport Statistics from './components/Statistics';\r\nimport Information from './components/Information';\r\nimport Tips from './components/Tips';\r\nimport Results from './components/Results';\r\nimport Leaderboard from './components/Leaderboard';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            raceMeets: [],\r\n            punters: [],\r\n            tips: [],\r\n            authenticated: false,\r\n            user: 0,\r\n            isAdmin: false,\r\n            selectedMeet: 'TURNBULL',\r\n            selectedRace: 1,\r\n            selectedTab: 1,\r\n            appLoadFailed: false,\r\n            loadingData: false,\r\n            counter: 0\r\n        };\r\n        // this.databaseURL = 'http://localhost:3001'; // Local\r\n        this.databaseURL = 'https://sleepy-harbor-88560.herokuapp.com'; // Heroku\r\n\r\n        this.path = '/'; // Local\r\n        //this.path = '/spring-racing-tipping/'; // Github\r\n\r\n        this.counterInterval = null;\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextState === this.state);\r\n    }\r\n\r\n    /* Asyncronously get all the data, either from local JSON files while in development, or the database */\r\n    async getData() {\r\n        var self = this;\r\n        try {\r\n            self.setState({\r\n                loadingData: true\r\n            });\r\n            // Used for local JSON files\r\n            // let raceMeetResponse = await fetch(this.path + 'raceMeets.json'),\r\n            //     meets = await raceMeetResponse.json(),\r\n            //     punterResponse = await fetch(this.path + 'punters.json'),\r\n            //     punters = await punterResponse.json(),\r\n            //     tipsResponse = await fetch(this.path + 'tips.json'),\r\n            //     tips = await tipsResponse.json();\r\n            // self.setState({\r\n            //     raceMeets: meets,\r\n            //     punters: punters,\r\n            //     tips: tips\r\n            // });\r\n\r\n            // Used for data coming from database\r\n            axios\r\n                .all([\r\n                    axios.get(this.databaseURL + '/racemeets'),\r\n                    axios.get(this.databaseURL + '/punters'),\r\n                    axios.get(this.databaseURL + '/tips')\r\n                ])\r\n                .then(\r\n                    axios.spread(function(meets, punters, tips) {\r\n                        self.setState({\r\n                            raceMeets: meets.data,\r\n                            punters: punters.data,\r\n                            tips: tips.data,\r\n                            loadingData: false\r\n                        });\r\n                    })\r\n                )\r\n                .catch(function(e) {\r\n                    console.log('An Axios error occurred: ' + e);\r\n                    self.setState({\r\n                        loadingData: false\r\n                    });\r\n                });\r\n        } catch (e) {\r\n            console.log('An error occurred: ' + e);\r\n            self.setState({\r\n                loadingData: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Runs when the component first mounts and calls getData and checks for and sets state that was stored in localStorage */\r\n    componentDidMount() {\r\n        // Load all the data\r\n        this.getData();\r\n        // Check the localStorage to see if the user is already logged in\r\n        if (localStorage.getItem('user')) {\r\n            this.setState({\r\n                authenticated: true,\r\n                user: parseInt(localStorage.getItem('user'), 10),\r\n                isAdmin: localStorage.getItem('isAdmin') === 'true',\r\n                selectedMeet: localStorage.getItem('selectedMeet') || 'TURNBULL'\r\n            });\r\n        }\r\n        // Start 30sec timer to check if app loaded\r\n        setTimeout(() => {\r\n            if (!this.state.punters.length) {\r\n                this.setState({\r\n                    appLoadFailed: true\r\n                });\r\n            }\r\n        }, 30000);\r\n        this.counterInterval = setInterval(() => {\r\n            if (!this.state.punters.length) {\r\n                const count = this.state.counter;\r\n                const newCount = count + 1;\r\n                this.setState({\r\n                    counter: newCount\r\n                });\r\n            }\r\n            else {\r\n                clearInterval(this.counterInterval);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    /* When the user logs in set the state and store them in localStorage */\r\n    handleLogin = (user, isAdmin) => {\r\n        // Update the state with the user, and whether they are an admin\r\n        this.setState({\r\n            authenticated: true,\r\n            user: user,\r\n            isAdmin: isAdmin\r\n        });\r\n        // Set the localStorage for the logged in user\r\n        localStorage.setItem('user', user);\r\n        localStorage.setItem('isAdmin', isAdmin);\r\n    };\r\n\r\n    /* When the user clicks the reload button, request the data again */\r\n    handleReloadData = () => {\r\n        this.getData();\r\n    };\r\n\r\n    /* When the user selects a race meet, update the state and save to localStorage */\r\n    handleMeetSelect = event => {\r\n        this.setState({\r\n            selectedMeet: event.target.value,\r\n            selectedRace: 1\r\n        });\r\n        localStorage.setItem('selectedMeet', event.target.value);\r\n    };\r\n\r\n    /* When the user selects a race on the Results page, update the state */\r\n    handleRaceSelect = event => {\r\n        this.setState({\r\n            selectedRace: parseInt(event.target.id, 10)\r\n        });\r\n    };\r\n\r\n    /* When the user selects a tab on the Statistics page, update the state */\r\n    handleTabSelect = tab => {\r\n        this.setState({\r\n            selectedTab: tab\r\n        });\r\n    };\r\n\r\n    /* When the user selects a tip on the Tips page, get an updated copy of the tips from the database\r\n       then update it, save back to the database and update the state */\r\n    handleSaveTips = (modifiedRace, modifiedTips) => {\r\n        axios.get(this.databaseURL + '/tips').then(returnedTips => {\r\n            let tips = this.state.tips,\r\n                tipsMeet = returnedTips.data.find(meet => {\r\n                    return meet.meetId === this.state.selectedMeet;\r\n                }),\r\n                punter = tipsMeet.races[modifiedRace - 1].punters.find(punter => {\r\n                    return punter.punterId === this.state.user;\r\n                }),\r\n                meetIndex = returnedTips.data.indexOf(tipsMeet),\r\n                punterIndex = returnedTips.data[meetIndex].races[modifiedRace - 1].punters.indexOf(punter);\r\n\r\n            // Update the tips for the selected meet/race\r\n            tipsMeet.races[modifiedRace - 1].punters[punterIndex].tips = modifiedTips.selections;\r\n\r\n            // Insert the updated meet back into the tips array\r\n            tips[meetIndex] = tipsMeet;\r\n\r\n            // Send the updated tips to the database\r\n            axios.put(this.databaseURL + '/tips/' + this.state.selectedMeet, tipsMeet);\r\n\r\n            // Update the local state with the updated tips array\r\n            this.setState({\r\n                tips: tips\r\n            });\r\n        });\r\n    };\r\n\r\n    /* When the user clicks Save for placings on the Admin page, save to the database and update the state */\r\n    handleSavePlacings = (modifiedRace, modifiedPlacings) => {\r\n        let raceMeets = this.state.raceMeets,\r\n            meet = raceMeets.find(meet => {\r\n                return meet.meetId === this.state.selectedMeet;\r\n            }),\r\n            meetIndex = raceMeets.indexOf(meet);\r\n\r\n        // Update the placings for the selected meet/race\r\n        meet.races[modifiedRace - 1].placings = modifiedPlacings;\r\n\r\n        // Insert the updated meet back into the raceMeets array\r\n        raceMeets[meetIndex] = meet;\r\n\r\n        // Send the updated meet to the database\r\n        axios.put(this.databaseURL + '/racemeets/' + this.state.selectedMeet, meet);\r\n\r\n        // Update the local state with the updated raceMeets array\r\n        this.setState({\r\n            raceMeets: raceMeets\r\n        });\r\n    };\r\n\r\n    /* When the user selects a race status on the Admin page, save to the database and update the state */\r\n    handleSaveStatus = event => {\r\n        let raceMeets = this.state.raceMeets,\r\n            meet = raceMeets.find(meet => {\r\n                return meet.meetId === this.state.selectedMeet;\r\n            }),\r\n            meetIndex = raceMeets.indexOf(meet);\r\n\r\n        // Update the placings for the selected meet/race\r\n        meet.races[event.target.getAttribute('data-race') - 1].status = event.target.getAttribute('data-status');\r\n\r\n        // Insert the updated meet back into the raceMeets array\r\n        raceMeets[meetIndex] = meet;\r\n\r\n        // Send the updated meet to the database\r\n        axios.put(this.databaseURL + '/racemeets/' + this.state.selectedMeet, meet);\r\n\r\n        // Update the local state with the updated raceMeets array\r\n        this.setState({\r\n            raceMeets: raceMeets\r\n        });\r\n    };\r\n\r\n    /* When the user selects a scratching on the Admin page, save to the database and update the state */\r\n    handleSaveScratchings = (modifiedRace, modifiedScratchings) => {\r\n        let raceMeets = this.state.raceMeets,\r\n            meet = raceMeets.find(meet => {\r\n                return meet.meetId === this.state.selectedMeet;\r\n            }),\r\n            meetIndex = raceMeets.indexOf(meet);\r\n\r\n        // Update the placings for the selected meet/race\r\n        meet.races[modifiedRace - 1].scratchings = modifiedScratchings;\r\n\r\n        // Insert the updated meet back into the raceMeets array\r\n        raceMeets[meetIndex] = meet;\r\n\r\n        // Send the updated meet to the database\r\n        axios.put(this.databaseURL + '/racemeets/' + this.state.selectedMeet, meet);\r\n\r\n        // Update the local state with the updated raceMeets array\r\n        this.setState({\r\n            raceMeets: raceMeets\r\n        });\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        if (this.state.raceMeets.length) {\r\n            return (\r\n                // React Router routes to a particular component based on the URL path\r\n                <Router>\r\n                    <ScrollToTop>\r\n                        <Switch>\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'login'}\r\n                                render={routeProps => (\r\n                                    <Login\r\n                                        {...routeProps}\r\n                                        path={this.path}\r\n                                        punters={this.state.punters}\r\n                                        handleLogin={this.handleLogin}\r\n                                        authenticated={this.state.authenticated}\r\n                                        user={this.state.user}\r\n                                        isAdmin={this.state.isAdmin}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'admin'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated && this.state.isAdmin ? (\r\n                                        <Admin\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            raceMeets={this.state.raceMeets}\r\n                                            punters={this.state.punters}\r\n                                            selectedMeet={this.state.selectedMeet}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            onMeetChange={this.handleMeetSelect}\r\n                                            onPlacingsChange={this.handleSavePlacings}\r\n                                            onStatusChange={this.handleSaveStatus}\r\n                                            onScratchingChange={this.handleSaveScratchings}\r\n                                            user={this.state.user}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'information'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated ? (\r\n                                        <Information\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            punters={this.state.punters}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            authenticated={this.state.authenticated}\r\n                                            user={this.state.user}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'statistics'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated ? (\r\n                                        <Statistics\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            raceMeets={this.state.raceMeets}\r\n                                            punters={this.state.punters}\r\n                                            tips={this.state.tips}\r\n                                            selectedTab={this.state.selectedTab}\r\n                                            onTabSelect={this.handleTabSelect}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            authenticated={this.state.authenticated}\r\n                                            user={this.state.user}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'tips'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated ? (\r\n                                        <Tips\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            raceMeets={this.state.raceMeets}\r\n                                            tips={this.state.tips}\r\n                                            punters={this.state.punters}\r\n                                            selectedMeet={this.state.selectedMeet}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            onMeetChange={this.handleMeetSelect}\r\n                                            onSelectionChange={this.handleSaveTips}\r\n                                            user={this.state.user}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'results'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated ? (\r\n                                        <Results\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            raceMeets={this.state.raceMeets}\r\n                                            punters={this.state.punters}\r\n                                            tips={this.state.tips}\r\n                                            selectedMeet={this.state.selectedMeet}\r\n                                            selectedRace={this.state.selectedRace}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            onMeetChange={this.handleMeetSelect}\r\n                                            onRaceChange={this.handleRaceSelect}\r\n                                            user={this.state.user}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path={this.path + 'leaderboard'}\r\n                                render={routeProps =>\r\n                                    this.state.authenticated ? (\r\n                                        <Leaderboard\r\n                                            {...routeProps}\r\n                                            path={this.path}\r\n                                            raceMeets={this.state.raceMeets}\r\n                                            punters={this.state.punters}\r\n                                            tips={this.state.tips}\r\n                                            user={this.state.user}\r\n                                            onReloadData={this.handleReloadData}\r\n                                            loadingData={this.state.loadingData}\r\n                                            isAdmin={this.state.isAdmin}\r\n                                        />\r\n                                    ) : (\r\n                                        <Redirect to={this.path + 'login'} />\r\n                                    )\r\n                                }\r\n                            />\r\n                            <Redirect from=\"/\" to={this.path + 'results'} />\r\n                        </Switch>\r\n                    </ScrollToTop>\r\n                </Router>\r\n            );\r\n        } else if (this.state.appLoadFailed) {\r\n            return (\r\n                <div className=\"timeout-msg\">\r\n                    <img src=\"steve.gif\" alt=\"Steve Harvey - What's wrong withchu?\" />\r\n                    <p>It seems like something has gone wrong with the database...</p>\r\n                    <p>Curse you free Heroku account!</p>\r\n                    <p>*shakes fist at the sky*</p>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"loading-msg\">\r\n                    <img src=\"cat.gif\" alt=\"Cat swinging its tail\" />\r\n                    <div className=\"text\">LOADING...</div>\r\n                    <div>{this.state.counter} seconds</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Use to time functions\r\n\r\n//var t0 = performance.now(); <- Put before code to be timed\r\n//var t1 = performance.now(); <- Put after code to be timed\r\n//console.log(\"While loops took \" + (t1 - t0) + \" milliseconds.\");\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport initReactFastclick from 'react-fastclick';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n// Initialise the FastClick plugin to remove the 300ms click delay on some mobile devices\r\ninitReactFastclick();\r\n\r\n// Render the app to the 'root' <div>\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}