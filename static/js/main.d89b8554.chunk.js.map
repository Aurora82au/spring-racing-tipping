{"version":3,"sources":["components/ErrorHandling.jsx","components/ScrollToTop.jsx","helpers/utilities.js","components/Button.jsx","components/CompetitionSelector.jsx","components/TopMenu.jsx","components/Header.jsx","components/LabelAndInput.jsx","components/LabelAndSelectBox.jsx","components/ErrorMessage.jsx","pages/Login.jsx","components/MeetSelector.jsx","components/BottomMenu.jsx","pages/Admin.jsx","pages/Statistics.jsx","pages/Information.jsx","components/TipsRaceList.jsx","pages/Tips.jsx","components/ResultsTip.jsx","components/ResultsRace.jsx","components/ResultsMeet.jsx","pages/Results.jsx","components/Podium.jsx","pages/Leaderboard.jsx","App.js","registerServiceWorker.js","index.js"],"names":["ErrorHandling","props","state","hasError","error","info","this","setState","children","Component","ScrollToTop","prevProps","location","window","scrollTo","withRouter","logOut","localStorage","clear","href","generateId","length","min","max","i","Math","floor","parseInt","random","getPunterCompetitions","competitions","punter","filter","competition","punters","includes","_id","Button","id","className","classes","type","attributes","onClick","disabled","text","PureComponent","CompetitionSelector","selector","options","l","push","key","value","name","selectedCompetition","unshift","defaultValue","onChange","handleCompetitionSelect","linkClass","TopMenu","handlePicClick","htmlTag","document","documentElement","open","classList","remove","add","event","nextProps","nextState","menuClass","punterComps","user","src","image","alt","isAdmin","to","path","Header","handleShowLogOutOverlay","showLogOut","handleHideLogOutOverlay","page","onReloadData","LabelAndInput","handleChange","target","handleFocus","focused","handleBlur","labelClass","labelClasses","htmlFor","labelText","inputClasses","onFocus","onBlur","LabelAndSelectBox","handleSelect","ErrorMessage","Login","handlePunterSelect","wrongPassword","handlePasswordChange","password","handleLoginClick","allPunters","find","handleLogin","history","sorted","sort","a","b","first","localeCompare","len","splice","punterOptions","map","last","errorClass","MeetSelector","split","date","meets","selectedMeetId","meet","BottomMenu","activeClassName","Admin","setStateData","propsRaces","propsSelectedMeet","stateRaces","races","meetRaces","race","meetId","j","placings","scratchings","handlePlacingChange","raceChanged","placingChanged","Number","isNaN","second","third","handleSaveClick","getAttribute","onPlacingsChange","handleScratchingClick","modifiedRaceIndex","modifiedScratchings","contains","index","indexOf","innerText","onScratchingChange","number","selectedMeet","raceList","selections","data-race","data-race-id","status","onStatusChange","onMeetChange","App","handleTabClick","tab","tabSelected","onTabSelect","findTips","punterId","raceId","tips","findPunter","findPuntersStats","stats","findPuntersStatsMeet","puntersStats","calculateStats","c","puntersStatsMeet","raceScore","meetsArray","score","Date","parse","trifectas","quinellas","firsts","seconds","thirds","x","createStatArray","dataArray","arrayToUpdate","isMeets","position","tempArray","trifectaArray","quinellaArray","firstArray","secondArray","thirdArray","count","scores","dangerouslySetInnerHTML","__html","display","selectedTab","tabBtn1Class","tabBtn2Class","tab1Class","tab2Class","meetArray","meetScoresHTML","otherScoresHTML","Information","TipsRaceList","setTips","passedProps","noOfRaces","databaseId","handleSelectionClick","modifiedRace","tip","onSelectionChange","generateList","data-race-no","time","raceListClass","raceDay","setHours","setMinutes","Tips","selectedRace","ResultsTip","self","tipPunter","firstClass","secondClass","thirdClass","ResultsRace","statusClass","statusName","punterTips","distance","ResultsMeet","raceSelectors","raceTips","meetTips","raceTip","Results","onRaceChange","Podium","points","Leaderboard","findPuntersPoints","calculatePoints","puntersPoints","temp","gameAccountPoints","gameAccounts","gameAccountsList","loserList","userId","userObj","authenticated","setItem","getUserCompetitions","competitionId","toString","admins","setData","handleReloadData","btn","parentElement","then","handleMeetSelect","firstRace","chosenMeet","handleRaceSelect","handleTabSelect","handleSaveTips","modifiedTips","useJSON","newTip","fetch","backendURL","method","cache","mode","headers","body","JSON","stringify","catch","console","handleSavePlacings","modifiedRaceId","modifiedPlacings","raceIndex","updateRace","handleSaveStatus","handleSaveScratchings","dataURL","puntersResponse","json","log","selectedUser","competitionsResponse","meetsDataURL","startDate","racesDataURL","tipsDataURL","meetsResponse","racesResponse","tipsResponse","getItem","getCompetitionPunters","getAllPunters","result","selectedCompetitionId","slice","exact","render","routeProps","from","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initReactFastclick","ReactDOM","getElementById","URL","process","origin","addEventListener","response","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6jBAEqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,UAAS,SAAAL,GAAK,O,yVAAA,IAAUA,EAAV,CAAiBC,UAAU,S,+BAI9C,OAAIG,KAAKJ,MAAMC,SACJ,6DAEAG,KAAKL,MAAMO,a,GAhBaC,aCErCC,E,2LACiBC,GACXL,KAAKL,MAAMW,WAAaD,EAAUC,UAClCC,OAAOC,SAAS,EAAG,K,+BAKvB,OAAOR,KAAKL,MAAMO,a,GARAC,aAYXM,cAAWL,GCbnB,SAASM,IACZC,aAAaC,QACbL,OAAOD,SAASO,KAAO,SAIpB,SAASC,EAAWC,GAClBA,IAAUA,EAAS,GAIxB,IAHA,IAAIC,EAAM,IACNC,EAAM,IAEDC,EAAI,EAAGA,EAAIH,EAAS,EAAGG,IAC5BF,GAAO,IACPC,GAAO,IAGX,OAAOE,KAAKC,MAAMC,SAASL,GAAOG,KAAKG,SAAWD,SAASJ,IAIxD,SAASM,EAAsBC,EAAcC,GAChD,OAAKD,GAAiBC,EAEfD,EAAaE,QAAO,SAAAC,GACvB,OAAOA,EAAYC,QAAQC,SAASJ,EAAOK,QAHR,G,ICtBtBC,E,iLAEb,OACI,0CAAQC,GAAIhC,KAAKL,MAAMqC,GACfC,UAAWjC,KAAKL,MAAMuC,QACtBC,KAAMnC,KAAKL,MAAMwC,MACbnC,KAAKL,MAAMyC,WAHvB,CAIQC,QAASrC,KAAKL,MAAM0C,QACpBC,SAAUtC,KAAKL,MAAM2C,WACxBtC,KAAKL,MAAM4C,U,GATQC,iBCCfC,E,iLAEb,IAEIC,EAFElB,EAAexB,KAAKL,MAAM6B,aAC5BmB,EAAU,GAGd,GAAInB,EAAaT,OAAQ,CAErB,GAA4B,IAAxBS,EAAaT,OACb,OACI,yBAAKkB,UAAU,wBACX,uBAAGA,UAAU,SAAb,oDACA,uBAAGA,UAAU,SAAb,oDAKP,GAAIT,EAAaT,OAAS,EAAG,CAC9B,IAAK,IAAIG,EAAI,EAAG0B,EAAIpB,EAAaT,OAAQG,EAAI0B,EAAG1B,IAC5CyB,EAAQE,KACJ,4BAAQC,IAAKtB,EAAaN,GAAGY,IAAKiB,MAAOvB,EAAaN,GAAGY,KACpDN,EAAaN,GAAG8B,OAMxBhD,KAAKL,MAAMsD,qBACZN,EAAQO,QACJ,4BAAQJ,IAAI,IAAIC,MAAM,IAAtB,6BAMRL,EACI,yBAAKT,UAAU,YACX,4BAAQkB,aAAcnD,KAAKL,MAAMsD,oBAAqBG,SAAUpD,KAAKL,MAAM0D,yBACtEV,GAEL,0BAAMV,UAAU,qBAKvB,CAGD,IAFA,IAAIqB,EAEKpC,EAAI,EAAG0B,EAAIpB,EAAaT,OAAQG,EAAI0B,EAAG1B,IAC5CoC,EAAY,OACRtD,KAAKL,MAAMsD,qBAAuBjD,KAAKL,MAAMsD,oBAAoBnB,MAAQN,EAAaN,GAAGY,MACzFwB,GAAa,aAEjBX,EAAQE,KACJ,wBAAIC,IAAKtB,EAAaN,GAAGY,KACrB,kBAAC,EAAD,CACII,QAASoB,EACTnB,KAAK,SACLC,WAAY,CAAC,aAAcZ,EAAaN,GAAGY,KAC3CO,QAASrC,KAAKL,MAAM0D,wBACpBd,KAAMf,EAAaN,GAAG8B,SAMtCN,EACI,4BACKC,GAKb,OACI,yBAAKV,UAAU,wBACX,4DACCS,GAKT,OAAO,kC,GAjF8BF,iBCI5Be,E,YACjB,WAAY5D,GAAQ,IAAD,8BACf,4CAAMA,KAYV6D,eAAiB,WAEb,IAAMC,EAAUC,SAASC,gBACrB,EAAK/D,MAAMgE,KACXH,EAAQI,UAAUC,OAAO,aAGzBL,EAAQI,UAAUE,IAAI,aAG1B,EAAK9D,SAAS,CACV2D,MAAO,EAAKhE,MAAMgE,QAxBP,EA4BnBP,wBAA0B,SAAAW,GACtB,EAAKrE,MAAM0D,wBAAwBW,GAEnC,EAAKR,kBA7BL,EAAK5D,MAAQ,CACTgE,MAAM,GAHK,E,mFASGK,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,+BAyBxD,IAAMuE,EAAYnE,KAAKJ,MAAMgE,KAAO,gBAAkB,WAChDQ,EAAc7C,EAAsBvB,KAAKL,MAAM6B,aAAcxB,KAAKL,MAAM0E,MAE9E,OACI,yBAAKpC,UAAWkC,GAERnE,KAAKL,MAAM0E,MACX,yBAAKpC,UAAU,wBAAwBI,QAASrC,KAAKwD,gBACjD,yBAAKvB,UAAU,cAAcqC,IAAK,QAAUtE,KAAKL,MAAM0E,KAAKE,MAAOC,IAAI,gBACvE,0BAAMvC,UAAU,mBAGxB,yBAAKA,UAAU,UAEPjC,KAAKL,MAAM8E,SACX,kBAAC,IAAD,CAASC,GAAI1E,KAAKL,MAAMgF,KAAO,SAAS,0BAAM1C,UAAU,eAAxD,kBAEJ,kBAAC,IAAD,CAASyC,GAAI1E,KAAKL,MAAMgF,KAAO,eAAe,0BAAM1C,UAAU,aAAhB,KAA9C,eACA,kBAAC,EAAD,CACIC,QAAQ,aACRC,KAAK,SACLE,QAAS3B,EACT4B,UAAU,EACVC,KAAK,aAIT6B,EAAYrD,OAAS,GACrB,yBAAKkB,UAAU,UACX,kBAAC,EAAD,CACIT,aAAcxB,KAAKL,MAAM6B,aACzByB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKqD,gC,GApErBlD,aCJhByE,E,YACjB,WAAYjF,GAAQ,IAAD,8BACf,4CAAMA,KAaVkF,wBAA0B,WACtB,EAAK5E,SAAS,CACV6E,YAAY,KAhBD,EAqBnBC,wBAA0B,WACtB,EAAK9E,SAAS,CACV6E,YAAY,KArBhB,EAAKlF,MAAQ,CACTkF,YAAY,GAHD,E,mFASGb,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,+BAmBxD,OACI,oCAG4B,WAApBI,KAAKL,MAAMqF,MACX,kBAAC,EAAD,CACIL,KAAM3E,KAAKL,MAAMgF,KACjBN,KAAMrE,KAAKL,MAAM0E,KACjB7C,aAAcxB,KAAKL,MAAM6B,aACzByB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpCoB,QAASzE,KAAKL,MAAM8E,UAKJ,WAApBzE,KAAKL,MAAMqF,MACX,4BAAQ/C,UAAU,aAAaI,QAASrC,KAAKL,MAAMsF,cAC/C,0BAAMhD,UAAU,iBAGxB,qDAC0B,yBAAKqC,IAAI,YAAYE,IAAI,eAC/C,0BAAMvC,UAAU,QAAhB,SAIoB,WAApBjC,KAAKL,MAAMqF,MAAqBhF,KAAKL,MAAMsD,qBAC3C,0BAAMhB,UAAU,aAAajC,KAAKL,MAAMsD,oBAAoBD,MAEhE,4BAAKhD,KAAKL,MAAMqF,MAChB,2BAAIhF,KAAKL,MAAM4C,W,GA7DKpC,aCAf+E,E,YACjB,WAAYvF,GAAQ,IAAD,8BACf,4CAAMA,KAcVwF,aAAe,SAAAnB,GACX,EAAK/D,SAAS,CACV8C,MAAOiB,EAAMoB,OAAOrC,QAExB,EAAKpD,MAAMwF,aAAanB,EAAMoB,OAAOrC,QAnBtB,EAuBnBsC,YAAc,SAAArB,GACV,EAAK/D,SAAS,CACVqF,SAAS,KAzBE,EA8BnBC,WAAa,SAAAvB,GACT,EAAK/D,SAAS,CACVqF,SAAS,KA9Bb,EAAK1F,MAAQ,CACTmD,MAAO,GACPuC,SAAS,GAJE,E,mFAUGrB,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,+BA0BxD,IAAMoC,EAAKlB,EAAW,GAGlB0E,EAAaxF,KAAKL,MAAM8F,cAAgB,GAG5C,OAFAD,GAAexF,KAAKJ,MAAM0F,SAAgC,KAArBtF,KAAKJ,MAAMmD,MAAgB,gBAAkB,QAG9E,oCACI,2BAAO2C,QAAS1D,EAAIC,UAAWuD,GAC1BxF,KAAKL,MAAMgG,WAEhB,2BAAO3D,GAAIA,EACPC,UAAWjC,KAAKL,MAAMiG,aACtBzD,KAAMnC,KAAKL,MAAMwC,KACjBY,MAAO/C,KAAKJ,MAAMmD,MAClB8C,QAAS7F,KAAKqF,YACdS,OAAQ9F,KAAKuF,WACbnC,SAAUpD,KAAKmF,aACf7C,SAAUtC,KAAKL,MAAM2C,gB,GAxDEnC,aCAtB4F,E,iLAEb,IAAM/D,EAAKlB,EAAW,GAEtB,OACI,oCACI,2BAAO4E,QAAS1D,EAAIC,UAAWjC,KAAKL,MAAM8F,cACrCzF,KAAKL,MAAMgG,WAEhB,yBAAK1D,UAAU,YACX,4BACID,GAAIA,EACJe,MAAO/C,KAAKL,MAAMoD,MAClBK,SAAUpD,KAAKL,MAAMqG,aACrB1D,SAAUtC,KAAKL,MAAM2C,UAEpBtC,KAAKL,MAAMgD,SAEhB,0BAAMV,UAAU,sB,GAlBWO,iBCD1ByD,E,iLAEb,OACI,yBAAKhE,UAAWjC,KAAKL,MAAMuC,SAAUlC,KAAKL,MAAM4C,U,GAHlBC,iBCQrB0D,E,YACjB,WAAYvG,GAAQ,IAAD,8BACf,4CAAMA,KA+BVwG,mBAAqB,SAAAnC,GACjB,EAAK/D,SAAS,CACVoE,KAAMhD,SAAS2C,EAAMoB,OAAOrC,MAAO,IACnCqD,eAAe,KAnCJ,EAwCnBC,qBAAuB,SAAAtD,GACnB,EAAK9C,SAAS,CACVqG,SAAUvD,EACVqD,eAAe,KA3CJ,EAiDnBG,iBAAmB,WACA,EAAK5G,MAAM6G,WAAWC,MAAK,SAAAhF,GACtC,OAAOA,EAAOK,MAAQ,EAAKlC,MAAMyE,QAG1BiC,WAAa,EAAK1G,MAAM0G,UAC/B,EAAKrG,SAAS,CACVmG,eAAe,IAGnB,EAAKzG,MAAM+G,YAAY,EAAK9G,MAAMyE,OAElC,EAAKpE,SAAS,CACVmG,eAAe,KA9DR,EAmEnB/C,wBAA0B,SAAAW,GACtB,EAAKrE,MAAM0D,wBAAwBW,GAEnC,EAAKrE,MAAMgH,QAAQ9D,KAAnB,aApEA,EAAKjD,MAAQ,CACTyE,KAAM,KACNiC,SAAU,GACVF,eAAe,EACfhC,YAAa,IANF,E,mFAYGH,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,yCAGzCS,GACf,GAAIL,KAAKL,MAAM6B,eAAiBnB,EAAUmB,aAAc,CAEpD,IAAM4C,EAAc7C,EAAsBvB,KAAKL,MAAM6B,aAAcxB,KAAKL,MAAM0E,MACnD,IAAvBD,EAAYrD,OACZf,KAAKqD,wBAAwBe,EAAY,IAGzCpE,KAAKC,SAAS,CACVmE,YAAaA,O,+BAwDzB,IALA,IAAIwC,EAAS5G,KAAKL,MAAM6G,WAAWK,MAAK,SAACC,EAAGC,GACxC,OAAOD,EAAE9D,KAAKgE,MAAMC,cAAcF,EAAE/D,KAAKgE,UAIpC9F,EAAI,EAAGgG,EAAMN,EAAO7F,OAAQG,EAAIgG,EAAKhG,IACb,QAAzB0F,EAAO1F,GAAG8B,KAAKgE,OAA4C,WAAzBJ,EAAO1F,GAAG8B,KAAKgE,OAA+C,YAAzBJ,EAAO1F,GAAG8B,KAAKgE,OACtFJ,EAAO/D,KAAK+D,EAAOO,OAAOjG,EAAG,GAAG,IAKxC,IAAIkG,EAAgBR,EAAOS,KAAI,SAAA5F,GAC3B,OACI,4BAAQqB,IAAKrB,EAAOK,IAAKiB,MAAOtB,EAAOK,KAClCL,EAAOuB,KAAKgE,MADjB,IACyBvF,EAAOuB,KAAKsE,SAM7CF,EAAclE,QACV,4BAAQJ,IAAI,IAAIC,MAAM,IAAtB,sBAMJ,IAAMwE,EAAavH,KAAKJ,MAAMwG,cAAgB,QAAU,aAGxD,OACI,yBAAKnE,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,SACLxD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBI,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,wFAET,kBAAC,EAAD,CACIkD,aAAa,UACbE,UAAU,kBACV5C,MAAO/C,KAAKL,MAAM0E,KAAOrE,KAAKL,MAAM0E,KAAKvC,IAAM9B,KAAKJ,MAAMyE,KAAOrE,KAAKJ,MAAMyE,KAAO,GACnF2B,aAAchG,KAAKmG,mBACnB7D,SAAUtC,KAAKL,MAAM0E,KACrB1B,QAASyE,KAGRpH,KAAKL,MAAM0E,MACZ,kBAAC,EAAD,CACIsB,UAAU,WACVC,aAAa,WACbzD,KAAK,WACLY,MAAO/C,KAAKL,MAAM0E,KAAOrE,KAAKL,MAAM0E,KAAKiC,SAAW,GACpDnB,aAAcnF,KAAKqG,qBACnB/D,SAAUtC,KAAKL,MAAM0E,OAG7B,kBAAC,EAAD,CACInC,QAAQ,MACRC,KAAK,SACLE,QAASrC,KAAKL,MAAM0E,KAAO3D,EAASV,KAAKuG,iBACzCjE,UAAU,EACVC,KAAMvC,KAAKL,MAAM0E,KAAO,UAAY,WAExC,kBAAC,EAAD,CAAcnC,QAASqF,EAAYhF,KAAK,wDAEpCvC,KAAKL,MAAM0E,MACXrE,KAAKJ,MAAMwE,YAAYrD,OAAS,GAChC,kBAAC,EAAD,CACIS,aAAcxB,KAAKJ,MAAMwE,YACzBf,wBAAyBrD,KAAKqD,+B,GArJnBlD,aCRdqH,E,8LAEKvD,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAM5B,IAKQ8H,EACAC,EANFC,EAAQ3H,KAAKL,MAAMgI,MAAMd,MAAK,SAACC,EAAGC,GACpC,OAAOD,EAAEY,KAAKT,cAAcF,EAAEW,SAGlC,OAAIC,GAAS3H,KAAKL,MAAMiI,eAKhB,yBAAK3F,UAAU,YACX,4BAAQc,MAAO/C,KAAKL,MAAMiI,eAAgBxE,SAAUpD,KAAKL,MAAMyD,UAC1DuE,EAAMN,KAAI,SAAAQ,GAGP,OAFAJ,EAAQI,EAAKH,KAAKD,MAAM,KACxBC,EAAI,UAAMD,EAAM,GAAZ,YAAkBA,EAAM,IAExB,4BAAQ3E,IAAK+E,EAAK/F,IAAKiB,MAAO8E,EAAK/F,KAC9B+F,EAAK7E,KADV,KACkB0E,EADlB,SAMZ,0BAAMzF,UAAU,iBAKjB,kC,GAnCuB9B,aCCrB2H,E,iLAEb,OACI,yBAAK7F,UAAU,eACX,kBAAC,IAAD,CAASyC,GAAI1E,KAAKL,MAAMgF,KAAO,aAAcoD,gBAAgB,YAAW,yBAAK9F,UAAU,wBAAvF,cACA,kBAAC,IAAD,CAASyC,GAAI1E,KAAKL,MAAMgF,KAAO,OAAQoD,gBAAgB,YAAW,yBAAK9F,UAAU,qBAAjF,QACA,kBAAC,IAAD,CAASyC,GAAI1E,KAAKL,MAAMgF,KAAO,UAAWoD,gBAAgB,YAAW,yBAAK9F,UAAU,wBAApF,WACA,kBAAC,IAAD,CAASyC,GAAI1E,KAAKL,MAAMgF,KAAO,cAAeoD,gBAAgB,YAAW,yBAAK9F,UAAU,2BAAxF,oB,GAPwBO,iBCGnBwF,E,YACjB,WAAYrI,GAAQ,IAAD,8BACf,4CAAMA,KAoHVsI,aAAe,SAACC,EAAYC,GAMxB,IALA,IAAMC,EAAa,EAAKxI,MAAMyI,MACxBC,EAAYJ,EAAWxG,QAAO,SAAA6G,GAChC,OAAOA,EAAKC,SAAWL,KAGlBjH,EAAI,EAAGuH,EAAIH,EAAUvH,OAAQG,EAAIuH,EAAGvH,IACzCkH,EAAWlH,GAAGwH,SAAWJ,EAAUpH,GAAGwH,SACtCN,EAAWlH,GAAGyH,YAAcL,EAAUpH,GAAGyH,YAG7C,EAAK1I,SAAS,CACVoI,MAAOD,KAjII,EAsInBQ,oBAAsB,SAAA5E,GAClB,IAAMqE,EAAQ,EAAKzI,MAAMyI,MACnBQ,EAAc7E,EAAMoB,OAAOpD,GAAGyF,MAAM,KAAK,GACzCqB,EAAiB9E,EAAMoB,OAAOpD,GAAGyF,MAAM,KAAK,GAC9CiB,EAAWL,EAAMQ,EAAc,GAAGH,SAChC3F,EAASgG,OAAOC,MAAM3H,SAAS2C,EAAMoB,OAAOrC,QAAyC,EAA/B1B,SAAS2C,EAAMoB,OAAOrC,OAE3D,UAAnB+F,IACAJ,EAAS1B,MAAQjE,GAEE,WAAnB+F,IACAJ,EAASO,OAASlG,GAEC,UAAnB+F,IACAJ,EAASQ,MAAQnG,GAGrB,EAAK9C,SAAS,CACVoI,MAAOA,KAxJI,EA8JnBc,gBAAkB,SAAAnF,GACd,IAAM0E,EAAW,EAAK9I,MAAMyI,MAAMrE,EAAMoB,OAAOgE,aAAa,aAAe,GAAGV,SAC9E,EAAK/I,MAAM0J,iBAAiBhI,SAAS2C,EAAMoB,OAAOgE,aAAa,iBAAkBV,IAhKlE,EAqKnBY,sBAAwB,SAAAtF,GACpB,IAAMqE,EAAQ,EAAKzI,MAAMyI,MACnBkB,EAAoBlI,SAAS2C,EAAMoB,OAAOgE,aAAa,aAAc,IAAM,EAC7EI,EAAsBnB,EAAMkB,GAAmBZ,YAGnD,GAAI3E,EAAMoB,OAAOvB,UAAU4F,SAAS,aAAc,CAC9C,IAAIC,EAAQF,EAAoBG,QAAQtI,SAAS2C,EAAMoB,OAAOwE,UAAW,KACrEF,GAAS,GACTF,EAAoBrC,OAAOuC,EAAO,QAGtCF,EAAoB3G,KAAKxB,SAAS2C,EAAMoB,OAAOwE,UAAW,KAE9DvB,EAAMkB,GAAmBZ,YAAca,EACvC,EAAKvJ,SAAS,CACVoI,MAAOA,IAEX,EAAK1I,MAAMkK,mBAAmBxI,SAAS2C,EAAMoB,OAAOgE,aAAa,gBAAiB,IAAKI,IArLvF,EAAK5J,MAAQ,CACTyI,MAAO,CACH,CACIyB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,EACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,IAEjB,CACImB,OAAQ,GACRpB,SAAU,CACN1B,MAAO,GACPiC,OAAQ,GACRC,MAAO,IAEXP,YAAa,MA5FV,E,mFAoGG1E,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,0CAKxDI,KAAKiI,aAAajI,KAAKL,MAAM0I,MAAOrI,KAAKL,MAAMoK,gB,yCAIhC1J,GACXL,KAAKL,QAAUU,GACfL,KAAKiI,aAAajI,KAAKL,MAAM0I,MAAOrI,KAAKL,MAAMoK,gB,+BAoFnD,IATM,IAMF9H,EANC,OACCqG,EAAYtI,KAAKL,MAAM0I,MAAM3G,QAAO,SAAA6G,GACtC,OAAOA,EAAKC,SAAW,EAAK7I,MAAMoK,gBAElCC,EAAW,GACXC,EAAa,GAIR/I,EAAI,EAAG0B,EAAI0F,EAAUvH,OAAQG,EAAI0B,EAAG1B,IAAK,CAC9C+I,EAAa,GAGb,IAAK,IAAIxB,EAAI,EAAGA,EAAI,GAAIA,IACpBxG,EAAY,YACRjC,KAAKJ,MAAMyI,MAAMnH,GAAGyH,YAAY9G,SAAS4G,EAAI,KAC7CxG,GAAa,cAGjBgI,EAAWpH,KACP,yBAAKC,IAAK2F,EAAGxG,UAAWA,EAAWiI,YAAWhJ,EAAI,EAAGiJ,eAAc7B,EAAUpH,GAAGY,IAAKO,QAASrC,KAAKsJ,uBAC9Fb,EAAI,IAMjBuB,EAASnH,KACL,yBAAKC,IAAK5B,EAAGe,UAAU,aACnB,yBAAKA,UAAU,WACX,0BAAMA,UAAU,QAAhB,QAA6BqG,EAAUpH,GAAG4I,QAC1C,0BAAM7H,UAAU,QAAhB,YAAqCqG,EAAUpH,GAAG8B,OAEtD,yBAAKf,UAAU,YACX,6BACI,2BAAOyD,QAAS,SAAWxE,EAAI,GAAK,UAApC,OACA,2BACIc,GAAI,SAAWd,EAAI,GAAK,SACxBiB,KAAK,MACLY,MAA8C,IAAvC/C,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAAS1B,MAAchH,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAAS1B,MAAQ,GACvF5D,SAAUpD,KAAK4I,uBAGvB,6BACI,2BAAOlD,QAAS,SAAWxE,EAAI,GAAK,WAApC,OACA,2BACIc,GAAI,SAAWd,EAAI,GAAK,UACxBiB,KAAK,MACLY,MAA+C,IAAxC/C,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAASO,OAAejJ,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAASO,OAAS,GACzF7F,SAAUpD,KAAK4I,uBAGvB,6BACI,2BAAOlD,QAAS,SAAWxE,EAAI,GAAK,UAApC,OACA,2BACIc,GAAI,SAAWd,EAAI,GAAK,SACxBiB,KAAK,MACLY,MAA8C,IAAvC/C,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAASQ,MAAclJ,KAAKJ,MAAMyI,MAAMnH,GAAGwH,SAASQ,MAAQ,GACvF9F,SAAUpD,KAAK4I,uBAGvB,4BAAQ3G,UAAU,WAAWE,KAAK,SAAS+H,YAAWhJ,EAAI,EAAGiJ,eAAc7B,EAAUpH,GAAGY,IAAKO,QAASrC,KAAKmJ,iBAA3G,SAIJ,yBAAKlH,UAAU,cAAf,mBACA,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CACIC,QAAiC,IAAxBoG,EAAUpH,GAAGkJ,OAAe,mCAAqC,0BAC1EjI,KAAK,SACLC,WAAY,CACR,YAAapC,KAAKL,MAAMoK,aACxB,YAAa7I,EAAI,EACjB,eAAgBoH,EAAUpH,GAAGY,IAC7B,cAAe,GAEnBO,QAASrC,KAAKL,MAAM0K,eACpB9H,KAAK,gBAET,kBAAC,EAAD,CACIL,QAAiC,IAAxBoG,EAAUpH,GAAGkJ,OAAe,mCAAqC,0BAC1EjI,KAAK,SACLC,WAAY,CACR,YAAapC,KAAKL,MAAMoK,aACxB,YAAa7I,EAAI,EACjB,eAAgBoH,EAAUpH,GAAGY,IAC7B,cAAe,GAEnBO,QAASrC,KAAKL,MAAM0K,eACpB9H,KAAK,kBACT,kBAAC,EAAD,CACIL,QAAiC,IAAxBoG,EAAUpH,GAAGkJ,OAAe,mCAAqC,0BAC1EjI,KAAK,SACLC,WAAY,CACR,YAAapC,KAAKL,MAAMoK,aACxB,YAAa7I,EAAI,EACjB,eAAgBoH,EAAUpH,GAAGY,IAC7B,cAAe,GAEnBO,QAASrC,KAAKL,MAAM0K,eACpB9H,KAAK,WACT,kBAAC,EAAD,CACIL,QAAiC,IAAxBoG,EAAUpH,GAAGkJ,OAAe,mCAAqC,0BAC1EjI,KAAK,SACLC,WAAY,CACR,YAAapC,KAAKL,MAAMoK,aACxB,YAAa7I,EAAI,EACjB,eAAgBoH,EAAUpH,GAAGY,IAC7B,cAAe,GAEnBO,QAASrC,KAAKL,MAAM0K,eACpB9H,KAAK,aAEb,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,cAAf,eACA,yBAAKA,UAAU,cAAcgI,MAM7C,OACI,yBAAKhI,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,iBACLL,KAAM3E,KAAKL,MAAMgF,KACjBnD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,qIAET,kBAAC,EAAD,CAAcoF,MAAO3H,KAAKL,MAAMgI,MAAOC,eAAgB5H,KAAKL,MAAMoK,aAAc3G,SAAUpD,KAAKL,MAAM2K,eACrG,yBAAKrI,UAAU,iBAAiB+H,GAChC,kBAAC,EAAD,CAAYrF,KAAM3E,KAAKL,MAAMgF,Y,GApUVxE,a,6jBCFdoK,E,YACjB,WAAY5K,GAAQ,IAAD,8BACf,4CAAMA,KAuBV6K,eAAiB,SAAAxG,GACb,IAAIyG,EAAM,EAENzG,EAAMoB,OAAOvB,UAAU4F,SAAS,SAChCgB,EAAM,GAEV,EAAKxK,SAAS,CACVyK,YAAaD,IAEjB,EAAK9K,MAAMgL,YAAYF,IAjCR,EAqCnBG,SAAW,SAACC,EAAUC,GAClB,OAAO,EAAKnL,MAAMoL,KAAKtE,MAAK,SAAAsE,GACxB,OAAOA,EAAKF,WAAaA,GAAYE,EAAKD,SAAWA,MAvC1C,EA4CnBE,WAAa,SAAAH,GACT,OAAO,EAAKlL,MAAMiC,QAAQ6E,MAAK,SAAAhF,GAC3B,OAAOA,EAAOK,MAAQ+I,MA9CX,EAmDnBI,iBAAmB,SAACC,EAAOL,GACvB,OAAOK,EAAMzE,MAAK,SAAAhF,GACd,OAAOA,EAAOoJ,WAAaA,MArDhB,EA0DnBM,qBAAuB,SAACC,EAAc5C,GAClC,OAAO4C,EAAazD,MAAMlB,MAAK,SAAAoB,GAC3B,OAAOA,EAAKW,SAAWA,MA5DZ,EAiEnB6C,eAAiB,WAab,IAZA,IAIIC,EACA5C,EACAqC,EACAK,EACAG,EACAC,EATAN,EAAQ,GACRO,EAAa,GACb3E,EAAI,EAAKnH,MAAMgI,MAAM5G,OACrBgG,EAAI,EAAKpH,MAAMiC,QAAQb,OASpB+F,KACH2E,EAAW5I,KAAK,CACZ2F,OAAQ,EAAK7I,MAAMgI,MAAMb,GAAGhF,IAC5B4F,KAAM,EAAK/H,MAAMgI,MAAMb,GAAGY,KAC1BgE,MAAO,IAYf,IAPAD,EAAW5E,MAAK,SAACC,EAAGC,GAGhB,OAFc4E,KAAKC,MAAM9E,EAAEY,MACbiE,KAAKC,MAAM7E,EAAEW,SAKxBX,KACHmE,EAAMrI,KAAK,CACPgI,SAAU,EAAKlL,MAAMiC,QAAQmF,GAAGjF,IAChC+J,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,OAAQ,EACRtE,MAAO8D,EAAWpE,KAAI,SAAA6E,GAAC,YAAUA,QAQzC,IAHAnF,EAAI,EAAKpH,MAAMiC,QAAQb,OAGhBgG,KAIH,IAFAuE,EAAI,EAAK3L,MAAM0I,MAAMtH,OAEduK,KAEH5C,EAAW,EAAK/I,MAAM0I,MAAMiD,GAAG5C,UAE/BqC,EAAO,EAAKH,SAAS,EAAKjL,MAAMiC,QAAQmF,GAAGjF,IAAK,EAAKnC,MAAM0I,MAAMiD,GAAGxJ,QAIhE0J,EAAY,EAEZJ,EAAe,EAAKH,iBAAiBC,EAAO,EAAKvL,MAAMiC,QAAQmF,GAAGjF,KAElEyJ,EAAmB,EAAKJ,qBAAqBC,EAAc,EAAKzL,MAAM0I,MAAMiD,GAAG9C,QAG3EuC,EAAKd,WAAWpI,SAAS6G,EAAS1B,SAClCoE,EAAaW,SACbP,GAAa,GAEbT,EAAKd,WAAWpI,SAAS6G,EAASO,UAClCmC,EAAaY,UACbR,GAAa,GAEbT,EAAKd,WAAWpI,SAAS6G,EAASQ,SAClCkC,EAAaa,SACbT,GAAa,GAEC,IAAdA,GACAJ,EAAaS,YAEC,IAAdL,GACAJ,EAAaU,YAGjBP,EAAiBG,OAASF,GAKtC,OAAON,GAzJQ,EA6JnBiB,gBAAkB,SAACC,EAAWC,EAAeC,GACzC,IAOI7K,EACA8K,EACAvJ,EATAwJ,EAAY,GACZC,EAAgB,GAChBC,EAAgB,GAChBC,EAAa,GACbC,EAAc,GACdC,EAAa,GACbC,EAAQ,EAKZ,GAAIR,EAEA,IAAK,IAAIpL,EAAI,EAAG0B,EAAIwJ,EAAUrL,OAAQG,EAAI0B,EAAG1B,IAAK,CAE9CkL,EAAUlL,GAAG6L,OAAOlG,MAAK,SAACC,EAAGC,GACzB,OAAOA,EAAE2E,MAAQ5E,EAAE4E,SAIvB,IAAK,IAAIjD,EAAI,EAAGvB,EAAMkF,EAAUlL,GAAG6L,OAAOhM,OAAQ0H,EAAIvB,EAAKuB,IAEvDhH,EAAS,EAAKuJ,WAAWoB,EAAUlL,GAAG6L,OAAOtE,GAAGoC,UAI5C0B,EADA9D,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EACtB,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBAEA,gBAIf+D,EAAU3J,KACN,yBAAKC,IAAK2F,EAAGxG,UAAU,aACnB,yBAAKA,UAAU,SAAS+K,wBAAyB,CAAEC,OAAQxE,EAAI,EAAI8D,KACnE,yBAAKjI,IAAK,QAAU7C,EAAO8C,MAAOC,IAAI,cAAcvC,UAAU,QAC9D,yBAAKA,UAAU,QAAQR,EAAOuB,KAAKkK,SACnC,yBAAKjL,UAAU,QAAQmK,EAAUlL,GAAG6L,OAAOtE,GAAGiD,SAM1DW,EAAcxJ,KACV,kBAAC,WAAD,CAAUC,IAAK5B,GACX,6BACA,yBAAKe,UAAU,oBAAoBmK,EAAUlL,GAAG8B,MAChD,yBAAKf,UAAU,kBAAkBuK,KAKzCA,EAAY,OAEb,CACH,KAAOM,EAAQ,GAAG,CAEA,IAAVA,GACAN,EAAYC,EACZzJ,EAAO,YACPoJ,EAAUvF,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAE8E,UAAY/E,EAAE+E,cAEV,IAAViB,GACPN,EAAYE,EACZ1J,EAAO,YACPoJ,EAAUvF,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAE+E,UAAYhF,EAAEgF,cAEV,IAAVgB,GACPN,EAAYG,EACZ3J,EAAO,SACPoJ,EAAUvF,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAEgF,OAASjF,EAAEiF,WAEP,IAAVe,GACPN,EAAYI,EACZ5J,EAAO,UACPoJ,EAAUvF,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAEiF,QAAUlF,EAAEkF,aAGzBQ,EAAYK,EACZ7J,EAAO,SACPoJ,EAAUvF,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAEkF,OAASnF,EAAEmF,WAI5B,IAAK,IAAI/K,EAAI,EAAG0B,EAAIwJ,EAAUrL,OAAQG,EAAI0B,EAAG1B,IAEzCO,EAAS,EAAKuJ,WAAWoB,EAAUlL,GAAG2J,UAIlC0B,EADArL,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EACtB,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBAEA,gBAIfsL,EAAU3J,KACN,yBAAKC,IAAG,UAAKgK,GAAL,OAAa5L,GAAKe,UAAU,aAChC,yBAAKA,UAAU,SAAS+K,wBAAyB,CAAEC,OAAQ/L,EAAI,EAAIqL,KACnE,yBAAKjI,IAAK,QAAU7C,EAAO8C,MAAOC,IAAI,cAAcvC,UAAU,QAC9D,yBAAKA,UAAU,QAAQR,EAAOuB,KAAKkK,SACnC,yBAAKjL,UAAU,QAAQmK,EAAUlL,GAAG8B,MAIhD8J,IAIJT,EAAcxJ,KACV,kBAAC,WAAD,CAAUC,IAAI,KACV,yBAAKb,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkBwK,GACjC,6BACA,yBAAKxK,UAAU,oBAAf,aACA,yBAAKA,UAAU,kBAAkByK,GACjC,6BACA,yBAAKzK,UAAU,oBAAf,UACA,yBAAKA,UAAU,kBAAkB0K,GACjC,6BACA,yBAAK1K,UAAU,oBAAf,WACA,yBAAKA,UAAU,kBAAkB2K,GACjC,6BACA,yBAAK3K,UAAU,oBAAf,UACA,yBAAKA,UAAU,kBAAkB4K,OArS7C,EAAKjN,MAAQ,CACT8K,YAAa,GAHF,E,mFASGzG,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,0CAKpDI,KAAKJ,MAAM8K,cAAgB1K,KAAKL,MAAMwN,aACtCnN,KAAKC,SAAS,CACVyK,YAAa1K,KAAKL,MAAMwN,gB,+BA8RhC,IAKIC,EACAC,EACAC,EACAC,EARErC,EAAQlL,KAAKqL,iBACfmC,EAAY,GAEZC,EAAiB,GACjBC,EAAkB,GAOS,IAA3B1N,KAAKJ,MAAM8K,aACX0C,EAAe,2BACfC,EAAe,kBACfC,EAAY,YACZC,EAAY,mBAEZH,EAAe,kBACfC,EAAe,2BACfC,EAAY,iBACZC,EAAY,aAIhB,IAAK,IAAIrM,EAAI,EAAG0B,EAAI5C,KAAKL,MAAMgI,MAAM5G,OAAQG,EAAI0B,EAAG1B,IAChDsM,EAAU3K,KAAK,CACX2F,OAAQxI,KAAKL,MAAMgI,MAAMzG,GAAGY,IAC5BkB,KAAMhD,KAAKL,MAAMgI,MAAMzG,GAAG8B,KAC1B+J,OAAQ,KAKhB,IAlCK,eAkCI7L,EAAO0B,GACZ,IAnCC,eAmCQ6F,EAAOvB,GACAsG,EAAU/G,MAAK,SAAAoB,GACvB,OAAOA,EAAKW,SAAW0C,EAAMhK,GAAGyG,MAAMc,GAAGD,UAEnCuE,OAAOlK,KAAK,CAAEgI,SAAUK,EAAMhK,GAAG2J,SAAUa,MAAOR,EAAMhK,GAAGyG,MAAMc,GAAGiD,SAJzEjD,EAAI,EAAGvB,EAAMgE,EAAMhK,GAAGyG,MAAM5G,OAAQ0H,EAAIvB,EAAKuB,IAAM,EAAnDA,IADJvH,EAAI,EAAG0B,EAAIsI,EAAMnK,OAAQG,EAAI0B,EAAG1B,IAAM,EAAtCA,GAeT,OALAlB,KAAKmM,gBAAgBqB,EAAWC,GAAgB,GAGhDzN,KAAKmM,gBAAgBjB,EAAOwC,GAAiB,GAGzC,yBAAKzL,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,aACLxD,aAAcxB,KAAKL,MAAM6B,aACzBmD,KAAM3E,KAAKL,MAAMgF,KACjBN,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,0IAET,yBAAKN,UAAU,YACX,4BAAQA,UAAWmL,EAAc/K,QAASrC,KAAKwK,gBAA/C,eAGA,4BAAQvI,UAAWoL,EAAchL,QAASrC,KAAKwK,gBAA/C,UAIJ,yBAAKvI,UAAWqL,GAAYG,GAC5B,yBAAKxL,UAAWsL,GAAYG,GAC5B,kBAAC,EAAD,CAAY/I,KAAM3E,KAAKL,MAAMgF,Y,GAvXZxE,aCAZwN,E,8LAEK1J,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAK5B,OACI,yBAAKsC,UAAU,OACX,kBAAC,EAAD,CAAQ+C,KAAK,cACTL,KAAM3E,KAAKL,MAAMgF,KACjBnD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,mKAET,yBAAKN,UAAU,cAAf,mBACA,wLACA,wBAAIA,UAAU,gBACV,4BAAI,0BAAMA,UAAU,mBAApB,UACA,4BAAI,0BAAMA,UAAU,mBAApB,UACA,4BAAI,0BAAMA,UAAU,oBAApB,WACA,4BAAI,0BAAMA,UAAU,kBAApB,UAEJ,yBAAKA,UAAU,cAAf,iBACA,8JACA,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SACX,yBAAKqC,IAAK,mBAAoBE,IAAI,cAAcvC,UAAU,QAC1D,yBAAKA,UAAU,QAAf,YAEJ,yBAAKA,UAAU,SACX,yBAAKqC,IAAK,mBAAoBE,IAAI,cAAcvC,UAAU,QAC1D,yBAAKA,UAAU,QAAf,aAEJ,yBAAKA,UAAU,SACX,yBAAKqC,IAAK,mBAAoBE,IAAI,cAAcvC,UAAU,QAC1D,yBAAKA,UAAU,QAAf,iBAGR,wEACA,qJACA,2JACA,yBAAKA,UAAU,cAAf,QACA,kcACA,yNACA,yHACA,+HACA,yBAAKA,UAAU,cAAf,WACA,8KA5CJ,0JA8CI,4BACI,4BAAI,0BAAMA,UAAU,wBAApB,gBACA,4BAAI,0BAAMA,UAAU,0BAApB,kBACA,4BAAI,0BAAMA,UAAU,uBAApB,WACA,4BAAI,0BAAMA,UAAU,yBAApB,aAEJ,oPACA,6SACA,yBAAKA,UAAU,cAAf,eACA,yUACA,wIACA,yBAAKA,UAAU,cAAf,SACA,wJAA6H,0BAAMA,UAAU,qBAC7I,6LACA,8JACA,yBAAKA,UAAU,cAAf,gBACA,wBAAIA,UAAU,eACV,kQACA,4FACA,wHACA,0FACA,4MACA,uNAEI,6BAFJ,mCAII,4BACI,4BACI,kEACA,6BAAK,wCAAL,4CACA,6BAAK,4CAAL,oHAEJ,4BACI,mDACA,6BAAK,wCAAL,0CACA,6BAAK,4CAAL,oKAEJ,4BACI,mDACA,6BAAK,wCAAL,uDACA,6BAAK,4CAAL,8CAEJ,4BACI,sDACA,6BAAK,wCAAL,wBACA,6BAAK,4CAAL,0PAEJ,4BACI,0CACA,6BAAK,wCAAL,6BACA,6BAAK,4CAAL,mQAEJ,4BACI,sEACA,6BAAK,wCAAL,mCACA,6BAAK,4CAAL,6FAEJ,4BACI,gDACA,6BAAK,wCAAL,mCACA,6BAAK,4CAAL,+JAEJ,4BACI,gDACA,6BAAK,wCAAL,MACA,6BAAK,4CAAL,qBAEJ,4BACI,iDACA,6BAAK,wCAAL,MACA,6BAAK,4CAAL,+BAKhB,iLACA,kBAAC,EAAD,CAAY0C,KAAM3E,KAAKL,MAAMgF,Y,GAnIJxE,aCFpByN,E,YACjB,WAAYjO,GAAQ,IAAD,8BACf,4CAAMA,KAoCVkO,QAAU,SAAAC,GAMN,IALA,IAAMC,EAAYD,EAAYzF,MAAMtH,OAChCgK,EAAO,EAAKnL,MAAMmL,KAClB+B,EAAQ,EAGH5L,EAAI,EAAG0B,EAAIkL,EAAY/C,KAAKhK,OAAQG,EAAI0B,GACzCkK,IAAUiB,EADkC7M,IAIhD,GAAI4M,EAAY/C,KAAK7J,GAAG2J,WAAaiD,EAAYzJ,KAAKvC,IAAK,CACvD,IAAK,IAAI2G,EAAI,EAAGA,EAAIsF,EAAWtF,IAC3B,GAAIqF,EAAYzF,MAAMI,GAAG3G,MAAQgM,EAAY/C,KAAK7J,GAAG4J,OAAQ,CACzDC,EAAK+C,EAAYzF,MAAMI,GAAGqB,OAAS,GAAK,CACpCgB,OAAQgD,EAAYzF,MAAMI,GAAG3G,IAC7BgI,OAAQgE,EAAYzF,MAAMI,GAAGqB,OAC7BkE,WAAYF,EAAY/C,KAAK7J,GAAGY,IAChCmI,WAAY6D,EAAY/C,KAAK7J,GAAG+I,YAEpC,MAGR6C,IAIR,EAAK7M,SAAS,CACV8K,KAAMA,KAhEK,EAsEnBkD,qBAAuB,SAAAjK,GACnB,IAAM+G,EAAO,EAAKnL,MAAMmL,KAClBmD,EAAe7M,SAAS2C,EAAMoB,OAAOgE,aAAa,gBAAiB,IACnE+E,EAAMpD,EAAKtE,MAAK,SAAA0H,GAClB,OAAOA,EAAIrE,SAAWoE,KAEtBxE,EAAQqB,EAAKpB,QAAQwE,GAGrBnK,EAAMoB,OAAOvB,UAAU4F,SAAS,cAChCC,EAAQyE,EAAIlE,WAAWN,QAAQtI,SAAS2C,EAAMoB,OAAOwE,cACxC,GACTuE,EAAIlE,WAAW9C,OAAOuC,EAAO,GAEjC,EAAKzJ,SAAS,CACV8K,KAAMA,IAEV,EAAKpL,MAAMyO,kBAAkBD,IACtBA,EAAIlE,WAAWlJ,OAAS,IAC/BoN,EAAIlE,WAAWpH,KAAKxB,SAAS2C,EAAMoB,OAAOwE,YAC1CmB,EAAKrB,GAASyE,EACd,EAAKlO,SAAS,CACV8K,KAAMA,IAEV,EAAKpL,MAAMyO,kBAAkBD,KA9FlB,EAmGnBE,aAAe,WAMX,IALA,IAEIpM,EAFAoG,EAAQ,GACR4B,EAAa,GAIR/I,EAAI,EAAG0B,EAAI,EAAKjD,MAAM0I,MAAMtH,OAAQG,EAAI0B,EAAG1B,IAAK,CAErD+I,EAAa,GAGb,IAAK,IAAIxB,EAAI,EAAGA,EAAI,GAAIA,IACpBxG,EAAY,YACR,EAAKtC,MAAM0I,MAAMnH,GAAGyH,YAAY9G,SAAS4G,EAAI,KAC7CxG,GAAa,cAEb,EAAKrC,MAAMmL,KAAK7J,GAAG+I,WAAWpI,SAAS4G,EAAI,KAC3CxG,GAAa,aAGjBgI,EAAWpH,KACP,yBAAKC,IAAK2F,EAAGxG,UAAWA,EAAWqM,eAAcpN,EAAI,EAAGmB,QAAS,EAAK4L,sBACjExF,EAAI,IAMjBJ,EAAMxF,KACF,yBAAKC,IAAK5B,EAAGe,UAAU,aACnB,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QAAf,QAA4B,EAAKtC,MAAM0I,MAAMnH,GAAG4I,QAChD,8BAAO,EAAKnK,MAAM0I,MAAMnH,GAAGqN,MAC3B,0BAAMtM,UAAU,QAAhB,YAAqC,EAAKtC,MAAM0I,MAAMnH,GAAG8B,OAE7D,yBAAKf,UAAU,cAAcgI,KAKzC,OAAO5B,GAzIP,EAAKzI,MAAQ,CACTmL,KAAM,CACF,CAAED,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,EAAGkE,WAAY,KAAM/D,WAAY,IACzD,CAAEa,OAAQ,KAAMhB,OAAQ,GAAIkE,WAAY,KAAM/D,WAAY,MAbnD,E,mFAoBGhG,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,OAASuE,IAAclE,KAAKJ,S,0CAKxDI,KAAK6N,QAAQ7N,KAAKL,S,yCAIHU,GACXL,KAAKL,QAAUU,GACfL,KAAK6N,QAAQ7N,KAAKL,S,+BAgHtB,IAEI6O,EAFExE,EAAWhK,KAAKqO,eAClBI,EAAUzO,KAAKL,MAAMkI,KAAO,IAAI8D,KAAK3L,KAAKL,MAAMkI,KAAKH,MAAQ,IAAIiE,KAarE,OATA8C,EAAQC,SAAS,IACjBD,EAAQE,WAAW,IAGfH,EADA,IAAI7C,KAAS8C,EACG,oBAEA,WAGb,yBAAKxM,UAAWuM,GAAgBxE,O,GA/JL7J,aCIrByO,E,8LAEK3K,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAItB,IAAD,OACCkI,EAAO7H,KAAKL,MAAMgI,MAAMlB,MAAK,SAAAoB,GAC/B,OAAOA,EAAK/F,MAAQ,EAAKnC,MAAMoK,gBAE7B1B,EAAQrI,KAAKL,MAAM0I,MAAM3G,QAAO,SAAA6G,GAClC,OAAOA,EAAKC,SAAW,EAAK7I,MAAMoK,gBAEhCgB,EAAO/K,KAAKL,MAAMoL,KAAKrJ,QAAO,SAAAyM,GAChC,OAAOA,EAAI3F,SAAW,EAAK7I,MAAMoK,gBAWrC,OARI1B,GACAA,EAAMxB,MAAK,SAACC,EAAGC,GACX,OACID,EAAEgD,OAAS/C,EAAE+C,UAMrB,yBAAK7H,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,OACLL,KAAM3E,KAAKL,MAAMgF,KACjBnD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,8QAET,2BACI,8EAEJ,yEACA,kBAAC,EAAD,CAAcoF,MAAO3H,KAAKL,MAAMgI,MAAOC,eAAgB5H,KAAKL,MAAMoK,aAAc3G,SAAUpD,KAAKL,MAAM2K,eACrG,yBAAKrI,UAAU,gBACX,0BAAMA,UAAU,sBAAhB,MACA,0CACA,0BAAMA,UAAU,uBAAhB,MACA,2CACA,0BAAMA,UAAU,gCAAhB,MACA,uCAEJ,kBAAC,EAAD,CACI4F,KAAMA,EACNQ,MAAOA,EACP0C,KAAMA,EACN8D,aAAc7O,KAAKL,MAAMkP,aACzBxK,KAAMrE,KAAKL,MAAM0E,KACjB+J,kBAAmBpO,KAAKL,MAAMyO,oBAElC,kBAAC,EAAD,CAAYzJ,KAAM3E,KAAKL,MAAMgF,Y,GA5DXxE,aCJb2O,E,8LAEK7K,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAK5B,IAKI+J,EALEqF,EAAO/O,KACPyB,EAASzB,KAAKL,MAAMiC,QAAQ6E,MAAK,SAAAuI,GACnC,OAAOA,EAAUlN,MAAQiN,EAAKpP,MAAMoL,KAAKF,YAEzCa,EAAQ,EAERuD,EAAa,GACbC,EAAc,GACdC,EAAa,GA6CjB,OA1CAzF,EAAQqF,EAAKpP,MAAMoL,KAAKd,WAAWN,QAAQoF,EAAKpP,MAAM+I,SAAS1B,SAClD,IACT0E,GAAS,EACK,IAAVhC,IACAuF,EAAa,WAEH,IAAVvF,IACAwF,EAAc,WAEJ,IAAVxF,IACAyF,EAAa,aAIrBzF,EAAQqF,EAAKpP,MAAMoL,KAAKd,WAAWN,QAAQoF,EAAKpP,MAAM+I,SAASO,UAClD,IACTyC,GAAS,EACK,IAAVhC,IACAuF,EAAa,WAEH,IAAVvF,IACAwF,EAAc,WAEJ,IAAVxF,IACAyF,EAAa,aAIrBzF,EAAQqF,EAAKpP,MAAMoL,KAAKd,WAAWN,QAAQoF,EAAKpP,MAAM+I,SAASQ,SAClD,IACTwC,IACc,IAAVhC,IACAuF,EAAa,WAEH,IAAVvF,IACAwF,EAAc,WAEJ,IAAVxF,IACAyF,EAAa,YAKjB,yBAAKlN,UAAU,OACX,yBAAKqC,IAAK,QAAU7C,EAAO8C,MAAOC,IAAI,cAAcvC,UAAU,QAC9D,0BAAMA,UAAU,QACXR,EAAOuB,KAAKgE,MADjB,IACyBvF,EAAOuB,KAAKsE,MAErC,yBAAKrF,UAAU,WACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAWgN,GAAaF,EAAKpP,MAAMoL,KAAKd,WAAW,KAE7D,yBAAKhI,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAWiN,GAAcH,EAAKpP,MAAMoL,KAAKd,WAAW,KAE9D,yBAAKhI,UAAU,SACX,0BAAMA,UAAU,SAAhB,UADJ,YAEI,0BAAMA,UAAWkN,GAAaJ,EAAKpP,MAAMoL,KAAKd,WAAW,MAGjE,yBAAKhI,UAAU,SACX,yBAAKA,UAAU,aAAf,SACA,6BAAMyJ,S,GAnFcvL,aCCnBiP,E,8LAEKnL,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAK5B,IAII0P,EACAC,EALEP,EAAO/O,KACP+K,EAAOgE,EAAKpP,MAAMoL,KAAK1D,KAAI,SAAAkI,GAC7B,OAAO,kBAAC,EAAD,CAAKzM,IAAKyM,EAAWzN,IAAKiJ,KAAMwE,EAAY3N,QAASmN,EAAKpP,MAAMiC,QAAS8G,SAAUqG,EAAKpP,MAAM4I,KAAKG,cAU9G,OALKqC,EAAKhK,QACNgK,EAAKlI,KAAK,yBAAKC,IAAI,IAAIb,UAAU,gBAAvB,8CAIN8M,EAAKpP,MAAM4I,KAAK6B,QACpB,KAAK,EACDiF,EAAc,cACdC,EAAa,cACb,MACJ,KAAK,EACDD,EAAc,gBACdC,EAAa,gBACb,MACJ,KAAK,EACDD,EAAc,aACdC,EAAa,SACb,MACJ,KAAK,EACDD,EAAc,eACdC,EAAa,UACb,MACJ,QACID,EAAc,SACdC,EAAa,UAIrB,OACI,yBAAKrN,UAAU,QACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aAAf,WACA,yBAAKA,UAAU,aAAa8M,EAAKpP,MAAM4I,KAAKvF,MAC5C,yBAAKf,UAAU,QAAQ8M,EAAKpP,MAAM4I,KAAKgG,MACvC,yBAAKtM,UAAU,QAAQ8M,EAAKpP,MAAM4I,KAAKiH,UACvC,6BACI,0BAAMvN,UAAU,gBAAhB,eACA,0BAAMA,UAAWoN,GAAcC,KAGvC,yBAAKrN,UAAU,YACX,yBAAKA,UAAU,aAAf,YACA,yBAAKA,UAAU,QACX,0BAAMA,UAAU,qBAAhB,OADJ,OAC4F,IAAnC8M,EAAKpP,MAAM4I,KAAKG,SAAS1B,MAAc+H,EAAKpP,MAAM4I,KAAKG,SAAS1B,MAAQ,IAEjI,yBAAK/E,UAAU,QACX,0BAAMA,UAAU,uBAAhB,OADJ,OAC+F,IAApC8M,EAAKpP,MAAM4I,KAAKG,SAASO,OAAe8F,EAAKpP,MAAM4I,KAAKG,SAASO,OAAS,IAErI,6BACI,0BAAMhH,UAAU,uBAAhB,OADJ,OAC8F,IAAnC8M,EAAKpP,MAAM4I,KAAKG,SAASQ,MAAc6F,EAAKpP,MAAM4I,KAAKG,SAASQ,MAAQ,KAGvI,yBAAKjH,UAAU,qBAAf,QACA,yBAAKA,UAAU,QAAQ8I,Q,GApEE5K,aCApBsP,E,8LAEKxL,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAgB5B,IAXA,IAQIsC,EARE8M,EAAO/O,KACP0P,EAAgB,GAChBnH,EAAOwG,EAAKpP,MAAM0I,MAAM5B,MAAK,SAAA8B,GAC/B,OAAOA,EAAKzG,MAAQiN,EAAKpP,MAAMkP,gBAE7Bc,EAAWZ,EAAKpP,MAAMiQ,SAASlO,QAAO,SAAAmO,GACxC,OAAOA,EAAQ/E,SAAWiE,EAAKpP,MAAMkP,gBAKhC3N,EAAI,EAAG0B,EAAImM,EAAKpP,MAAM0I,MAAMtH,OAAQG,EAAI0B,EAAG1B,IAAK,CAErD,OAAQ6N,EAAKpP,MAAM0I,MAAMnH,GAAGkJ,QACxB,KAAK,EACDnI,EAAY,mBACZ,MACJ,KAAK,EACDA,EAAY,gBACZ,MACJ,KAAK,EACDA,EAAY,kBACZ,MACJ,QAEIA,EAAY,iBAIhB8M,EAAKpP,MAAM0I,MAAMnH,GAAGY,MAAQiN,EAAKpP,MAAMkP,eACvC5M,GAAa,aAGjByN,EAAc7M,KACV,yBAAKC,IAAK5B,EAAGc,GAAI+M,EAAKpP,MAAM0I,MAAMnH,GAAGY,IAAKG,UAAWA,EAAWI,QAAS0M,EAAKpP,MAAM0C,SAC/EnB,EAAI,IAKjB,OAAIqH,EAEI,yBAAKtG,UAAU,aACX,yBAAKA,UAAU,iBAAiByN,GAChC,oCAAUnH,EAAKuB,QACf,kBAAC,EAAD,CAAMvB,KAAMA,EAAM3G,QAASmN,EAAKpP,MAAMiC,QAASmJ,KAAM4E,KAKtD,kC,GA1DsBxP,aCGpB2P,E,8LAEK7L,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BAItB,IAAD,OACC2I,EAAYtI,KAAKL,MAAM0I,MAAMtH,OAASf,KAAKL,MAAM0I,MAAM3G,QAAO,SAAA6G,GAAI,OAAIA,EAAKC,SAAW,EAAK7I,MAAMoK,gBAAgB,GACjH6F,EAAW5P,KAAKL,MAAMoL,KAAKhK,OAASf,KAAKL,MAAMoL,KAAKrJ,QAAO,SAAAyM,GAAG,OAAIA,EAAI3F,SAAW,EAAK7I,MAAMoK,gBAAgB,GAQlH,OANAzB,EAAUzB,MAAK,SAACC,EAAGC,GACf,OACID,EAAEgD,OAAS/C,EAAE+C,UAKjB,yBAAK7H,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,UACLL,KAAM3E,KAAKL,MAAMgF,KACjBnD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,oMAET,kBAAC,EAAD,CAAcoF,MAAO3H,KAAKL,MAAMgI,MAAOC,eAAgB5H,KAAKL,MAAMoK,aAAc3G,SAAUpD,KAAKL,MAAM2K,eAEjGhC,GAAasH,GACb,kBAAC,EAAD,CACIvH,MAAOC,EACPuG,aAAc7O,KAAKL,MAAMkP,aACzBjN,QAAS5B,KAAKL,MAAMiC,QACpBgO,SAAUA,EACVvN,QAASrC,KAAKL,MAAMoQ,gBAIvBzH,EAAUvH,QAAU,0EAEzB,kBAAC,EAAD,CAAY4D,KAAM3E,KAAKL,MAAMgF,Y,GA5CRxE,aCJtB,SAAS6P,EAAOrQ,GAE3B,OACI,oCACI,wBAAIsC,UAAU,mBAAd,UACA,yBAAKA,UAAU,UACX,yBAAKA,UAAU,UACX,yBAAKqC,IAAK,QAAU3E,EAAMsJ,OAAO1E,MAAOC,IAAI,cAAcvC,UAAU,QACpE,0BAAMA,UAAU,QACXtC,EAAMsJ,OAAOjG,KAAKgE,MADvB,IAC+BrH,EAAMsJ,OAAOjG,KAAKsE,MAEjD,yBAAKrF,UAAU,OACX,yBAAKA,UAAU,UAAf,IACK,oCAEL,yBAAKA,UAAU,UAAUtC,EAAMsQ,OAAO,GAAGA,OAAzC,UAGR,yBAAKhO,UAAU,SACX,yBAAKqC,IAAK,QAAU3E,EAAMqH,MAAMzC,MAAOC,IAAI,cAAcvC,UAAU,QACnE,0BAAMA,UAAU,QACXtC,EAAMqH,MAAMhE,KAAKgE,MADtB,IAC8BrH,EAAMqH,MAAMhE,KAAKsE,MAE/C,yBAAKrF,UAAU,OACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,UAAf,IACK,oCAEL,yBAAKA,UAAU,UAAUtC,EAAMsQ,OAAO,GAAGA,OAAzC,UAGR,yBAAKhO,UAAU,SACX,yBAAKqC,IAAK,QAAU3E,EAAMuJ,MAAM3E,MAAOC,IAAI,cAAcvC,UAAU,QACnE,0BAAMA,UAAU,QACXtC,EAAMuJ,MAAMlG,KAAKgE,MADtB,IAC8BrH,EAAMuJ,MAAMlG,KAAKsE,MAE/C,yBAAKrF,UAAU,OACX,yBAAKA,UAAU,UAAf,IACK,oCAEL,yBAAKA,UAAU,UAAUtC,EAAMsQ,OAAO,GAAGA,OAAzC,Y,ICrCHC,E,2MAOjBtF,SAAW,SAACC,EAAUC,GAClB,OAAO,EAAKnL,MAAMoL,KAAKtE,MAAK,SAAAsE,GACxB,OAAOA,EAAKF,WAAaA,GAAYE,EAAKD,SAAWA,M,EAK7DE,WAAa,SAAAH,GACT,OAAO,EAAKlL,MAAMiC,QAAQ6E,MAAK,SAAAhF,GAC3B,OAAOA,EAAOK,MAAQ+I,M,EAK9BsF,kBAAoB,SAACF,EAAQpF,GACzB,OAAOoF,EAAOxJ,MAAK,SAAAhF,GACf,OAAOA,EAAOoJ,WAAaA,M,EAKnCuF,gBAAkB,WAUd,IATA,IAEIrJ,EACA2B,EACAqC,EACAsF,EACA7E,EANAyE,EAAS,GACTnJ,EAAI,EAAKnH,MAAMiC,QAAQb,OAQpB+F,KACHmJ,EAAOpN,KAAK,CACRgI,SAAU,EAAKlL,MAAMiC,QAAQkF,GAAGhF,IAChCmO,OAAQ,EACRpE,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,OAAQ,IAQhB,IAHAnF,EAAI,EAAKnH,MAAMiC,QAAQb,OAGhB+F,KAIH,IAFAC,EAAI,EAAKpH,MAAM0I,MAAMtH,OAEdgG,KAEH2B,EAAW,EAAK/I,MAAM0I,MAAMtB,GAAG2B,UAE/BqC,EAAO,EAAKH,SAAS,EAAKjL,MAAMiC,QAAQkF,GAAGhF,IAAK,EAAKnC,MAAM0I,MAAMtB,GAAGjF,QAGhE0J,EAAY,EACZ6E,EAAgB,EAAKF,kBAAkBF,EAAQ,EAAKtQ,MAAMiC,QAAQkF,GAAGhF,KACjEiJ,EAAKd,WAAWpI,SAAS6G,EAAS1B,SAClCqJ,EAAcJ,QAAU,EACxBzE,GAAa,EACb6E,EAActE,UAEdhB,EAAKd,WAAWpI,SAAS6G,EAASO,UAClCoH,EAAcJ,QAAU,EACxBzE,GAAa,EACb6E,EAAcrE,WAEdjB,EAAKd,WAAWpI,SAAS6G,EAASQ,SAClCmH,EAAcJ,QAAU,EACxBzE,GAAa,EACb6E,EAAcpE,UAEA,IAAdT,GACA6E,EAAcxE,YAEA,IAAdL,GACA6E,EAAcvE,aAM9B,OAAOmE,G,qFA1FWhM,EAAWC,GAC7B,QAASD,IAAcjE,KAAKL,S,+BA0G5B,IAbM,IAKFqH,EACAiC,EACAC,EACAzH,EACA8K,EACA+D,EASAC,EAnBC,OACCN,EAASjQ,KAAKoQ,kBAChBI,EAAe,GACfC,EAAmB,GACnBC,EAAY,GAJX,WAaGxP,EAAO0B,GACX0N,EAAO,EAAK3Q,MAAMiC,QAAQ6E,MAAK,SAAAhF,GAAY,OAAOA,EAAOK,MAAQ,EAAKnC,MAAMsD,oBAAoBuN,aAAatP,MAC7GsP,EAAa3N,KAAKyN,IAFdpP,EAAI,EAAG0B,EAAI5C,KAAKL,MAAMsD,oBAAoBuN,aAAazP,OAAQG,EAAI0B,EAAG1B,IAAM,EAA5EA,GAbH,eAoBGA,EAAO0B,GACX2N,EAAoBN,EAAOxJ,MAAK,SAAAwJ,GAAY,OAAOA,EAAOpF,WAAa2F,EAAatP,GAAGY,OACvF2O,EAAiB5N,KACb,yBAAKC,IAAK5B,EAAGe,UAAU,SACnB,yBAAKqC,IAAK,QAAUkM,EAAatP,GAAGqD,MAAOC,IAAI,cAAcvC,UAAU,QACvE,yBAAKA,UAAU,QACVuO,EAAatP,GAAG8B,KAAKgE,MAD1B,IACkCwJ,EAAatP,GAAG8B,KAAKsE,MAEvD,yBAAKrF,UAAU,UAAUsO,EAAkBN,OAA3C,UAGRA,EAAO9I,OAAO8I,EAAOtG,QAAQ4G,GAAoB,IAXrD,IAAQrP,EAAI,EAAG0B,EAAI4N,EAAazP,OAAQG,EAAI0B,EAAG1B,IAAM,EAA7CA,GAeR+O,EAAOpJ,MAAK,SAACC,EAAGC,GACZ,OACIA,EAAEkJ,OAASnJ,EAAEmJ,QACblJ,EAAE8E,UAAY/E,EAAE+E,WAChB9E,EAAE+E,UAAYhF,EAAEgF,WAChB/E,EAAEgF,OAASjF,EAAEiF,QACbhF,EAAEiF,QAAUlF,EAAEkF,WAKtBhF,EAAQhH,KAAKgL,WAAWiF,EAAO,GAAGpF,UAClC5B,EAASjJ,KAAKgL,WAAWiF,EAAO,GAAGpF,UACnC3B,EAAQlJ,KAAKgL,WAAWiF,EAAO,GAAGpF,UAGlC,IAAS3J,EAAI,EAAG0B,EAAIqN,EAAOlP,OAAQG,EAAI0B,EAAG1B,IAE5B,IAANA,GAAiB,IAANA,GAAiB,IAANA,IAEtBO,EAASzB,KAAKgL,WAAWiF,EAAO/O,GAAG2J,UAI/B0B,EADArL,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EACtB,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBACJA,EAAI,IAAM,KAAOA,EAAI,GAAK,KAAO,EAC7B,gBAEA,gBAIfwP,EAAU7N,KACN,yBAAKC,IAAK5B,EAAGe,UAAU,SACnB,0BACIA,UAAU,SACV+K,wBAAyB,CACrBC,OAAQ/L,EAAI,EAAIqL,KAGxB,0BAAMtK,UAAU,UAAUgO,EAAO/O,GAAG+O,OAApC,QACA,yBAAK3L,IAAK,QAAU7C,EAAO8C,MAAOC,IAAI,cAAcvC,UAAU,QAC9D,0BAAMA,UAAU,QACXR,EAAOuB,KAAKgE,MADjB,IACyBvF,EAAOuB,KAAKsE,SAOrD,OACI,yBAAKrF,UAAU,OACX,kBAAC,EAAD,CACI+C,KAAK,cACLL,KAAM3E,KAAKL,MAAMgF,KACjBnD,aAAcxB,KAAKL,MAAM6B,aACzB6C,KAAMrE,KAAKL,MAAM0E,KACjBpB,oBAAqBjD,KAAKL,MAAMsD,oBAChCI,wBAAyBrD,KAAKL,MAAM0D,wBACpC4B,aAAcjF,KAAKL,MAAMsF,aACzBR,QAASzE,KAAKL,MAAM8E,QACpBlC,KAAK,kEAGHkO,EAAiB1P,QACnB,oCACI,wBAAIkB,UAAU,cAAd,iBACA,yBAAKA,UAAU,uBAAuBwO,IAG9C,kBAACT,EAAD,CAAQhJ,MAAOA,EAAOiC,OAAQA,EAAQC,MAAOA,EAAO+G,OAAQA,IAC5D,wBAAIhO,UAAU,cAAd,oBACCyO,EACD,kBAAC,EAAD,CAAY/L,KAAM3E,KAAKL,MAAMgF,Y,GA9MJxE,aCSpBoK,G,kBACjB,WAAY5K,GAAQ,IAAD,8BACf,4CAAMA,KA8KV+G,YAAc,SAAAiK,GACV,IAAMC,EAAU,EAAKhR,MAAM4G,WAAWC,MAAK,SAAApC,GACvC,OAAOA,EAAKvC,MAAQ6O,KAIxB,EAAK1Q,SAAS,CACV4Q,eAAe,EACfxM,KAAMuM,IAGVjQ,aAAamQ,QAAQ,OAAQH,GAE7B,EAAKI,oBAAoBJ,IA5LV,EAgMnBtN,wBAA0B,SAAA1B,GACtB,IAAIqP,EAGA/N,EACA/B,EAAG0B,EAHH4F,EAAS,KACTsC,EAAS,KAKb,GAAInJ,EAAYG,IACZkP,EAAgBrP,EAAYG,IAC5BmB,EAAsBtB,MAGrB,CAEDqP,EAAgBrP,EAAYyD,OAAOrC,MAAQpB,EAAYyD,OAAOrC,MAAQpB,EAAYyD,OAAOgE,aAAa,cACtG,IAAK,IAAIlI,EAAI,EAAG0B,EAAI,EAAKhD,MAAM4B,aAAaT,OAAQG,EAAI0B,EAAG1B,IACvD,GAAI8P,IAAkB,EAAKpR,MAAM4B,aAAaN,GAAGY,IAAImP,WAAY,CAC7DhO,EAAsB,EAAKrD,MAAM4B,aAAaN,GAC9C,OAMZ,IAAKA,EAAI,EAAG0B,EAAI,EAAKhD,MAAM+H,MAAM5G,OAAQG,EAAI0B,EAAG1B,IAC5C,GAAI,EAAKtB,MAAM+H,MAAMzG,GAAG8P,gBAAkB/N,EAAoBnB,IAAK,CAC/D0G,EAAS,EAAK5I,MAAM+H,MAAMzG,GAAGY,IAC7B,MAIR,IAAKZ,EAAI,EAAG0B,EAAI,EAAKhD,MAAMyI,MAAMtH,OAAQG,EAAI0B,EAAG1B,IAC5C,GAAI,EAAKtB,MAAMyI,MAAMnH,GAAGsH,SAAWA,GAAyC,IAA/B,EAAK5I,MAAMyI,MAAMnH,GAAG4I,OAAc,CAC3EgB,EAAS,EAAKlL,MAAMyI,MAAMnH,GAAGY,IAC7B,MAIR,IAAM2C,EAAUxB,EAAoBiO,OAAOrP,SAAS,EAAKjC,MAAMyE,KAAKvC,KACpE,EAAK7B,SAAS,CACV8J,aAAcvB,EACdqG,aAAc/D,EACdrG,QAASA,IAEb9D,aAAamQ,QAAQ,wBAAyBE,GAC9CrQ,aAAamQ,QAAQ,eAAgBtI,GACrC7H,aAAamQ,QAAQ,UAAWrM,GAChC,EAAK0M,QAAQlO,IAhPE,EAoPnBmO,iBAAmB,SAAApN,GACf,IAAMqN,EAAMrN,EAAMoB,OAAOvB,UAAU4F,SAAS,eAAiBzF,EAAMoB,OAAOkM,cAAgBtN,EAAMoB,OAChGiM,EAAIxN,UAAUE,IAAI,WAClB,EAAKoN,QAAQ,EAAKvR,MAAMqD,qBACnBsO,MAAK,WACFF,EAAIxN,UAAUC,OAAO,eAzPd,EA8PnB0N,iBAAmB,SAAAxN,GAIf,IAHA,IAEIyN,EAFEpJ,EAAQ,EAAKzI,MAAMyI,MACnBqJ,EAAarQ,SAAS2C,EAAMoB,OAAOrC,MAAO,IAEvC7B,EAAI,EAAGuH,EAAIJ,EAAMtH,OAAQG,EAAIuH,EAAGvH,IACjCmH,EAAMnH,GAAGsH,SAAWkJ,GAAkC,IAApBrJ,EAAMnH,GAAG4I,SAC3C2H,EAAYpJ,EAAMnH,GAAGY,KAG7B,EAAK7B,SAAS,CACV8J,aAAc2H,EACd7C,aAAc4C,IAElB9Q,aAAamQ,QAAQ,eAAgB9M,EAAMoB,OAAOrC,QA3QnC,EA+QnB4O,iBAAmB,SAAA3N,GACf,EAAK/D,SAAS,CACV4O,aAAcxN,SAAS2C,EAAMoB,OAAOpD,GAAI,OAjR7B,EAsRnB4P,gBAAkB,SAAAnH,GACd,EAAKxK,SAAS,CACVkN,YAAa1C,KAxRF,EA6RnBoH,eAAiB,SAAAC,GACb,IAAM/C,EAAI,eACV,IAAKA,EAAKgD,QAAS,CACf,IACIC,EADAjH,EAAOgE,EAAKnP,MAAMmL,KAItB,GAAI+G,EAAa9D,WAAY,CAEzB,IAAK,IAAI9M,EAAI,EAAG0B,EAAImI,EAAKhK,OAAQG,EAAI0B,EAAG1B,IACpC,GAAI6J,EAAK7J,GAAGY,MAAQgQ,EAAa9D,WAAY,CACzCgE,EAASjH,EAAK7J,GACd,MAIJ8Q,IAEAA,EAAO/H,WAAa6H,EAAa7H,WAEjCgI,MAAM,GAAD,OAAIlD,EAAKmD,WAAT,iBAA4BJ,EAAa9D,YAAc,CACxDmE,OAAQ,MACRC,MAAO,WACPC,KAAM,OACNC,QAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAC,WAAcT,EAAO/H,eAE9CyI,OAAM,SAAA5S,GAAK,OAAI6S,QAAQ7S,MAAM,eAAgBA,MAE9CiP,EAAK9O,SAAS,CACV8K,KAAMA,SAKb,CACDiH,EAAS,CACLlQ,IAAKhB,EAAW,GAChBkQ,cAAejC,EAAKnP,MAAMqD,oBAAoBnB,IAC9C0G,OAAQuG,EAAKnP,MAAMmK,aACnBe,OAAQ,KACRD,SAAUkE,EAAKnP,MAAMyE,KAAKvC,IAC1BmI,WAAY6H,EAAa7H,YAK7B,IADA,IAAI5B,EAAQ,EAAKzI,MAAMyI,MACdnH,EAAI,EAAG0B,EAAIyF,EAAMtH,OAAQG,EAAI0B,EAAG1B,IACrC,GAAImH,EAAMnH,GAAGsH,SAAW,EAAK5I,MAAMmK,cAC/B1B,EAAMnH,GAAG4I,SAAWgI,EAAahI,OAAQ,CACzCkI,EAAOlH,OAASzC,EAAMnH,GAAGY,IACzB,MAIRmQ,MAAM,GAAD,OAAIlD,EAAKmD,WAAT,SAA4B,CAC7BC,OAAQ,OACRC,MAAO,WACPC,KAAM,OACNC,QAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,KAExBU,OAAM,SAAA5S,GAAK,OAAI6S,QAAQ7S,MAAM,eAAgBA,MAE9CiL,EAAKlI,KAAKmP,GAEVjD,EAAK9O,SAAS,CACV8K,KAAMA,OApWH,EA2WnB6H,mBAAqB,SAACC,EAAgBC,GAClC,IAAIzK,EAAQ,EAAKzI,MAAMyI,MACnBE,EAAOF,EAAM5B,MAAK,SAAA8B,GAClB,OAAOA,EAAKzG,MAAQ+Q,KAElBE,EAAY1K,EAAMsB,QAAQpB,GAGhCA,EAAKG,SAAWoK,EAGhBzK,EAAM0K,GAAaxK,EAGnB,EAAKyK,WAAWH,EAAgBxK,EAAOE,IAzXxB,EA6XnB0K,iBAAmB,SAAAjP,GACf,IAAM6O,EAAiBxR,SAAS2C,EAAMoB,OAAOgE,aAAa,gBAAiB,IACvEf,EAAQ,EAAKzI,MAAMyI,MACnBE,EAAOF,EAAM5B,MAAK,SAAA8B,GAClB,OAAOA,EAAKzG,MAAQ+Q,KAElBE,EAAY1K,EAAMsB,QAAQpB,GAGhCA,EAAK6B,OAAS/I,SAAS2C,EAAMoB,OAAOgE,aAAa,eAAgB,IAGjEf,EAAM0K,GAAaxK,EAGnB,EAAKyK,WAAWH,EAAgBxK,EAAOE,IA5YxB,EAgZnB2K,sBAAwB,SAACL,EAAgBrJ,GACrC,IAAInB,EAAQ,EAAKzI,MAAMyI,MACnBE,EAAOF,EAAM5B,MAAK,SAAA8B,GAClB,OAAOA,EAAKzG,MAAQ+Q,KAElBE,EAAY1K,EAAMsB,QAAQpB,GAGhCA,EAAKI,YAAca,EAGnBnB,EAAM0K,GAAaxK,EAGnB,EAAKyK,WAAWH,EAAgBxK,EAAOE,IA9ZxB,EAkanByK,WAAa,SAACH,EAAgBxK,EAAOE,GAC5B,EAAKwJ,SAENE,MAAM,GAAD,OAAI,EAAKC,WAAT,kBAA6BW,GAAkB,CAChDV,OAAQ,MACRC,MAAO,WACPC,KAAM,OACNC,QAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUlK,KAExBmK,OAAM,SAAA5S,GAAK,OAAI6S,QAAQ7S,MAAM,eAAgBA,MAIlD,EAAKG,SAAS,CACVoI,MAAOA,KAhbX,EAAKzI,MAAQ,CACT4B,aAAc,GACdmG,MAAO,GACPU,MAAO,GACPzG,QAAS,GACT4E,WAAY,GACZuE,KAAM,GACN8F,cAAe,KACfxM,KAAM,KACNI,SAAS,EACTxB,oBAAqB,KACrB8G,aAAc,KACd8E,aAAc,KACd1B,YAAa,GAGjB,EAAK4E,SAAU,EAGf,EAAKG,WAAa,oDAElB,EAAKvN,KAAO,0BAxBG,E,mFA4BGV,EAAWC,GAC7B,QAASA,IAAclE,KAAKJ,S,mKAMtBuT,GADApE,EAAO/O,MACQ+R,QAAL,UAAkBhD,EAAKpK,KAAvB,+BAAoDoK,EAAKmD,WAAzD,Y,kBAEkBD,MAAMkB,EAAS,CAAEf,MAAO,WAAYC,KAAM,S,cAAlEe,E,gBACgBA,EAAgBC,O,cAAhCzR,E,OAENmN,EAAK9O,SAAS,CACVuG,WAAY5E,I,kBAGT,Y,yCAEP+Q,QAAQW,IAAI,4B,kBACL,Q,4JAKOrQ,GAClB,OAAOjD,KAAKJ,MAAM4G,WAAW9E,QAAO,SAAAD,GAChC,OAAOwB,EAAoBrB,QAAQC,SAASJ,EAAOK,U,mFAKjCyR,G,oFAEhBJ,GADApE,EAAO/O,MACQ+R,QAAL,UAAkBhD,EAAKpK,KAAvB,oCAAyDoK,EAAKmD,WAA9D,kCAAkGqB,G,kBAE3EtB,MAAMkB,EAAS,CAAEf,MAAO,WAAYC,KAAM,S,cAAvEmB,E,gBACqBA,EAAqBH,O,cAA1C7R,E,OAENuN,EAAK9O,SAAS,CACVuB,aAAcA,I,kBAGX,Y,yCAEPmR,QAAQW,IAAI,4B,kBACL,Q,wLAKDrQ,G,wGAEJwQ,GADA1E,EAAO/O,MACa+R,QAAL,UAAkBhD,EAAKpK,KAAvB,sBAAyC1B,EAAoByQ,UAAUjM,MAAM,KAAK,GAAlF,mBACkBsH,EAAKmD,WADvB,gCACyDjP,EAAoBnB,KAC5F6R,EAAe5E,EAAKgD,QAAL,UAAkBhD,EAAKpK,KAAvB,sBAAyC1B,EAAoByQ,UAAUjM,MAAM,KAAK,GAAlF,mBACkBsH,EAAKmD,WADvB,gCACyDjP,EAAoBnB,KAC5F8R,EAAc7E,EAAKgD,QAAL,UAAkBhD,EAAKpK,KAAvB,qBAAwC1B,EAAoByQ,UAAUjM,MAAM,KAAK,GAAjF,mBACmBsH,EAAKmD,WADxB,+BACyDjP,EAAoBnB,K,kBAEjEmQ,MAAMwB,EAAc,CAAErB,MAAO,WAAYC,KAAM,S,cAArEwB,E,iBACcA,EAAcR,O,eAA5B1L,E,iBACsBsK,MAAM0B,EAAc,CAAEvB,MAAO,WAAYC,KAAM,S,eAArEyB,E,iBACcA,EAAcT,O,eAA5BhL,E,iBACqB4J,MAAM2B,EAAa,CAAExB,MAAO,WAAYC,KAAM,S,eAAnE0B,E,iBACaA,EAAaV,O,QAUhC,GAVMtI,E,OACFhB,EAAegF,EAAKnP,MAAMmK,cAAgB1I,SAASV,aAAaqT,QAAQ,kBAAoB,KAC5FnF,EAAeE,EAAKnP,MAAMiP,aAGzB9E,IACDA,EAAepC,EAAM5G,OAAS4G,EAAM,GAAG7F,IAAM,KAC7CnB,aAAamQ,QAAQ,eAAgB/G,KAGpC8E,EACD,IAAS3N,EAAI,EAAG0B,EAAIyF,EAAMtH,OAAQG,EAAI0B,EAAG1B,IACjCmH,EAAMnH,GAAGsH,SAAWuB,GAAoC,IAApB1B,EAAMnH,GAAG4I,SAC7C+E,EAAexG,EAAMnH,GAAGY,KAKpCiN,EAAK9O,SAAS,CACV0H,MAAOA,EACPU,MAAOA,EACP0C,KAAMA,EACNnJ,QAAS5B,KAAKiU,sBAAsBhR,GACpCA,oBAAqBA,EACrB8G,aAAcA,EACd8E,aAAcA,I,kDAGlB8D,QAAQW,IAAI,4B,2JAOC,IAAD,OAEhB,GAAI3S,aAAaqT,QAAQ,QAAS,CAC9B,IAAMrD,EAAStP,SAASV,aAAaqT,QAAQ,QAAS,IAEtDhU,KAAKC,SAAS,CACV4Q,eAAe,EACfpM,QAA6C,SAApC9D,aAAaqT,QAAQ,aAIlChU,KAAKkU,gBAAgB3C,MAAK,SAAA4C,GACtB,GAAe,aAAXA,EAAuB,CACvB,IAAMZ,EAAe,EAAK3T,MAAM4G,WAAWC,MAAK,SAAApC,GAC5C,OAAOA,EAAKvC,MAAQ6O,KAExB,EAAK1Q,SAAS,CACVoE,KAAMkP,IAGV,EAAKxC,oBAAoBJ,GAAQY,MAAK,SAAA4C,GAClC,GAAe,aAAXA,EAAuB,CACvB,IAAMC,EAAwB/S,SAASV,aAAaqT,QAAQ,yBAA0B,IACtF,GAAII,EAAuB,CAEvB,IADA,IAAInR,EACK/B,EAAI,EAAG0B,EAAI,EAAKhD,MAAM4B,aAAaT,OAAQG,EAAI0B,EAAG1B,IACnDkT,IAA0B,EAAKxU,MAAM4B,aAAaN,GAAGY,MACrDmB,EAAsB,EAAKrD,MAAM4B,aAAaN,IAGtD,EAAKiQ,QAAQlO,iBAQjCjD,KAAKC,SAAS,CACV4Q,eAAe,IAInB7Q,KAAKkU,kB,+BA8QH,IAAD,OACClP,EAAOzE,OAAOD,SAASO,KAAK4G,MAAM,KAAK4M,OAAO,GAAG,GAEvD,OAAKrU,KAAKJ,MAAMqD,qBAAuBjD,KAAKJ,MAAMgC,QAAQb,QAC5C,UAATiE,GAAoBhF,KAAKJ,MAAM4G,WAAWzF,SACb,IAA7Bf,KAAKJ,MAAMiR,cAGR,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIyD,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,QAClB4P,OAAQ,SAAAC,GAAU,OACb,EAAK5U,MAAMqD,oBAaR,kBAAC,IAAD,CAAUyB,GAAI,EAAKC,KAAO,YAZ1B,kBAAC,EAAD,iBACQ6P,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBgF,WAAY,EAAK5G,MAAM4G,WACvBE,YAAa,EAAKA,YAClBrD,wBAAyB,EAAKA,wBAC9BwN,cAAe,EAAKjR,MAAMiR,cAC1BxM,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,cAOpC,kBAAC,IAAD,CACI6P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,QAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,qBACX,EAAKrD,MAAM6E,QACP,kBAAC,EAAD,iBACQ+P,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBmG,MAAO,EAAK/H,MAAM+H,MAClBU,MAAO,EAAKzI,MAAMyI,MAClBzG,QAAS,EAAKhC,MAAMgC,QACpBqB,oBAAqB,EAAKrD,MAAMqD,oBAChC8G,aAAc,EAAKnK,MAAMmK,aACzB1G,wBAAyB,EAAKA,wBAC9B4B,aAAc,EAAKmM,iBACnB9G,aAAc,EAAKkH,iBACnBnI,iBAAkB,EAAKuJ,mBACvBvI,eAAgB,EAAK4I,iBACrBpJ,mBAAoB,EAAKqJ,sBACzB7O,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACI2P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,cAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,oBACP,kBAAC,EAAD,iBACQuR,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBI,QAAS,EAAKhC,MAAMgC,QACpBqB,oBAAqB,EAAKrD,MAAMqD,oBAChCI,wBAAyB,EAAKA,wBAC9B4B,aAAc,EAAKmM,iBACnBP,cAAe,EAAKjR,MAAMiR,cAC1BxM,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACI2P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,aAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,oBACP,kBAAC,EAAD,iBACQuR,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBmG,MAAO,EAAK/H,MAAM+H,MAClBU,MAAO,EAAKzI,MAAMyI,MAClBzG,QAAS,EAAKhC,MAAMgC,QACpBmJ,KAAM,EAAKnL,MAAMmL,KACjB9H,oBAAqB,EAAKrD,MAAMqD,oBAChCkK,YAAa,EAAKvN,MAAMuN,YACxB9J,wBAAyB,EAAKA,wBAC9BsH,YAAa,EAAKiH,gBAClB3M,aAAc,EAAKmM,iBACnBP,cAAe,EAAKjR,MAAMiR,cAC1BxM,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACI2P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,OAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,oBACP,kBAAC,EAAD,iBACQuR,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBmG,MAAO,EAAK/H,MAAM+H,MAClBU,MAAO,EAAKzI,MAAMyI,MAClB0C,KAAM,EAAKnL,MAAMmL,KACjBnJ,QAAS,EAAKhC,MAAMgC,QACpBqB,oBAAqB,EAAKrD,MAAMqD,oBAChC8G,aAAc,EAAKnK,MAAMmK,aACzB8E,aAAc,EAAKjP,MAAMiP,aACzBxL,wBAAyB,EAAKA,wBAC9B4B,aAAc,EAAKmM,iBACnB9G,aAAc,EAAKkH,iBACnBpD,kBAAmB,EAAKyD,eACxBxN,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACI2P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,UAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,oBACP,kBAAC,EAAD,iBACQuR,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBmG,MAAO,EAAK/H,MAAM+H,MAClBU,MAAO,EAAKzI,MAAMyI,MAClBzG,QAAS,EAAKhC,MAAMgC,QACpBmJ,KAAM,EAAKnL,MAAMmL,KACjB9H,oBAAqB,EAAKrD,MAAMqD,oBAChC8G,aAAc,EAAKnK,MAAMmK,aACzB8E,aAAc,EAAKjP,MAAMiP,aACzBxL,wBAAyB,EAAKA,wBAC9B4B,aAAc,EAAKmM,iBACnB9G,aAAc,EAAKkH,iBACnBzB,aAAc,EAAK4B,iBACnBtN,KAAM,EAAKzE,MAAMyE,KACjBI,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CACI2P,OAAK,EACL3P,KAAM3E,KAAK2E,KAAO,cAClB4P,OAAQ,SAAAC,GAAU,OACd,EAAK5U,MAAMiR,eACX,EAAKjR,MAAMqD,oBACP,kBAAC,EAAD,iBACQuR,EADR,CAEI7P,KAAM,EAAKA,KACXnD,aAAc,EAAK5B,MAAM4B,aACzBmG,MAAO,EAAK/H,MAAM+H,MAClBU,MAAO,EAAKzI,MAAMyI,MAClBzG,QAAS,EAAKhC,MAAMgC,QACpBmJ,KAAM,EAAKnL,MAAMmL,KACjB1G,KAAM,EAAKzE,MAAMyE,KACjBpB,oBAAqB,EAAKrD,MAAMqD,oBAChCI,wBAAyB,EAAKA,wBAC9B4B,aAAc,EAAKmM,iBACnB3M,QAAS,EAAK7E,MAAM6E,WAGxB,kBAAC,IAAD,CAAUC,GAAI,EAAKC,KAAO,aAItC,kBAAC,IAAD,CAAU8P,KAAK,IAAI/P,GAAI1E,KAAK2E,KAAO,gBAOhD,kC,GAroBcxE,cCJ3BuU,EAAcC,QACW,cAA7BpU,OAAOD,SAASsU,UAEe,UAA7BrU,OAAOD,SAASsU,UAEhBrU,OAAOD,SAASsU,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTxD,MAAK,SAAA4D,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzV,QACfoV,UAAUC,cAAcO,WAK1B7C,QAAQW,IAAI,6CAKZX,QAAQW,IAAI,4CAMrBZ,OAAM,SAAA5S,GACL6S,QAAQ7S,MAAM,4CAA6CA,M,MC9DjE2V,MAGAC,IAASnB,OAAO,kBAAC,EAAD,MAAS7Q,SAASiS,eAAe,SDSlC,WACb,GAA6C,kBAAmBX,UAAW,CAGzE,GADkB,IAAIY,IAAIC,GAAwBtV,OAAOD,UAC3CwV,SAAWvV,OAAOD,SAASwV,OAIvC,OAGFvV,OAAOwV,iBAAiB,QAAQ,WAC9B,IAAMhB,EAAK,UAAMc,GAAN,sBAENnB,EAwCX,SAAiCK,GAE/B9C,MAAM8C,GACHxD,MAAK,SAAAyE,GAGkB,MAApBA,EAAS5L,SACuD,IAAhE4L,EAAS1D,QAAQ2D,IAAI,gBAAgBtM,QAAQ,cAG7CqL,UAAUC,cAAciB,MAAM3E,MAAK,SAAA4D,GACjCA,EAAagB,aAAa5E,MAAK,WAC7BhR,OAAOD,SAAS8V,eAKpBtB,EAAgBC,MAGnBrC,OAAM,WACLC,QAAQW,IACN,oEAzDA+C,CAAwBtB,GAHxBD,EAAgBC,OCtBxBuB,K","file":"static/js/main.d89b8554.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ErrorHandling extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState(state => ({ ...state, hasError: true }));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <div>Sorry, something went wrong.</div>;\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n/* This is a component to reset the page scroll to the top whenever the router changes the page */\r\nclass ScrollToTop extends Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","/********** Helper functions that could be used in multiple places throughout the app. **********/\r\n\r\n/* Logout the user and return to the Log In page. */\r\nexport function logOut() {\r\n    localStorage.clear();\r\n    window.location.href = '/login';\r\n};\r\n\r\n/* Generates a random number of the specified length, ensuring it never starts with 0. */\r\nexport function generateId(length) {\r\n    if (!length) { length = 8; }\r\n    let min = '1';\r\n    let max = '9';\r\n    \r\n    for (let i = 0; i < length - 1; i++) {\r\n        min += '0';\r\n        max += '0';\r\n    }\r\n    \r\n    return Math.floor(parseInt(min) + Math.random() * parseInt(max));\r\n}\r\n\r\n/* Get just the competitions the punter is in. */\r\nexport function getPunterCompetitions(competitions, punter) {\r\n    if (!competitions || !punter) { return []; }\r\n\r\n    return competitions.filter(competition => {\r\n        return competition.punters.includes(punter._id);\r\n    });\r\n}","import React, { PureComponent } from 'react';\r\n\r\nexport default class Button extends PureComponent {\r\n    render() {\r\n        return (\r\n            <button id={this.props.id}\r\n                    className={this.props.classes}\r\n                    type={this.props.type}\r\n                    {...this.props.attributes}\r\n                    onClick={this.props.onClick}\r\n                    disabled={this.props.disabled}>\r\n                {this.props.text}\r\n            </button>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport Button from '../components/Button';\r\n\r\nexport default class CompetitionSelector extends PureComponent {\r\n    render() {\r\n        const competitions = this.props.competitions;\r\n        let options = [];\r\n        let selector;\r\n\r\n        if (competitions.length) {\r\n            // If there are no competitions, display a message.\r\n            if (competitions.length === 0) {\r\n                return (\r\n                    <div className=\"competition-selector\">\r\n                        <p className=\"error\">You have not been added to any competitions yet.</p>\r\n                        <p className=\"error\">Please talk to a competition admin to be added.</p>\r\n                    </div>\r\n                );\r\n            }\r\n            // If there are more than 5 competitions, display them as a select box.\r\n            else if (competitions.length > 5) {\r\n                for (let i = 0, l = competitions.length; i < l; i++) {\r\n                    options.push(\r\n                        <option key={competitions[i]._id} value={competitions[i]._id}>\r\n                            {competitions[i].name}\r\n                        </option>\r\n                    );\r\n                }\r\n\r\n                // Add a default <option> at the beginning of the list if no selected competition.\r\n                if (!this.props.selectedCompetition) {\r\n                    options.unshift(\r\n                        <option key=\"a\" value=\"\">\r\n                            -- Select Competition --\r\n                        </option>\r\n                    );\r\n                }\r\n\r\n                selector = (\r\n                    <div className=\"selector\">\r\n                        <select defaultValue={this.props.selectedCompetition} onChange={this.props.handleCompetitionSelect}>\r\n                            {options}\r\n                        </select>\r\n                        <span className=\"icon-select\" />\r\n                    </div>\r\n                );\r\n            }\r\n            // Else display them as a list.\r\n            else {\r\n                let linkClass;\r\n\r\n                for (let i = 0, l = competitions.length; i < l; i++) {\r\n                    linkClass = 'link';\r\n                    if (this.props.selectedCompetition && this.props.selectedCompetition._id === competitions[i]._id) {\r\n                        linkClass += ' disabled';\r\n                    }\r\n                    options.push(\r\n                        <li key={competitions[i]._id}>\r\n                            <Button\r\n                                classes={linkClass}\r\n                                type=\"button\"\r\n                                attributes={{'data-value': competitions[i]._id}}\r\n                                onClick={this.props.handleCompetitionSelect}\r\n                                text={competitions[i].name}\r\n                            />\r\n                        </li>\r\n                    );\r\n                }\r\n\r\n                selector = (\r\n                    <ul>\r\n                        {options}\r\n                    </ul>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <div className=\"competition-selector\">\r\n                    <h3>Please select a competition:</h3>\r\n                    {selector}\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return <div />;\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logOut } from '../helpers/utilities';\r\nimport { getPunterCompetitions } from '../helpers/utilities';\r\nimport Button from './Button';\r\nimport CompetitionSelector from './CompetitionSelector';\r\n\r\nexport default class TopMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    handlePicClick = () => {\r\n        // Enable or disable the page scroll\r\n        const htmlTag = document.documentElement;\r\n        if (this.state.open) {\r\n            htmlTag.classList.remove('no-scroll');\r\n        }\r\n        else {\r\n            htmlTag.classList.add('no-scroll');\r\n        }\r\n\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n    }\r\n\r\n    handleCompetitionSelect = event => {\r\n        this.props.handleCompetitionSelect(event);\r\n        // Close the menu when the user has selected a competition.\r\n        this.handlePicClick();\r\n    }\r\n\r\n    render() {\r\n        const menuClass = this.state.open ? 'top-menu open' : 'top-menu';\r\n        const punterComps = getPunterCompetitions(this.props.competitions, this.props.user);\r\n\r\n        return (\r\n            <div className={menuClass}>\r\n                {\r\n                    this.props.user &&\r\n                    <div className=\"profile-pic-container\" onClick={this.handlePicClick}>\r\n                        <img className=\"profile-pic\" src={'pics/' + this.props.user.image} alt=\"profile-pic\" />\r\n                        <span className=\"icon-arrow-up\"></span>\r\n                    </div>\r\n                }\r\n                <div className=\"column\">\r\n                    {\r\n                        this.props.isAdmin &&\r\n                        <NavLink to={this.props.path + 'admin'}><span className=\"icon-admin\"></span>Administration</NavLink>\r\n                    }\r\n                    <NavLink to={this.props.path + 'information'}><span className=\"info-icon\">i</span>Information</NavLink>\r\n                    <Button \r\n                        classes=\"btn logout\"\r\n                        type=\"button\"\r\n                        onClick={logOut}\r\n                        disabled={false}\r\n                        text=\"Log Out\"\r\n                    />\r\n                </div>\r\n                {\r\n                    punterComps.length > 1 &&\r\n                    <div className=\"column\">\r\n                        <CompetitionSelector\r\n                            competitions={this.props.competitions}\r\n                            selectedCompetition={this.props.selectedCompetition}\r\n                            handleCompetitionSelect={this.handleCompetitionSelect}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TopMenu from './TopMenu';\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showLogOut: false\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* Updates the state to show the log out overlay when the user has clicked the profile picture. */\r\n    handleShowLogOutOverlay = () => {\r\n        this.setState({\r\n            showLogOut: true\r\n        });\r\n    };\r\n\r\n    /* Updates the state to hide the log out overlay when the user has clicked on the overlay background. */\r\n    handleHideLogOutOverlay = () => {\r\n        this.setState({\r\n            showLogOut: false\r\n        });\r\n    };\r\n\r\n    /* Function to render the component. */\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    // Show the top menu on every page but the Login page.\r\n                    this.props.page !== 'Log In' &&\r\n                    <TopMenu\r\n                        path={this.props.path}\r\n                        user={this.props.user}\r\n                        competitions={this.props.competitions}\r\n                        selectedCompetition={this.props.selectedCompetition}\r\n                        handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                        isAdmin={this.props.isAdmin}\r\n                    />\r\n                }\r\n                {\r\n                    // Show the reload button on every page but the Login page.\r\n                    this.props.page !== 'Log In' &&\r\n                    <button className=\"reload-btn\" onClick={this.props.onReloadData}>\r\n                        <span className=\"icon-reload\" />\r\n                    </button>\r\n                }\r\n                <h2>\r\n                    Spring Racing Tipping <img src=\"horse.png\" alt=\"Title logo\" />\r\n                    <span className=\"beta\">BETA</span>\r\n                </h2>\r\n                {\r\n                    // Show the competition name on every page but the Login page, and if the selectedCompetition is set.\r\n                    this.props.page !== 'Log In' && this.props.selectedCompetition &&\r\n                    <span className=\"comp-name\">{this.props.selectedCompetition.name}</span>\r\n                }\r\n                <h3>{this.props.page}</h3>\r\n                <p>{this.props.text}</p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { generateId } from '../helpers/utilities';\r\n\r\nexport default class LabelAndInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            focused: false\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* When the user types in the field, set the value in the state to what the user is typing. */\r\n    handleChange = event => {\r\n        this.setState({\r\n            value: event.target.value\r\n        });\r\n        this.props.handleChange(event.target.value);\r\n    }\r\n\r\n    /* When the user focuses the field, set focused in the state to true.  Used to shift the label out of the field. */\r\n    handleFocus = event => {\r\n        this.setState({\r\n            focused: true\r\n        });\r\n    };\r\n\r\n    /* When focus is lost on the field, set focused in the state to false.  Used to shift the label into the field. */\r\n    handleBlur = event => {\r\n        this.setState({\r\n            focused: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const id = generateId(6);\r\n\r\n        // Append to any passed classes the focused class on the label to have it move out of the input, but not go back in if there is a value.\r\n        let labelClass = this.props.labelClasses || '';\r\n        labelClass += (this.state.focused || this.state.value !== '') ? 'label focused' : 'label';\r\n\r\n        return (\r\n            <>\r\n                <label htmlFor={id} className={labelClass}>\r\n                    {this.props.labelText}\r\n                </label>\r\n                <input id={id}\r\n                    className={this.props.inputClasses}\r\n                    type={this.props.type}\r\n                    value={this.state.value}\r\n                    onFocus={this.handleFocus}\r\n                    onBlur={this.handleBlur}\r\n                    onChange={this.handleChange}\r\n                    disabled={this.props.disabled}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { generateId } from '../helpers/utilities';\r\n\r\nexport default class LabelAndSelectBox extends PureComponent {\r\n    render() {\r\n        const id = generateId(6);\r\n\r\n        return (\r\n            <>\r\n                <label htmlFor={id} className={this.props.labelClasses}>\r\n                    {this.props.labelText}\r\n                </label>\r\n                <div className=\"selector\">\r\n                    <select\r\n                        id={id}\r\n                        value={this.props.value}\r\n                        onChange={this.props.handleSelect}\r\n                        disabled={this.props.disabled}\r\n                    >\r\n                        {this.props.options}\r\n                    </select>\r\n                    <span className=\"icon-select\" />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\n\r\nexport default class ErrorMessage extends PureComponent {\r\n    render() {\r\n        return (\r\n            <div className={this.props.classes}>{this.props.text}</div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport Button from '../components/Button';\r\nimport LabelAndInput from '../components/LabelAndInput';\r\nimport LabelAndSelectBox from '../components/LabelAndSelectBox';\r\nimport CompetitionSelector from '../components/CompetitionSelector';\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport { logOut } from '../helpers/utilities';\r\nimport { getPunterCompetitions } from '../helpers/utilities';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            password: '',\r\n            wrongPassword: false,\r\n            punterComps: []\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current . */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.competitions !== prevProps.competitions) {\r\n            // Get all the competitions the punter is apart of, and if it is only one, pass it to handleCompetitionSelect.\r\n            const punterComps = getPunterCompetitions(this.props.competitions, this.props.user);\r\n            if (punterComps.length === 1) {\r\n                this.handleCompetitionSelect(punterComps[0]);\r\n            }\r\n            else {\r\n                this.setState({\r\n                    punterComps: punterComps\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /* When the user selects a punter from the drop down, set that user in the state and hide the password error. */\r\n    handlePunterSelect = event => {\r\n        this.setState({\r\n            user: parseInt(event.target.value, 10),\r\n            wrongPassword: false\r\n        });\r\n    };\r\n\r\n    /* When the user enters a password, set it in the state and hide the wrong password message. */\r\n    handlePasswordChange = value => {\r\n        this.setState({\r\n            password: value,\r\n            wrongPassword: false\r\n        });\r\n    };\r\n\r\n    /* When the user clicks the 'Log In' button, if the password stored in the state matches the selected users password then call the\r\n       handleLogin function passed from App.js and redirect the user to the Results page, else display the wrong password error. */\r\n    handleLoginClick = () => {\r\n        const punter = this.props.allPunters.find(punter => {\r\n            return punter._id === this.state.user;\r\n        });\r\n\r\n        if (punter.password === this.state.password) {\r\n            this.setState({\r\n                wrongPassword: false\r\n            });\r\n            // Call handleLogin from App.js to set the logged in user\r\n            this.props.handleLogin(this.state.user);\r\n        } else {\r\n            this.setState({\r\n                wrongPassword: true\r\n            });\r\n        }\r\n    };\r\n\r\n    handleCompetitionSelect = event => {\r\n        this.props.handleCompetitionSelect(event);\r\n        // Redirect to the Results page\r\n        this.props.history.push(`/results`);\r\n    }\r\n\r\n    /* Function to render the component. */\r\n    render() {\r\n        // Sort names in ascending order by first name, then create an <option> for each of them.\r\n        let sorted = this.props.allPunters.sort((a, b) => {\r\n            return a.name.first.localeCompare(b.name.first);\r\n        });\r\n\r\n        // Move Top odds, Bottom Odds and 1, 2, 3 to the end of the array.\r\n        for (let i = 0, len = sorted.length; i < len; i++) {\r\n            if (sorted[i].name.first === 'Top' || sorted[i].name.first === 'Bottom' || sorted[i].name.first === '1, 2, 3') {\r\n                sorted.push(sorted.splice(i, 1)[0]);\r\n            }\r\n        }\r\n\r\n        // Create an array of option elements for each punter.\r\n        let punterOptions = sorted.map(punter => {\r\n            return (\r\n                <option key={punter._id} value={punter._id}>\r\n                    {punter.name.first} {punter.name.last}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        // Add a default <option> at the beginning of punters.\r\n        punterOptions.unshift(\r\n            <option key=\"a\" value=\"\">\r\n                -- Select Name --\r\n            </option>\r\n        );\r\n\r\n        // Show the error message if the password is wrong.\r\n        const errorClass = this.state.wrongPassword ? 'error' : 'error hide';\r\n        \r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Log In\"\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"Please select your name from the drop down, and then enter your password to log in.\"\r\n                />\r\n                <LabelAndSelectBox\r\n                    labelClasses=\"sr-only\"\r\n                    labelText=\"Select a punter\"\r\n                    value={this.props.user ? this.props.user._id : this.state.user ? this.state.user : ''}\r\n                    handleSelect={this.handlePunterSelect}\r\n                    disabled={this.props.user}\r\n                    options={punterOptions}\r\n                />\r\n                {\r\n                    !this.props.user &&\r\n                    <LabelAndInput\r\n                        labelText=\"Password\"\r\n                        inputClasses=\"password\"\r\n                        type=\"password\"\r\n                        value={this.props.user ? this.props.user.password : ''}\r\n                        handleChange={this.handlePasswordChange}\r\n                        disabled={this.props.user}\r\n                    />\r\n                }\r\n                <Button\r\n                    classes=\"btn\"\r\n                    type=\"button\"\r\n                    onClick={this.props.user ? logOut : this.handleLoginClick}\r\n                    disabled={false}\r\n                    text={this.props.user ? 'Log Out' : 'Log In'}\r\n                />\r\n                <ErrorMessage classes={errorClass} text=\"The password for the name you selected is incorrect\" />\r\n                {\r\n                    this.props.user &&\r\n                    this.state.punterComps.length > 1 &&\r\n                    <CompetitionSelector\r\n                        competitions={this.state.punterComps}\r\n                        handleCompetitionSelect={this.handleCompetitionSelect}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class MeetSelector extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component. */\r\n    render() {\r\n        // Sort the race meets by date.\r\n        const meets = this.props.meets.sort((a, b) => {\r\n            return a.date.localeCompare(b.date);\r\n        });\r\n\r\n        if (meets && this.props.selectedMeetId) {\r\n            let split;\r\n            let date;\r\n\r\n            return (\r\n                <div className=\"selector\">\r\n                    <select value={this.props.selectedMeetId} onChange={this.props.onChange}>\r\n                        {meets.map(meet => {\r\n                            split = meet.date.split('-');\r\n                            date = `${split[2]}/${split[1]}`;\r\n                            return (\r\n                                <option key={meet._id} value={meet._id}>\r\n                                    {meet.name} ({date})\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                    <span className=\"icon-select\" />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return <div />;\r\n        }\r\n    }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class BottomMenu extends PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"bottom-menu\">\r\n                <NavLink to={this.props.path + 'statistics'} activeClassName=\"selected\"><div className=\"icon icon-pie-chart\"></div>Statistics</NavLink>\r\n                <NavLink to={this.props.path + 'tips'} activeClassName=\"selected\"><div className=\"icon icon-pencil\"></div>Tips</NavLink>\r\n                <NavLink to={this.props.path + 'results'} activeClassName=\"selected\"><div className=\"icon icon-clipboard\"></div>Results</NavLink>\r\n                <NavLink to={this.props.path + 'leaderboard'} activeClassName=\"selected\"><div className=\"icon icon-leader-board\"></div>Leaderboard</NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport MeetSelector from '../components/MeetSelector';\r\nimport BottomMenu from '../components/BottomMenu';\r\nimport Button from '../components/Button';\r\n\r\nexport default class Admin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: [\r\n                {\r\n                    number: 1,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 2,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 3,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 4,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 5,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 6,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 7,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 8,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 9,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                },\r\n                {\r\n                    number: 10,\r\n                    placings: {\r\n                        first: '',\r\n                        second: '',\r\n                        third: ''\r\n                    },\r\n                    scratchings: []\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* Runs when the component first mounts and calls setStateData with the passed races and selected meet props */\r\n    componentDidMount() {\r\n        this.setStateData(this.props.races, this.props.selectedMeet);\r\n    }\r\n\r\n    /* Runs when the component updates and calls setStateData with the new passed races and selected meet props, if they have changed */\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props !== prevProps) {\r\n            this.setStateData(this.props.races, this.props.selectedMeet);\r\n        }\r\n    }\r\n\r\n    /* Takes the passed races and selected meet and updates the state */\r\n    setStateData = (propsRaces, propsSelectedMeet) => {\r\n        const stateRaces = this.state.races;\r\n        const meetRaces = propsRaces.filter(race => {\r\n            return race.meetId === propsSelectedMeet;\r\n        });\r\n\r\n        for (let i = 0, j = meetRaces.length; i < j; i++) {\r\n            stateRaces[i].placings = meetRaces[i].placings;\r\n            stateRaces[i].scratchings = meetRaces[i].scratchings;\r\n        }\r\n\r\n        this.setState({\r\n            races: stateRaces\r\n        });\r\n    };\r\n\r\n    /* When the user enters a value in one of the placing fields, update it in the state */\r\n    handlePlacingChange = event => {\r\n        const races = this.state.races;\r\n        const raceChanged = event.target.id.split('-')[1];\r\n        const placingChanged = event.target.id.split('-')[2];\r\n        let placings = races[raceChanged - 1].placings;\r\n        const value = !Number.isNaN(parseInt(event.target.value)) ? parseInt(event.target.value) : 0;\r\n\r\n        if (placingChanged === 'first') {\r\n            placings.first = value;\r\n        }\r\n        if (placingChanged === 'second') {\r\n            placings.second = value;\r\n        }\r\n        if (placingChanged === 'third') {\r\n            placings.third = value;\r\n        }\r\n\r\n        this.setState({\r\n            races: races\r\n        });\r\n    };\r\n\r\n    /* When the user clicks a Save button, pass the modified placings to the onPlacingsChange function\r\n       passed in via props from App.js */\r\n    handleSaveClick = event => {\r\n        const placings = this.state.races[event.target.getAttribute('data-race') - 1].placings;\r\n        this.props.onPlacingsChange(parseInt(event.target.getAttribute('data-race-id')), placings);\r\n    };\r\n\r\n    /* When the user selects a scratching, add or remove it from the state and pass the modified scratchings to the\r\n       onScratchingChange function passed in via props from App.js */\r\n    handleScratchingClick = event => {\r\n        const races = this.state.races;\r\n        const modifiedRaceIndex = parseInt(event.target.getAttribute('data-race'), 10) - 1;\r\n        let modifiedScratchings = races[modifiedRaceIndex].scratchings;\r\n\r\n        // If the selection is already selected, remove it, else add it\r\n        if (event.target.classList.contains('scratched')) {\r\n            let index = modifiedScratchings.indexOf(parseInt(event.target.innerText, 10));\r\n            if (index > -1) {\r\n                modifiedScratchings.splice(index, 1);\r\n            }\r\n        } else {\r\n            modifiedScratchings.push(parseInt(event.target.innerText, 10));\r\n        }\r\n        races[modifiedRaceIndex].scratchings = modifiedScratchings;\r\n        this.setState({\r\n            races: races\r\n        });\r\n        this.props.onScratchingChange(parseInt(event.target.getAttribute('data-race-id'), 10), modifiedScratchings);\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const meetRaces = this.props.races.filter(race => {\r\n            return race.meetId === this.props.selectedMeet;\r\n        });\r\n        let raceList = [];\r\n        let selections = [];\r\n        let className;\r\n\r\n        // For each race in the selected meet\r\n        for (let i = 0, l = meetRaces.length; i < l; i++) {\r\n            selections = [];\r\n\r\n            // Generate 24 selections for the scratchings\r\n            for (let j = 0; j < 24; j++) {\r\n                className = 'selection';\r\n                if (this.state.races[i].scratchings.includes(j + 1)) {\r\n                    className += ' scratched';\r\n                }\r\n\r\n                selections.push(\r\n                    <div key={j} className={className} data-race={i + 1} data-race-id={meetRaces[i]._id} onClick={this.handleScratchingClick}>\r\n                        {j + 1}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            // Create the HTML for each race and insert into the raceList array\r\n            raceList.push(\r\n                <div key={i} className=\"adminRace\">\r\n                    <div className=\"details\">\r\n                        <span className=\"bold\">RACE {meetRaces[i].number}</span>\r\n                        <span className=\"name\">&nbsp;-&nbsp;{meetRaces[i].name}</span>\r\n                    </div>\r\n                    <div className=\"placings\">\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-first'}>1st</label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-first'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.first !== 0 ? this.state.races[i].placings.first : ''}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-second'}>2nd</label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-second'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.second !== 0 ? this.state.races[i].placings.second : ''}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor={'race-' + (i + 1) + '-third'}>3rd</label>\r\n                            <input\r\n                                id={'race-' + (i + 1) + '-third'}\r\n                                type=\"tel\"\r\n                                value={this.state.races[i].placings.third !== 0 ? this.state.races[i].placings.third : ''}\r\n                                onChange={this.handlePlacingChange}\r\n                            />\r\n                        </div>\r\n                        <button className=\"save-btn\" type=\"button\" data-race={i + 1} data-race-id={meetRaces[i]._id} onClick={this.handleSaveClick}>\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"mb-10 bold\">Set Race Status</div>\r\n                    <div className=\"status-selector\">\r\n                        <Button\r\n                            classes={meetRaces[i].status === 1 ? 'btn status-selector-btn selected' : 'btn status-selector-btn'}\r\n                            type='button'\r\n                            attributes={{\r\n                                'data-meet': this.props.selectedMeet,\r\n                                'data-race': i + 1,\r\n                                'data-race-id': meetRaces[i]._id,\r\n                                'data-status': 1\r\n                            }}\r\n                            onClick={this.props.onStatusChange}\r\n                            text='Not Run Yet'\r\n                             />\r\n                        <Button\r\n                            classes={meetRaces[i].status === 2 ? 'btn status-selector-btn selected' : 'btn status-selector-btn'}\r\n                            type='button'\r\n                            attributes={{\r\n                                'data-meet': this.props.selectedMeet,\r\n                                'data-race': i + 1,\r\n                                'data-race-id': meetRaces[i]._id,\r\n                                'data-status': 2\r\n                            }}\r\n                            onClick={this.props.onStatusChange}\r\n                            text='About To Jump' />\r\n                        <Button\r\n                            classes={meetRaces[i].status === 3 ? 'btn status-selector-btn selected' : 'btn status-selector-btn'}\r\n                            type='button'\r\n                            attributes={{\r\n                                'data-meet': this.props.selectedMeet,\r\n                                'data-race': i + 1,\r\n                                'data-race-id': meetRaces[i]._id,\r\n                                'data-status': 3\r\n                            }}\r\n                            onClick={this.props.onStatusChange}\r\n                            text='Racing' />\r\n                        <Button\r\n                            classes={meetRaces[i].status === 4 ? 'btn status-selector-btn selected' : 'btn status-selector-btn'}\r\n                            type='button'\r\n                            attributes={{\r\n                                'data-meet': this.props.selectedMeet,\r\n                                'data-race': i + 1,\r\n                                'data-race-id': meetRaces[i]._id,\r\n                                'data-status': 4\r\n                            }}\r\n                            onClick={this.props.onStatusChange}\r\n                            text='Has Run' />\r\n                    </div>\r\n                    <div className=\"scratching-list\">\r\n                        <div className=\"mb-10 bold\">Scratchings</div>\r\n                        <div className=\"selections\">{selections}</div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Administration\"\r\n                    path={this.props.path}\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is the Administration page used to set placings and race statuses.  In the future you will also be able to set scratchings.\"\r\n                />\r\n                <MeetSelector meets={this.props.meets} selectedMeetId={this.props.selectedMeet} onChange={this.props.onMeetChange} />\r\n                <div className=\"adminRaceList\">{raceList}</div>\r\n                <BottomMenu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport Header from '../components/Header';\r\nimport BottomMenu from '../components/BottomMenu';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tabSelected: 1\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* When the component mounts, set the selected tab in the state based off the selected tab passed via props */\r\n    componentDidMount() {\r\n        if (this.state.tabSelected !== this.props.selectedTab) {\r\n            this.setState({\r\n                tabSelected: this.props.selectedTab\r\n            });\r\n        }\r\n    }\r\n\r\n    /* When the user clicks a tab, set it as the selected tab in local state, and pass it to the onTabSelect function in App.js\r\n       passed via props */\r\n    handleTabClick = event => {\r\n        let tab = 1;\r\n\r\n        if (event.target.classList.contains('two')) {\r\n            tab = 2;\r\n        }\r\n        this.setState({\r\n            tabSelected: tab\r\n        });\r\n        this.props.onTabSelect(tab);\r\n    };\r\n\r\n    /* Find the tips that belong to the associated punter and race */\r\n    findTips = (punterId, raceId) => {\r\n        return this.props.tips.find(tips => {\r\n            return tips.punterId === punterId && tips.raceId === raceId;\r\n        });\r\n    };\r\n\r\n    /* Find the particular punter from the punters data */\r\n    findPunter = punterId => {\r\n        return this.props.punters.find(punter => {\r\n            return punter._id === punterId;\r\n        });\r\n    };\r\n\r\n    /* Find the current punter's stats from the stats array */\r\n    findPuntersStats = (stats, punterId) => {\r\n        return stats.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Find the current race meet from the current punter's stats */\r\n    findPuntersStatsMeet = (puntersStats, meetId) => {\r\n        return puntersStats.meets.find(meet => {\r\n            return meet.meetId === meetId;\r\n        });\r\n    };\r\n\r\n    /* Function to calculate each users points, trifectas, quinellas, firsts, seconds and thirds and score for each meet */\r\n    calculateStats = () => {\r\n        let stats = [];\r\n        let meetsArray = [];\r\n        let a = this.props.meets.length;\r\n        let b = this.props.punters.length;\r\n        let c;\r\n        let placings;\r\n        let tips;\r\n        let puntersStats;\r\n        let puntersStatsMeet;\r\n        let raceScore;\r\n\r\n        // Create a meets array to hold the score for each meet.  This will be added to each punters stats.\r\n        while (a--) {\r\n            meetsArray.push({\r\n                meetId: this.props.meets[a]._id,\r\n                date: this.props.meets[a].date,\r\n                score: 0\r\n            });\r\n        }\r\n\r\n        // Sort the meets array in order of date\r\n        meetsArray.sort((a, b) => {\r\n            const aDate = Date.parse(a.date);\r\n            const bDate = Date.parse(b.date);\r\n            return aDate - bDate;\r\n        });\r\n\r\n        // Load each punter into the points array with a score of 0\r\n        while (b--) {\r\n            stats.push({\r\n                punterId: this.props.punters[b]._id,\r\n                trifectas: 0,\r\n                quinellas: 0,\r\n                firsts: 0,\r\n                seconds: 0,\r\n                thirds: 0,\r\n                meets: meetsArray.map(x => ({ ...x })) // Use map and the spread operator to clone the array with cloned values, instead of references\r\n            });\r\n        }\r\n\r\n        // Reset the length of the punters after the first while loop\r\n        b = this.props.punters.length;\r\n\r\n        // For each punter\r\n        while (b--) {\r\n            // Reset the length of the races\r\n            c = this.props.races.length;\r\n            // Loop through each race\r\n            while (c--) {\r\n                // Set placings to the placings for this race\r\n                placings = this.props.races[c].placings;\r\n                // Find the associated tips for this user and race\r\n                tips = this.findTips(this.props.punters[b]._id, this.props.races[c]._id);\r\n                \r\n                if (tips) {\r\n                    // Reset the race score\r\n                    raceScore = 0;\r\n                    // Get the current punter's stats from the stats array\r\n                    puntersStats = this.findPuntersStats(stats, this.props.punters[b]._id);\r\n                    // Get the current race meet from the current punter's stats\r\n                    puntersStatsMeet = this.findPuntersStatsMeet(puntersStats, this.props.races[c].meetId);\r\n\r\n                    // Update the stats of that punter\r\n                    if (tips.selections.includes(placings.first)) {\r\n                        puntersStats.firsts++;\r\n                        raceScore += 3;\r\n                    }\r\n                    if (tips.selections.includes(placings.second)) {\r\n                        puntersStats.seconds++;\r\n                        raceScore += 2;\r\n                    }\r\n                    if (tips.selections.includes(placings.third)) {\r\n                        puntersStats.thirds++;\r\n                        raceScore += 1;\r\n                    }\r\n                    if (raceScore === 6) {\r\n                        puntersStats.trifectas++;\r\n                    }\r\n                    if (raceScore === 5) {\r\n                        puntersStats.quinellas++;\r\n                    }\r\n                    // Add the race score to this meets score\r\n                    puntersStatsMeet.score += raceScore;\r\n                }\r\n            }\r\n        }\r\n\r\n        return stats;\r\n    };\r\n\r\n    /* Function create the stat item HTML for each punter and adding to the arrayToUpdate */\r\n    createStatArray = (dataArray, arrayToUpdate, isMeets) => {\r\n        let tempArray = [];\r\n        let trifectaArray = [];\r\n        let quinellaArray = [];\r\n        let firstArray = [];\r\n        let secondArray = [];\r\n        let thirdArray = [];\r\n        let count = 0;\r\n        let punter;\r\n        let position;\r\n        let name;\r\n\r\n        if (isMeets) {\r\n            // For each meet\r\n            for (let i = 0, l = dataArray.length; i < l; i++) {\r\n                // Sort by scores\r\n                dataArray[i].scores.sort((a, b) => {\r\n                    return b.score - a.score;\r\n                });\r\n\r\n                // For each score in the meet\r\n                for (let j = 0, len = dataArray[i].scores.length; j < len; j++) {\r\n                    // Get the current punters details\r\n                    punter = this.findPunter(dataArray[i].scores[j].punterId);\r\n\r\n                    // Get positon ending name (adding 1 to index to account for array starting from 0)\r\n                    if (j + 1 !== 11 && (j + 1) % 10 === 1) {\r\n                        position = '<sup>ST</sup>';\r\n                    } else if (j + 1 !== 12 && (j + 1) % 10 === 2) {\r\n                        position = '<sup>ND</sup>';\r\n                    } else if (j + 1 !== 13 && (j + 1) % 10 === 3) {\r\n                        position = '<sup>RD</sup>';\r\n                    } else {\r\n                        position = '<sup>TH</sup>';\r\n                    }\r\n\r\n                    // Create the stat item and add to the temporary array\r\n                    tempArray.push(\r\n                        <div key={j} className=\"stat-item\">\r\n                            <div className=\"number\" dangerouslySetInnerHTML={{ __html: j + 1 + position }} />\r\n                            <img src={'pics/' + punter.image} alt=\"Profile pic\" className=\"pic\" />\r\n                            <div className=\"name\">{punter.name.display}</div>\r\n                            <div className=\"stat\">{dataArray[i].scores[j].score}</div>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                // Add the scores for this meet to the passed array to update\r\n                arrayToUpdate.push(\r\n                    <Fragment key={i}>\r\n                        <hr />\r\n                        <div className=\"bold mt-20 mb-10\">{dataArray[i].name}</div>\r\n                        <div className=\"stat-container\">{tempArray}</div>\r\n                    </Fragment>\r\n                );\r\n\r\n                // Reset the temporary array\r\n                tempArray = [];\r\n            }\r\n        } else {\r\n            while (count < 5) {\r\n                // Set the correct array and sort by the correct stat\r\n                if (count === 0) {\r\n                    tempArray = trifectaArray;\r\n                    name = 'trifectas';\r\n                    dataArray.sort((a, b) => {\r\n                        return b.trifectas - a.trifectas;\r\n                    });\r\n                } else if (count === 1) {\r\n                    tempArray = quinellaArray;\r\n                    name = 'quinellas';\r\n                    dataArray.sort((a, b) => {\r\n                        return b.quinellas - a.quinellas;\r\n                    });\r\n                } else if (count === 2) {\r\n                    tempArray = firstArray;\r\n                    name = 'firsts';\r\n                    dataArray.sort((a, b) => {\r\n                        return b.firsts - a.firsts;\r\n                    });\r\n                } else if (count === 3) {\r\n                    tempArray = secondArray;\r\n                    name = 'seconds';\r\n                    dataArray.sort((a, b) => {\r\n                        return b.seconds - a.seconds;\r\n                    });\r\n                } else {\r\n                    tempArray = thirdArray;\r\n                    name = 'thirds';\r\n                    dataArray.sort((a, b) => {\r\n                        return b.thirds - a.thirds;\r\n                    });\r\n                }\r\n\r\n                for (let i = 0, l = dataArray.length; i < l; i++) {\r\n                    // Get the current punters details\r\n                    punter = this.findPunter(dataArray[i].punterId);\r\n\r\n                    // Get positon ending name (adding 1 to index to account for array starting from 0)\r\n                    if (i + 1 !== 11 && (i + 1) % 10 === 1) {\r\n                        position = '<sup>ST</sup>';\r\n                    } else if (i + 1 !== 12 && (i + 1) % 10 === 2) {\r\n                        position = '<sup>ND</sup>';\r\n                    } else if (i + 1 !== 13 && (i + 1) % 10 === 3) {\r\n                        position = '<sup>RD</sup>';\r\n                    } else {\r\n                        position = '<sup>TH</sup>';\r\n                    }\r\n\r\n                    // Create the stat item and add to the temporary array\r\n                    tempArray.push(\r\n                        <div key={`${count}${i}`} className=\"stat-item\">\r\n                            <div className=\"number\" dangerouslySetInnerHTML={{ __html: i + 1 + position }} />\r\n                            <img src={'pics/' + punter.image} alt=\"Profile pic\" className=\"pic\" />\r\n                            <div className=\"name\">{punter.name.display}</div>\r\n                            <div className=\"stat\">{dataArray[i][name]}</div>\r\n                        </div>\r\n                    );\r\n                }\r\n                count++;\r\n            }\r\n\r\n            // Add the scores for the stats to the passed array to update\r\n            arrayToUpdate.push(\r\n                <Fragment key=\"a\">\r\n                    <div className=\"bold mt-20 mb-10\">Trifectas</div>\r\n                    <div className=\"stat-container\">{trifectaArray}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Quinellas</div>\r\n                    <div className=\"stat-container\">{quinellaArray}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Firsts</div>\r\n                    <div className=\"stat-container\">{firstArray}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Seconds</div>\r\n                    <div className=\"stat-container\">{secondArray}</div>\r\n                    <hr />\r\n                    <div className=\"bold mt-20 mb-10\">Thirds</div>\r\n                    <div className=\"stat-container\">{thirdArray}</div>\r\n                </Fragment>\r\n            );\r\n        }\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const stats = this.calculateStats();\r\n        let meetArray = [];\r\n        let arrayMeet;\r\n        let meetScoresHTML = [];\r\n        let otherScoresHTML = [];\r\n        let tabBtn1Class;\r\n        let tabBtn2Class;\r\n        let tab1Class;\r\n        let tab2Class;\r\n\r\n        // Set the tab status and hide/show the tabs\r\n        if (this.state.tabSelected === 1) {\r\n            tabBtn1Class = 'btn tab-btn one selected';\r\n            tabBtn2Class = 'btn tab-btn two';\r\n            tab1Class = 'tab-panel';\r\n            tab2Class = 'tab-panel hide';\r\n        } else {\r\n            tabBtn1Class = 'btn tab-btn one';\r\n            tabBtn2Class = 'btn tab-btn two selected';\r\n            tab1Class = 'tab-panel hide';\r\n            tab2Class = 'tab-panel';\r\n        }\r\n\r\n        // Populate the meet array with each meet\r\n        for (let i = 0, l = this.props.meets.length; i < l; i++) {\r\n            meetArray.push({\r\n                meetId: this.props.meets[i]._id,\r\n                name: this.props.meets[i].name,\r\n                scores: []\r\n            });\r\n        }\r\n\r\n        // Populate each of the temporary meet arrays with each punters score for that meet\r\n        for (let i = 0, l = stats.length; i < l; i++) {\r\n            for (let j = 0, len = stats[i].meets.length; j < len; j++) {\r\n                arrayMeet = meetArray.find(meet => {\r\n                    return meet.meetId === stats[i].meets[j].meetId;\r\n                });\r\n                arrayMeet.scores.push({ punterId: stats[i].punterId, score: stats[i].meets[j].score });\r\n            }\r\n        }\r\n\r\n        // Create an array of the scores for each meet\r\n        this.createStatArray(meetArray, meetScoresHTML, true);\r\n\r\n        // Create an array of the scores for trifectas, quinellas, first, seconds and thirds\r\n        this.createStatArray(stats, otherScoresHTML, false);\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Statistics\"\r\n                    competitions={this.props.competitions}\r\n                    path={this.props.path}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"Here you can find various statistics, such as the placings for each race meet, number of trifectas, quinellas, 1sts, 2nds, 3rds, etc.\"\r\n                />\r\n                <div className=\"tab-btns\">\r\n                    <button className={tabBtn1Class} onClick={this.handleTabClick}>\r\n                        Meet Scores\r\n                    </button>\r\n                    <button className={tabBtn2Class} onClick={this.handleTabClick}>\r\n                        Other\r\n                    </button>\r\n                </div>\r\n                <div className={tab1Class}>{meetScoresHTML}</div>\r\n                <div className={tab2Class}>{otherScoresHTML}</div>\r\n                <BottomMenu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport BottomMenu from '../components/BottomMenu';\r\n\r\nexport default class Information extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n    \r\n    /* Function to render the component */\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Header page=\"Information\"\r\n                    path={this.props.path}\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is where you can find a run down of how each of the pages of this app work, as well as the browser support and what some of the ideas for the future are.\"\r\n                />\r\n                <div className=\"bold mt-20\">Browser Support</div>\r\n                <p>While this app will work fine on tablets and desktop, it was designed for mobile screen size, and to run in the latest version of the following browsers:</p>\r\n                <ul className=\"browser-list\">\r\n                    <li><span className=\"browser chrome\"></span>Chrome</li>\r\n                    <li><span className=\"browser safari\"></span>Safari</li>\r\n                    <li><span className=\"browser firefox\"></span>Firefox</li>\r\n                    <li><span className=\"browser opera\"></span>Opera</li>\r\n                </ul>\r\n                <div className=\"bold mt-20\">Game Accounts</div>\r\n                <p>There are three game accounts which appear in lists like regular people (excluding the leaderboard).  These three accounts are:</p>\r\n                <div className=\"odds-totals\">\r\n                    <div className=\"total\">\r\n                        <img src={'pics/Default.png'} alt=\"Profile pic\" className=\"pic\" />\r\n                        <div className=\"name\">1, 2, 3</div>\r\n                    </div>\r\n                    <div className=\"total\">\r\n                        <img src={'pics/Default.png'} alt=\"Profile pic\" className=\"pic\" />\r\n                        <div className=\"name\">Top Odds</div>\r\n                    </div>\r\n                    <div className=\"total\">\r\n                        <img src={'pics/Default.png'} alt=\"Profile pic\" className=\"pic\" />\r\n                        <div className=\"name\">Bottom Odds</div>\r\n                    </div>\r\n                </div>\r\n                <p>1, 2, 3 = Always picks horses 1, 2 and 3.</p>\r\n                <p>Top Odds = Always picks the horses with the top three odds. Decided on form if more than one horse have the same odds.</p>\r\n                <p>Bottom Odds = Always picks the horses with the bottom three odds. Decided on form if more than one horse have the same odds.</p>\r\n                <div className=\"bold mt-20\">Tips</div>\r\n                <p>On the Tips page you can select a race meet from the drop down menu to view the list of races and their associated tips. You can submit 3 tips for each race of every race meet.  If you have selected 3 horses already, but want to change a selection, then you will have to unselect a horse before you can select a new one.  If you select less than 3 horses, then you simply miss out on the opprtunity to get those points.</p>\r\n                <p>To select or unselect a number, you must double-click/double-tap on it.  This is to help prevent people accidently selecting or unselecting things while they are just scrolling the page.</p>\r\n                <p>The tips for each race meet must be submitted by 10:00am AEDT on the day of the race meet.</p>\r\n                <p>The tips for all the races of a race meet will be disabled after 10:00am on the day of the meet.</p>\r\n                <div className=\"bold mt-20\">Results</div>\r\n                <p>On the Results page you can select a race meet to view the races for that meet, and the associated details and each punters tips for each race.</p>\r\n                The races appear as coloured circles below the race meet drop down.  The selected race has a tapered bottom.  The colours match the status of the race:\r\n                <ul>\r\n                    <li><span className=\"demo-square bg-blue\"></span> Not Yet Run</li>\r\n                    <li><span className=\"demo-square bg-orange\"></span> About To Jump</li>\r\n                    <li><span className=\"demo-square bg-red\"></span> Racing</li>\r\n                    <li><span className=\"demo-square bg-green\"></span> Has Run</li>\r\n                </ul>\r\n                <p>5 minutes before a race is due to run its status will automatically change to 'About To Jump'.  An admin will then have to manually set it to 'Racing' and 'Has Run' on the Admin page, as they can tend to run late.</p>\r\n                <p>When you select a race you can see its details and placings appear, and below that will be a list of everybody's tips for that race.  Each person's tips shows each of their 3 picks and the calculated score.  Any correct tips will be shown in teal with a tick next to it.</p>\r\n                <div className=\"bold mt-20\">Leaderboard</div>\r\n                <p>On the Leaderboard page you can see the current rank of all the punters.  The rank is determined first by people's overall score, then how many trifectas (first, second, third) they have, then how many quinellas (first, second) they have, then by number of first places, then finally second places.</p>\r\n                <p>The top three will appear on the podium, everybody else will be listed in order under 'Best of the Rest'.</p>\r\n                <div className=\"bold mt-20\">Admin</div>\r\n                <p>Anybody who is marked as an admin will see an admin icon appear in the top right of the screen, below the profile picture <span className=\"icon-admin demo\"></span></p>\r\n                <p>When you click the admin link it will take you to the Admin page.  Currently on the Admin page you can set the placings, status and scratchings for each race.</p>\r\n                <p>In the future I'd like to add more functionality here, like for example the ability to disable people from getting points, etc.</p>\r\n                <div className=\"bold mt-20\">Future Plans</div>\r\n                <ul className=\"marked-list\">\r\n                    <li>After the Caulfield Cup I would like to replace this information page on the menu with a Statistics section that shows various statistics, like who won each race meet, most number of trifectas, quinellas, 1st, 2nds, 3rds, etc.</li>\r\n                    <li>People can create accounts and it has proper authentication.</li>\r\n                    <li>Introduce groups, so different groups of people can have their own tipping competitions.</li>\r\n                    <li>To improve the design for tablet and desktop screen sizes.</li>\r\n                    <li>Use a service worker to allow people to pin the page to their Home screens with an icon, and cache all the files so that the page will start up instantly like a native app.</li>\r\n                    <li>\r\n                        Make a different version of the same app, but introduce some game-type elements.  So it would be more for fun than serious tipping.  It could also be modified to be for the greyhounds.\r\n                        <br />\r\n                        Ideas for the game elements are:\r\n                        <ul>\r\n                            <li>\r\n                                <div>7 x Carrots (1 per meet probably)</div>\r\n                                <div><b>Tag line:</b> Makes a horse surge home at the finish.</div>\r\n                                <div><b>Explaination:</b> Earn points for one place higher than it actually finishes. Wasted if the horse comes in 1st, or 5th or below.</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>2 x Purple Carrots</div>\r\n                                <div><b>Tag line:</b> More nutritious than regular carrots.</div>\r\n                                <div><b>Explaination:</b> Earn points for two places higher. Wasted if the horse comes in 1st, or 6th or below. If it comes in 2nd then get the points for 1st, same as a regular carrot</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Juiced Syringe</div>\r\n                                <div><b>Tag line:</b> Turn your nags into the Lance Armstrong of horses.</div>\r\n                                <div><b>Explaination:</b> Get double points for a whole race meet.</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Poisioned Syringe</div>\r\n                                <div><b>Tag line:</b> 'Phar Lap' a horse.</div>\r\n                                <div><b>Explaination:</b> Kill a horse so nobody can get points for it for that race. Perhaps could be a bonus that is awarded to the person who wins the second meet or something, so then it is limited to only being used once by one person, but affects everyone equally?</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Shank</div>\r\n                                <div><b>Tag line:</b> 'Monica Seles' a jockey.</div>\r\n                                <div><b>Explaination:</b> Shank a jockey so nobody can get points for them for that race meet. Perhaps could be a bonus that is awarded to the person that wins the first meet or something, so then it is limited to only being used once by one person, but affects everyone equally?</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>7 x Glue Sticks (1 per meet probably)</div>\r\n                                <div><b>Tag line:</b> Get out of a sticky situation.</div>\r\n                                <div><b>Explaination:</b> If any of the horses you pick come last, send them to the glue factory to earn 1 point.</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>1 x Ricky Bobby</div>\r\n                                <div><b>Tag line:</b> If you ain't first, your last.</div>\r\n                                <div><b>Explaination:</b> Pick a horse to put everything on (only one tip for that race).  If it comes first you get double points (6).  If it comes anything else you get nothing.</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>? x Sugar Cubes</div>\r\n                                <div><b>Tag line:</b> ?</div>\r\n                                <div><b>Explaination:</b> Something good?</div>\r\n                            </li>\r\n                            <li>\r\n                                <div>? x Riding Crops</div>\r\n                                <div><b>Tag line:</b> ?</div>\r\n                                <div><b>Explaination:</b> Something good or bad?</div>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <p>If you come across any issues, or you have any ideas for things to add or improve, let me know via Facebook Messager or email - sanmerah@gmail.com</p>\r\n                <BottomMenu path={this.props.path}></BottomMenu>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class TipsRaceList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tips: [\r\n                { raceId: null, number: 1, databaseId: null, selections: [] },\r\n                { raceId: null, number: 2, databaseId: null, selections: [] },\r\n                { raceId: null, number: 3, databaseId: null, selections: [] },\r\n                { raceId: null, number: 4, databaseId: null, selections: [] },\r\n                { raceId: null, number: 5, databaseId: null, selections: [] },\r\n                { raceId: null, number: 6, databaseId: null, selections: [] },\r\n                { raceId: null, number: 7, databaseId: null, selections: [] },\r\n                { raceId: null, number: 8, databaseId: null, selections: [] },\r\n                { raceId: null, number: 9, databaseId: null, selections: [] },\r\n                { raceId: null, number: 10, databaseId: null, selections: [] }\r\n            ]\r\n        };\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props,\r\n       or if the new state is different from the current state */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props && nextState === this.state);\r\n    }\r\n\r\n    /* When the component mounts, call setTips and pass it the props */\r\n    componentDidMount() {\r\n        this.setTips(this.props);\r\n    }\r\n\r\n    /* When the component is updating and is receiving the new props, call setTips passing it the new props */\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props !== prevProps) {\r\n            this.setTips(this.props);\r\n        }\r\n    }\r\n\r\n    /* Function to take the passed props and set the currently selected tips */\r\n    setTips = passedProps => {\r\n        const noOfRaces = passedProps.races.length;\r\n        let tips = this.state.tips;\r\n        let count = 0;\r\n\r\n        // Set the current users tips for each race of the chosen race meet\r\n        for (let i = 0, l = passedProps.tips.length; i < l; i++) {\r\n            if (count === noOfRaces) {\r\n                break;\r\n            }\r\n            if (passedProps.tips[i].punterId === passedProps.user._id) {\r\n                for (let j = 0; j < noOfRaces; j++) {\r\n                    if (passedProps.races[j]._id === passedProps.tips[i].raceId) {\r\n                        tips[passedProps.races[j].number - 1] = {\r\n                            raceId: passedProps.races[j]._id,\r\n                            number: passedProps.races[j].number,\r\n                            databaseId: passedProps.tips[i]._id,\r\n                            selections: passedProps.tips[i].selections\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            tips: tips\r\n        });\r\n    };\r\n\r\n    /* When the user selects a number, either add or remove it from the local state and pass it to the onSelectionChange function\r\n       passed in via props from App.js */\r\n    handleSelectionClick = event => {\r\n        const tips = this.state.tips;\r\n        const modifiedRace = parseInt(event.target.getAttribute('data-race-no'), 10);\r\n        const tip = tips.find(tip => {\r\n            return tip.number === modifiedRace;\r\n        });\r\n        let index = tips.indexOf(tip);\r\n\r\n        // If the selection is already selected, remove it, else if there is less than 3 selected add it\r\n        if (event.target.classList.contains('selected')) {\r\n            index = tip.selections.indexOf(parseInt(event.target.innerText));\r\n            if (index > -1) {\r\n                tip.selections.splice(index, 1);\r\n            }\r\n            this.setState({\r\n                tips: tips\r\n            });\r\n            this.props.onSelectionChange(tip);\r\n        } else if (tip.selections.length < 3) {\r\n            tip.selections.push(parseInt(event.target.innerText));\r\n            tips[index] = tip;\r\n            this.setState({\r\n                tips: tips\r\n            });\r\n            this.props.onSelectionChange(tip);\r\n        }\r\n    };\r\n\r\n    /* Generate the HTML for the tips for each race */\r\n    generateList = () => {\r\n        let races = [];\r\n        let selections = [];\r\n        let className;\r\n\r\n        // For each race in the selected meet\r\n        for (let i = 0, l = this.props.races.length; i < l; i++) {\r\n            // Clear selections for each race\r\n            selections = [];\r\n\r\n            // Generate 24 selections for the tips\r\n            for (let j = 0; j < 24; j++) {\r\n                className = 'selection';\r\n                if (this.props.races[i].scratchings.includes(j + 1)) {\r\n                    className += ' scratched';\r\n                }\r\n                if (this.state.tips[i].selections.includes(j + 1)) {\r\n                    className += ' selected';\r\n                }\r\n\r\n                selections.push(\r\n                    <div key={j} className={className} data-race-no={i + 1} onClick={this.handleSelectionClick}>\r\n                        {j + 1}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            // Create the HTML for each race and insert into the races array\r\n            races.push(\r\n                <div key={i} className=\"tip-group\">\r\n                    <div className=\"details\">\r\n                        <div className=\"bold\">RACE {this.props.races[i].number}</div>\r\n                        <span>{this.props.races[i].time}</span>\r\n                        <span className=\"name\">&nbsp;-&nbsp;{this.props.races[i].name}</span>\r\n                    </div>\r\n                    <div className=\"selections\">{selections}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return races;\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const raceList = this.generateList();\r\n        let raceDay = this.props.meet ? new Date(this.props.meet.date) : new Date();\r\n        let raceListClass;\r\n\r\n        // Set the meet to disabled if it is after 10:15am on race day\r\n        raceDay.setHours(10);\r\n        raceDay.setMinutes(15);\r\n\r\n        if (new Date() > raceDay) {\r\n            raceListClass = 'raceList disabled';\r\n        } else {\r\n            raceListClass = 'raceList';\r\n        }\r\n\r\n        return <div className={raceListClass}>{raceList}</div>;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport MeetSelector from '../components/MeetSelector';\r\nimport TipsRaceList from '../components/TipsRaceList';\r\nimport BottomMenu from '../components/BottomMenu';\r\n\r\nexport default class Tips extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const meet = this.props.meets.find(meet => {\r\n            return meet._id === this.props.selectedMeet;\r\n        });\r\n        const races = this.props.races.filter(race => {\r\n            return race.meetId === this.props.selectedMeet;\r\n        });\r\n        const tips = this.props.tips.filter(tip => {\r\n            return tip.meetId === this.props.selectedMeet;\r\n        });\r\n\r\n        if (races) {\r\n            races.sort((a, b) => {\r\n                return (\r\n                    a.number - b.number\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Tips\"\r\n                    path={this.props.path}\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"You want a tip?.....be good to your mother.  Otherwise, simply select 3 horses for each race.  If you already have 3 selected and want to change one, simply unselect one of them. Don't worry about saving at the end, your tips are saved every time you make a change.\"\r\n                />\r\n                <p>\r\n                    <b>* Tips must be in by 10:00am AEDT on race day.</b>\r\n                </p>\r\n                <p>The tips will be disabled after this time.</p>\r\n                <MeetSelector meets={this.props.meets} selectedMeetId={this.props.selectedMeet} onChange={this.props.onMeetChange} />\r\n                <div className=\"tip-examples\">\r\n                    <span className=\"selection selected\">18</span>\r\n                    <span>Selected</span>\r\n                    <span className=\"selection scratched\">18</span>\r\n                    <span>Scratched</span>\r\n                    <span className=\"selection selected scratched\">18</span>\r\n                    <span>Both</span>\r\n                </div>\r\n                <TipsRaceList\r\n                    meet={meet}\r\n                    races={races}\r\n                    tips={tips}\r\n                    selectedRace={this.props.selectedRace}\r\n                    user={this.props.user}\r\n                    onSelectionChange={this.props.onSelectionChange}\r\n                />\r\n                <BottomMenu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ResultsTip extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const self = this;\r\n        const punter = this.props.punters.find(tipPunter => {\r\n            return tipPunter._id === self.props.tips.punterId;\r\n        });\r\n        let score = 0;\r\n        let index;\r\n        let firstClass = '';\r\n        let secondClass = '';\r\n        let thirdClass = '';\r\n\r\n        // Set the scores and the 'correct' class on punters picks\r\n        index = self.props.tips.selections.indexOf(self.props.placings.first);\r\n        if (index > -1) {\r\n            score += 3;\r\n            if (index === 0) {\r\n                firstClass = 'correct';\r\n            }\r\n            if (index === 1) {\r\n                secondClass = 'correct';\r\n            }\r\n            if (index === 2) {\r\n                thirdClass = 'correct';\r\n            }\r\n        }\r\n\r\n        index = self.props.tips.selections.indexOf(self.props.placings.second);\r\n        if (index > -1) {\r\n            score += 2;\r\n            if (index === 0) {\r\n                firstClass = 'correct';\r\n            }\r\n            if (index === 1) {\r\n                secondClass = 'correct';\r\n            }\r\n            if (index === 2) {\r\n                thirdClass = 'correct';\r\n            }\r\n        }\r\n\r\n        index = self.props.tips.selections.indexOf(self.props.placings.third);\r\n        if (index > -1) {\r\n            score++;\r\n            if (index === 0) {\r\n                firstClass = 'correct';\r\n            }\r\n            if (index === 1) {\r\n                secondClass = 'correct';\r\n            }\r\n            if (index === 2) {\r\n                thirdClass = 'correct';\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"tip\">\r\n                <img src={'pics/' + punter.image} alt=\"Profile pic\" className=\"pic\" />\r\n                <span className=\"name\">\r\n                    {punter.name.first} {punter.name.last}\r\n                </span>\r\n                <div className=\"numbers\">\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 1</span>&nbsp;-&nbsp;\r\n                        <span className={firstClass}>{self.props.tips.selections[0]}</span>\r\n                    </div>\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 2</span>&nbsp;-&nbsp;\r\n                        <span className={secondClass}>{self.props.tips.selections[1]}</span>\r\n                    </div>\r\n                    <div className=\"group\">\r\n                        <span className=\"label\">Pick 3</span>&nbsp;-&nbsp;\r\n                        <span className={thirdClass}>{self.props.tips.selections[2]}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"score\">\r\n                    <div className=\"mb-5 bold\">Score</div>\r\n                    <div>{score}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Tip from './ResultsTip';\r\n\r\nexport default class ResultsRace extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const self = this;\r\n        const tips = self.props.tips.map(punterTips => {\r\n            return <Tip key={punterTips._id} tips={punterTips} punters={self.props.punters} placings={self.props.race.placings} />;\r\n        });\r\n        let statusClass;\r\n        let statusName;\r\n\r\n        if (!tips.length) {\r\n            tips.push(<div key=\"a\" className=\"no-races-msg\">There are not yet any tips for this race.</div>);\r\n        }\r\n\r\n        // Set the statusClass based on race's status\r\n        switch (self.props.race.status) {\r\n            case 1:\r\n                statusClass = 'status blue';\r\n                statusName = 'Not Yet Run';\r\n                break;\r\n            case 2:\r\n                statusClass = 'status orange';\r\n                statusName = 'About To Jump';\r\n                break;\r\n            case 3:\r\n                statusClass = 'status red';\r\n                statusName = 'Racing';\r\n                break;\r\n            case 4:\r\n                statusClass = 'status green';\r\n                statusName = 'Has Run';\r\n                break;\r\n            default:\r\n                statusClass = 'status';\r\n                statusName = 'Unknown';\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"race\">\r\n                <div className=\"details\">\r\n                    <div className=\"mb-5 bold\">Details</div>\r\n                    <div className=\"mb-5 name\">{self.props.race.name}</div>\r\n                    <div className=\"mb-5\">{self.props.race.time}</div>\r\n                    <div className=\"mb-5\">{self.props.race.distance}</div>\r\n                    <div>\r\n                        <span className=\"status-label\">Status:&nbsp;</span>\r\n                        <span className={statusClass}>{statusName}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"placings\">\r\n                    <div className=\"mb-5 bold\">Placings</div>\r\n                    <div className=\"mb-5\">\r\n                        <span className=\"placing bold gold\">1st</span>&nbsp;{self.props.race.placings.first !== 0 ? self.props.race.placings.first : ''}\r\n                    </div>\r\n                    <div className=\"mb-5\">\r\n                        <span className=\"placing bold silver\">2nd</span>&nbsp;{self.props.race.placings.second !== 0 ? self.props.race.placings.second : ''}\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"placing bold bronze\">3rd</span>&nbsp;{self.props.race.placings.third !== 0 ? self.props.race.placings.third : ''}\r\n                    </div>\r\n                </div>\r\n                <div className=\"tips-heading bold\">Tips</div>\r\n                <div className=\"tips\">{tips}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Race from './ResultsRace';\r\n\r\nexport default class ResultsMeet extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const self = this;\r\n        const raceSelectors = [];\r\n        const race = self.props.races.find(race => {\r\n            return race._id === self.props.selectedRace;\r\n        });\r\n        const raceTips = self.props.meetTips.filter(raceTip => {\r\n            return raceTip.raceId === self.props.selectedRace;\r\n        });\r\n        let className;\r\n\r\n        // For each race of the meet passed in via props\r\n        for (let i = 0, l = self.props.races.length; i < l; i++) {\r\n            // Select the colour class for the race circles based on the status of the race\r\n            switch (self.props.races[i].status) {\r\n                case 2: // About To Jump\r\n                    className = 'circle bg-orange';\r\n                    break;\r\n                case 3: // Racing\r\n                    className = 'circle bg-red';\r\n                    break;\r\n                case 4: // Has Run\r\n                    className = 'circle bg-green';\r\n                    break;\r\n                default:\r\n                    // Default and Not Yet Run\r\n                    className = 'circle bg-blue';\r\n                    break;\r\n            }\r\n            // If race is the currently selected race, add the 'selected' class to className\r\n            if (self.props.races[i]._id === self.props.selectedRace) {\r\n                className += ' selected';\r\n            }\r\n            // Create selector HTML and add to the raceSelectors array\r\n            raceSelectors.push(\r\n                <div key={i} id={self.props.races[i]._id} className={className} onClick={self.props.onClick}>\r\n                    {i + 1}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (race) {\r\n            return (\r\n                <div className=\"race-meet\">\r\n                    <div className=\"race-selector\">{raceSelectors}</div>\r\n                    <h3>RACE {race.number}</h3>\r\n                    <Race race={race} punters={self.props.punters} tips={raceTips} />\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return <div />;\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport Meet from '../components/ResultsMeet';\r\nimport MeetSelector from '../components/MeetSelector';\r\nimport BottomMenu from '../components/BottomMenu';\r\n\r\nexport default class Results extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Function to render the component. */\r\n    render() {\r\n        const meetRaces = this.props.races.length ? this.props.races.filter(race => race.meetId === this.props.selectedMeet) : [];\r\n        const meetTips = this.props.tips.length ? this.props.tips.filter(tip => tip.meetId === this.props.selectedMeet) : [];\r\n\r\n        meetRaces.sort((a, b) => {\r\n            return (\r\n                a.number - b.number\r\n            );\r\n        });\r\n        \r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Results\"\r\n                    path={this.props.path}\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"This is where you can see the results of the hours of peoples research, strategy and rumination....before they just picked a number because they liked the jockey's pink star-spangled uniform.\"\r\n                />\r\n                <MeetSelector meets={this.props.meets} selectedMeetId={this.props.selectedMeet} onChange={this.props.onMeetChange} />\r\n                {\r\n                    meetRaces && meetTips &&\r\n                    <Meet\r\n                        races={meetRaces}\r\n                        selectedRace={this.props.selectedRace}\r\n                        punters={this.props.punters}\r\n                        meetTips={meetTips}\r\n                        onClick={this.props.onRaceChange}\r\n                    />\r\n                }\r\n                {\r\n                    !meetRaces.length && <div>This meet doesn't seem to have any races.</div>\r\n                }\r\n                <BottomMenu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Podium(props) {\r\n    // Returns the HTML for the podium, inserting the details for first, second and third from the passed props\r\n    return (\r\n        <>\r\n            <h4 className=\"lb-heading teal\">PODIUM</h4>\r\n            <div className=\"podium\">\r\n                <div className=\"second\">\r\n                    <img src={'pics/' + props.second.image} alt=\"Profile pic\" className=\"pic\" />\r\n                    <span className=\"name\">\r\n                        {props.second.name.first} {props.second.name.last}\r\n                    </span>\r\n                    <div className=\"bar\">\r\n                        <div className=\"number\">\r\n                            2<sup>ND</sup>\r\n                        </div>\r\n                        <div className=\"points\">{props.points[1].points} PTS</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"first\">\r\n                    <img src={'pics/' + props.first.image} alt=\"Profile pic\" className=\"pic\" />\r\n                    <span className=\"name\">\r\n                        {props.first.name.first} {props.first.name.last}\r\n                    </span>\r\n                    <div className=\"bar\">\r\n                        <div className=\"icon-trophy\" />\r\n                        <div className=\"number\">\r\n                            1<sup>ST</sup>\r\n                        </div>\r\n                        <div className=\"points\">{props.points[0].points} PTS</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"third\">\r\n                    <img src={'pics/' + props.third.image} alt=\"Profile pic\" className=\"pic\" />\r\n                    <span className=\"name\">\r\n                        {props.third.name.first} {props.third.name.last}\r\n                    </span>\r\n                    <div className=\"bar\">\r\n                        <div className=\"number\">\r\n                            3<sup>RD</sup>\r\n                        </div>\r\n                        <div className=\"points\">{props.points[2].points} PTS</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport Podium from '../components/Podium';\r\nimport BottomMenu from '../components/BottomMenu';\r\n\r\nexport default class Leaderboard extends Component {\r\n    /* Determines whether React should re-render the component, in this case if the new props are different from the old props. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextProps === this.props);\r\n    }\r\n\r\n    /* Find the tips that belong to the associated punter and race. */\r\n    findTips = (punterId, raceId) => {\r\n        return this.props.tips.find(tips => {\r\n            return tips.punterId === punterId && tips.raceId === raceId;\r\n        });\r\n    };\r\n\r\n    /* Find the particular punter from the punters data. */\r\n    findPunter = punterId => {\r\n        return this.props.punters.find(punter => {\r\n            return punter._id === punterId;\r\n        });\r\n    };\r\n\r\n    /* Get the particular punters data from the points array. */\r\n    findPuntersPoints = (points, punterId) => {\r\n        return points.find(punter => {\r\n            return punter.punterId === punterId;\r\n        });\r\n    };\r\n\r\n    /* Function to calculate each users points, trifectas, quinellas, firsts, seconds and thirds. */\r\n    calculatePoints = () => {\r\n        let points = [];\r\n        let a = this.props.punters.length;\r\n        let b;\r\n        let placings;\r\n        let tips;\r\n        let puntersPoints;\r\n        let raceScore;\r\n\r\n        // Load each punter into the points array with a score of 0\r\n        while (a--) {\r\n            points.push({\r\n                punterId: this.props.punters[a]._id,\r\n                points: 0,\r\n                trifectas: 0,\r\n                quinellas: 0,\r\n                firsts: 0,\r\n                seconds: 0,\r\n                thirds: 0\r\n            });\r\n        }\r\n\r\n        // Reset the length of the punters after the first while loop\r\n        a = this.props.punters.length;\r\n\r\n        // For each punter\r\n        while (a--) {\r\n            // Reset the length of the races\r\n            b = this.props.races.length;\r\n            // Loop through each race\r\n            while (b--) {\r\n                // Set placings to the placings for this race\r\n                placings = this.props.races[b].placings;\r\n                // Find the associated tips for this user and race\r\n                tips = this.findTips(this.props.punters[a]._id, this.props.races[b]._id);\r\n\r\n                if (tips) {\r\n                    raceScore = 0;\r\n                    puntersPoints = this.findPuntersPoints(points, this.props.punters[a]._id);\r\n                    if (tips.selections.includes(placings.first)) {\r\n                        puntersPoints.points += 3;\r\n                        raceScore += 3;\r\n                        puntersPoints.firsts++;\r\n                    }\r\n                    if (tips.selections.includes(placings.second)) {\r\n                        puntersPoints.points += 2;\r\n                        raceScore += 2;\r\n                        puntersPoints.seconds++;\r\n                    }\r\n                    if (tips.selections.includes(placings.third)) {\r\n                        puntersPoints.points += 1;\r\n                        raceScore += 1;\r\n                        puntersPoints.thirds++;\r\n                    }\r\n                    if (raceScore === 6) {\r\n                        puntersPoints.trifectas++;\r\n                    }\r\n                    if (raceScore === 5) {\r\n                        puntersPoints.quinellas++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return points;\r\n    };\r\n\r\n    /* Function to render the component. */\r\n    render() {\r\n        const points = this.calculatePoints();\r\n        let gameAccounts = [];\r\n        let gameAccountsList = [];\r\n        let loserList = [];\r\n        let first;\r\n        let second;\r\n        let third;\r\n        let punter;\r\n        let position;\r\n        let temp;\r\n\r\n        // Set the game accounts.\r\n        for(let i = 0, l = this.props.selectedCompetition.gameAccounts.length; i < l; i++) {\r\n            temp = this.props.punters.find(punter => { return punter._id === this.props.selectedCompetition.gameAccounts[i]; });\r\n            gameAccounts.push(temp);\r\n        }\r\n\r\n        // Populate the gameAccountsList array and then remove the game account from the points array.\r\n        let gameAccountPoints;\r\n        for(let i = 0, l = gameAccounts.length; i < l; i++) {\r\n            gameAccountPoints = points.find(points => { return points.punterId === gameAccounts[i]._id; });\r\n            gameAccountsList.push(\r\n                <div key={i} className=\"total\">\r\n                    <img src={'pics/' + gameAccounts[i].image} alt=\"Profile pic\" className=\"pic\" />\r\n                    <div className=\"name\">\r\n                        {gameAccounts[i].name.first} {gameAccounts[i].name.last}\r\n                    </div>\r\n                    <div className=\"points\">{gameAccountPoints.points} PTS</div>\r\n                </div>\r\n            );\r\n            points.splice(points.indexOf(gameAccountPoints), 1);\r\n        }\r\n\r\n        // Sort points in descending order by total points, then trifectas, then quinellas, then first places, then second places.\r\n        points.sort((a, b) => {\r\n            return (\r\n                b.points - a.points ||\r\n                b.trifectas - a.trifectas ||\r\n                b.quinellas - a.quinellas ||\r\n                b.firsts - a.firsts ||\r\n                b.seconds - a.seconds\r\n            );\r\n        });\r\n\r\n        // Set the winners.\r\n        first = this.findPunter(points[0].punterId);\r\n        second = this.findPunter(points[1].punterId);\r\n        third = this.findPunter(points[2].punterId);\r\n\r\n        // Generate list of losers.\r\n        for (let i = 0, l = points.length; i < l; i++) {\r\n            // If not the winners.\r\n            if (i !== 0 && i !== 1 && i !== 2) {\r\n                // Get the punter details.\r\n                punter = this.findPunter(points[i].punterId);\r\n\r\n                // Get positon ending name (adding 1 to index to account for array starting from 0).\r\n                if (i + 1 !== 11 && (i + 1) % 10 === 1) {\r\n                    position = '<sup>ST</sup>';\r\n                } else if (i + 1 !== 12 && (i + 1) % 10 === 2) {\r\n                    position = '<sup>ND</sup>';\r\n                } else if (i + 1 !== 13 && (i + 1) % 10 === 3) {\r\n                    position = '<sup>RD</sup>';\r\n                } else {\r\n                    position = '<sup>TH</sup>';\r\n                }\r\n\r\n                // Add them to the losers array.\r\n                loserList.push(\r\n                    <div key={i} className=\"loser\">\r\n                        <span\r\n                            className=\"number\"\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: i + 1 + position\r\n                            }}\r\n                        />\r\n                        <span className=\"points\">{points[i].points} PTS</span>\r\n                        <img src={'pics/' + punter.image} alt=\"Profile pic\" className=\"pic\" />\r\n                        <span className=\"name\">\r\n                            {punter.name.first} {punter.name.last}\r\n                        </span>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <Header\r\n                    page=\"Leaderboard\"\r\n                    path={this.props.path}\r\n                    competitions={this.props.competitions}\r\n                    user={this.props.user}\r\n                    selectedCompetition={this.props.selectedCompetition}\r\n                    handleCompetitionSelect={this.props.handleCompetitionSelect}\r\n                    onReloadData={this.props.onReloadData}\r\n                    isAdmin={this.props.isAdmin}\r\n                    text=\"To the victors go the spoils, and to the losers....go home.\"\r\n                />\r\n                {\r\n                    !!gameAccountsList.length &&\r\n                    <>\r\n                        <h4 className=\"lb-heading\">GAME ACCOUNTS</h4>\r\n                        <div className=\"game-account-totals\">{gameAccountsList}</div>\r\n                    </>\r\n                }\r\n                <Podium first={first} second={second} third={third} points={points} />\r\n                <h4 className=\"lb-heading\">BEST OF THE REST</h4>\r\n                {loserList}\r\n                <BottomMenu path={this.props.path} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport ErrorHandling from './components/ErrorHandling';\r\nimport ScrollToTop from './components/ScrollToTop';\r\nimport Login from './pages/Login';\r\nimport Admin from './pages/Admin';\r\nimport Statistics from './pages/Statistics';\r\nimport Information from './pages/Information';\r\nimport Tips from './pages/Tips';\r\nimport Results from './pages/Results';\r\nimport Leaderboard from './pages/Leaderboard';\r\nimport { generateId } from './helpers/utilities';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            competitions: [],\r\n            meets: [],\r\n            races: [],\r\n            punters: [],\r\n            allPunters: [],\r\n            tips: [],\r\n            authenticated: null,\r\n            user: null,\r\n            isAdmin: false,\r\n            selectedCompetition: null,\r\n            selectedMeet: null,\r\n            selectedRace: null,\r\n            selectedTab: 1\r\n        };\r\n\r\n        this.useJSON = false;\r\n        // this.backendURL = 'http://localhost:4001'; // Local\r\n        // this.backendURL = 'https://sleepy-harbor-88560.herokuapp.com'; // Production v1 - Heroku\r\n        this.backendURL = 'https://spring-racing-tipping-88560.herokuapp.com'; // Production v2 - Heroku\r\n        // this.path = '/'; // Local\r\n        this.path = '/spring-racing-tipping/'; // Github\r\n    }\r\n\r\n    /* Determines whether React should re-render the component, in this case if the new state is different from the current state. */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !(nextState === this.state);\r\n    }\r\n\r\n    /* Asyncronously get all the punters, either from a local JSON file while in development, or the database. */\r\n    async getAllPunters() {\r\n        const self = this;\r\n        const dataURL = self.useJSON ? `${self.path}mock/punters.json` : `${self.backendURL}/punters`;\r\n        try {\r\n            const puntersResponse = await fetch(dataURL, { cache: 'no-store', mode: 'cors' });\r\n            const punters = await puntersResponse.json();\r\n\r\n            self.setState({\r\n                allPunters: punters\r\n            });\r\n\r\n            return 'complete';\r\n        } catch (e) {\r\n            console.log('An error occurred: ' + e);\r\n            return 'fail';\r\n        }\r\n    }\r\n\r\n    /* Get all the punters that are apart of the currently selected competition. */\r\n    getCompetitionPunters(selectedCompetition) {\r\n        return this.state.allPunters.filter(punter => {\r\n            return selectedCompetition.punters.includes(punter._id);\r\n        });\r\n    }\r\n\r\n    /* Asyncronously get the competitions the user is in, either from a local JSON file while in development, or the database. */\r\n    async getUserCompetitions(selectedUser) {\r\n        const self = this;\r\n        const dataURL = self.useJSON ? `${self.path}mock/competitions.json` : `${self.backendURL}/competitions/bypunter/${selectedUser}`;\r\n        try {\r\n            const competitionsResponse = await fetch(dataURL, { cache: 'no-store', mode: 'cors' });\r\n            const competitions = await competitionsResponse.json();\r\n\r\n            self.setState({\r\n                competitions: competitions\r\n            });\r\n\r\n            return 'complete';\r\n        } catch (e) {\r\n            console.log('An error occurred: ' + e);\r\n            return 'fail';\r\n        }\r\n    }\r\n\r\n    /* Asyncronously get all the meets, races and tips data, either from local JSON files while in development, or the database. */\r\n    async setData(selectedCompetition) {\r\n        const self = this;\r\n        const meetsDataURL = self.useJSON ? `${self.path}mock/meets-${selectedCompetition.startDate.split('-')[0]}.json`:\r\n                                            `${self.backendURL}/meets/bycompetition/${selectedCompetition._id}`;\r\n        const racesDataURL = self.useJSON ? `${self.path}mock/races-${selectedCompetition.startDate.split('-')[0]}.json` :\r\n                                            `${self.backendURL}/races/bycompetition/${selectedCompetition._id}`;\r\n        const tipsDataURL = self.useJSON ? `${self.path}mock/tips-${selectedCompetition.startDate.split('-')[0]}.json` :\r\n                                            `${self.backendURL}/tips/bycompetition/${selectedCompetition._id}`;\r\n        try {\r\n            const meetsResponse = await fetch(meetsDataURL, { cache: 'no-store', mode: 'cors' });\r\n            const meets = await meetsResponse.json();\r\n            const racesResponse = await fetch(racesDataURL, { cache: 'no-store', mode: 'cors' });\r\n            const races = await racesResponse.json();\r\n            const tipsResponse = await fetch(tipsDataURL, { cache: 'no-store', mode: 'cors' });\r\n            const tips = await tipsResponse.json();\r\n            let selectedMeet = self.state.selectedMeet || parseInt(localStorage.getItem('selectedMeet')) || null;\r\n            let selectedRace = self.state.selectedRace;\r\n\r\n            // If no selected meet, set to the first meet\r\n            if (!selectedMeet) {\r\n                selectedMeet = meets.length ? meets[0]._id : null;\r\n                localStorage.setItem('selectedMeet', selectedMeet);\r\n            }\r\n            // If no selected race, set to the first race of the race meet\r\n            if (!selectedRace) {\r\n                for (let i = 0, l = races.length; i < l; i++) {\r\n                    if (races[i].meetId === selectedMeet && races[i].number === 1) {\r\n                        selectedRace = races[i]._id;\r\n                    }\r\n                }\r\n            }\r\n\r\n            self.setState({\r\n                meets: meets,\r\n                races: races,\r\n                tips: tips,\r\n                punters: this.getCompetitionPunters(selectedCompetition),\r\n                selectedCompetition: selectedCompetition,\r\n                selectedMeet: selectedMeet,\r\n                selectedRace: selectedRace\r\n            });\r\n        } catch (e) {\r\n            console.log('An error occurred: ' + e);\r\n        }\r\n    }\r\n\r\n    /* Runs when the component first mounts and checks if the user is already logged in,\r\n     * and if so, then retrieves all data and sets state that was stored in localStorage.\r\n     * Otherwise, it will be on the login screen, so only retrieves the punters. */\r\n    componentDidMount() {\r\n        // Check the localStorage to see if the user is already logged in\r\n        if (localStorage.getItem('user')) {\r\n            const userId = parseInt(localStorage.getItem('user'), 10);\r\n\r\n            this.setState({\r\n                authenticated: true,\r\n                isAdmin: localStorage.getItem('isAdmin') === 'true'\r\n            });\r\n\r\n            // Load all the data\r\n            this.getAllPunters().then(result => {\r\n                if (result === 'complete') {\r\n                    const selectedUser = this.state.allPunters.find(user => {\r\n                        return user._id === userId;\r\n                    });\r\n                    this.setState({\r\n                        user: selectedUser\r\n                    });\r\n\r\n                    this.getUserCompetitions(userId).then(result => {\r\n                        if (result === 'complete') {\r\n                            const selectedCompetitionId = parseInt(localStorage.getItem('selectedCompetitionId'), 10);\r\n                            if (selectedCompetitionId) {\r\n                                let selectedCompetition;\r\n                                for (let i = 0, l = this.state.competitions.length; i < l; i++) {\r\n                                    if (selectedCompetitionId === this.state.competitions[i]._id) {\r\n                                        selectedCompetition = this.state.competitions[i];\r\n                                    }\r\n                                }\r\n                                this.setData(selectedCompetition);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                authenticated: false\r\n            });\r\n\r\n            // Load only the punters\r\n            this.getAllPunters();\r\n        }\r\n    }\r\n\r\n    /* When the user logs in set the state and store them in localStorage. */\r\n    handleLogin = userId => {\r\n        const userObj = this.state.allPunters.find(user => {\r\n            return user._id === userId;\r\n        });\r\n\r\n        // Update the state with the user\r\n        this.setState({\r\n            authenticated: true,\r\n            user: userObj\r\n        });\r\n        // Set the localStorage for the logged in user\r\n        localStorage.setItem('user', userId);\r\n        // Get the competitions the user is apart of\r\n        this.getUserCompetitions(userId);\r\n    };\r\n\r\n    /* When the user selects a competition, update the state and whether they are an admin of that competition, and save to localStorage. */\r\n    handleCompetitionSelect = competition => {\r\n        let competitionId;\r\n        let meetId = null;\r\n        let raceId = null;\r\n        let selectedCompetition;\r\n        let i, l;\r\n\r\n        // Is a competition object.\r\n        if (competition._id) {\r\n            competitionId = competition._id;\r\n            selectedCompetition = competition;\r\n        }\r\n        // Is a click object.\r\n        else {\r\n            // Set the id to either the value if it's a <select>, or data-value if it is a <li>.\r\n            competitionId = competition.target.value ? competition.target.value : competition.target.getAttribute('data-value');\r\n            for (let i = 0, l = this.state.competitions.length; i < l; i++) {\r\n                if (competitionId === this.state.competitions[i]._id.toString()) {\r\n                    selectedCompetition = this.state.competitions[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reset the meetId.\r\n        for (i = 0, l = this.state.meets.length; i < l; i++) {\r\n            if (this.state.meets[i].competitionId === selectedCompetition._id) {\r\n                meetId = this.state.meets[i]._id;\r\n                break;\r\n            }\r\n        }\r\n        // Reset the raceId.\r\n        for (i = 0, l = this.state.races.length; i < l; i++) {\r\n            if (this.state.races[i].meetId === meetId && this.state.races[i].number === 1) {\r\n                raceId = this.state.races[i]._id;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        const isAdmin = selectedCompetition.admins.includes(this.state.user._id);\r\n        this.setState({\r\n            selectedMeet: meetId,\r\n            selectedRace: raceId,\r\n            isAdmin: isAdmin\r\n        });\r\n        localStorage.setItem('selectedCompetitionId', competitionId);\r\n        localStorage.setItem('selectedMeet', meetId);\r\n        localStorage.setItem('isAdmin', isAdmin);\r\n        this.setData(selectedCompetition);\r\n    }\r\n\r\n    /* When the user clicks the reload button, spin the icon and request the data again. */\r\n    handleReloadData = event => {\r\n        const btn = event.target.classList.contains('icon-reload') ? event.target.parentElement : event.target;\r\n        btn.classList.add('loading');\r\n        this.setData(this.state.selectedCompetition)\r\n            .then(() => {\r\n                btn.classList.remove('loading');\r\n            });\r\n    };\r\n\r\n    /* When the user selects a race meet, update the state and save to localStorage. */\r\n    handleMeetSelect = event => {\r\n        const races = this.state.races;\r\n        const chosenMeet = parseInt(event.target.value, 10);\r\n        let firstRace;\r\n        for (let i = 0, j = races.length; i < j; i++) {\r\n            if (races[i].meetId === chosenMeet && races[i].number === 1) {\r\n                firstRace = races[i]._id;\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedMeet: chosenMeet,\r\n            selectedRace: firstRace\r\n        });\r\n        localStorage.setItem('selectedMeet', event.target.value);\r\n    };\r\n\r\n    /* When the user selects a race on the Results page, update the state. */\r\n    handleRaceSelect = event => {\r\n        this.setState({\r\n            selectedRace: parseInt(event.target.id, 10)\r\n        });\r\n    };\r\n\r\n    /* When the user selects a tab on the Statistics page, update the state. */\r\n    handleTabSelect = tab => {\r\n        this.setState({\r\n            selectedTab: tab\r\n        });\r\n    };\r\n\r\n    /* When the user selects a tip on the Tips page, save back to the database and update the state. */\r\n    handleSaveTips = modifiedTips => {\r\n        const self = this;\r\n        if (!self.useJSON) {\r\n            let tips = self.state.tips;\r\n            let newTip;\r\n            \r\n            // Updating tips that have already been saved before.\r\n            if (modifiedTips.databaseId) {\r\n                // Get a reference to the current saved tip\r\n                for (let i = 0, l = tips.length; i < l; i++) {\r\n                    if (tips[i]._id === modifiedTips.databaseId) {\r\n                        newTip = tips[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (newTip) {\r\n                    // Update the selections\r\n                    newTip.selections = modifiedTips.selections;\r\n\r\n                    fetch(`${self.backendURL}/tips/${modifiedTips.databaseId}`, {\r\n                        method: 'PUT',\r\n                        cache: 'no-store',\r\n                        mode: 'cors',\r\n                        headers:{\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({'selections': newTip.selections})\r\n                    })\r\n                    .catch(error => console.error('Fetch error:', error));\r\n\r\n                    self.setState({\r\n                        tips: tips\r\n                    });\r\n                }\r\n            }\r\n            // Saving new tips.\r\n            else {\r\n                newTip = {\r\n                    _id: generateId(8),\r\n                    competitionId: self.state.selectedCompetition._id,\r\n                    meetId: self.state.selectedMeet,\r\n                    raceId: null,\r\n                    punterId: self.state.user._id,\r\n                    selections: modifiedTips.selections\r\n                }\r\n\r\n                // Find and set the raceId\r\n                let races = this.state.races;\r\n                for (let i = 0, l = races.length; i < l; i++) {\r\n                    if (races[i].meetId === this.state.selectedMeet &&\r\n                        races[i].number === modifiedTips.number) {\r\n                        newTip.raceId = races[i]._id;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                fetch(`${self.backendURL}/tips`, {\r\n                    method: 'POST',\r\n                    cache: 'no-store',\r\n                    mode: 'cors',\r\n                    headers:{\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(newTip)\r\n                })\r\n                .catch(error => console.error('Fetch error:', error));\r\n\r\n                tips.push(newTip);\r\n\r\n                self.setState({\r\n                    tips: tips\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /* When the user clicks Save for placings on the Admin page, save to the database and update the state */\r\n    handleSavePlacings = (modifiedRaceId, modifiedPlacings) => {\r\n        let races = this.state.races;\r\n        let race = races.find(race => {\r\n            return race._id === modifiedRaceId;\r\n        });\r\n        const raceIndex = races.indexOf(race);\r\n\r\n        // Update the placings for the selected race\r\n        race.placings = modifiedPlacings;\r\n\r\n        // Insert the updated race back into the races array\r\n        races[raceIndex] = race;\r\n\r\n        // Update the race in the database and local state\r\n        this.updateRace(modifiedRaceId, races, race);\r\n    };\r\n\r\n    /* When the user selects a race status on the Admin page, save to the database and update the state */\r\n    handleSaveStatus = event => {\r\n        const modifiedRaceId = parseInt(event.target.getAttribute('data-race-id'), 10);\r\n        let races = this.state.races;\r\n        let race = races.find(race => {\r\n            return race._id === modifiedRaceId;\r\n        });\r\n        const raceIndex = races.indexOf(race);\r\n\r\n        // Update the status for the selected race\r\n        race.status = parseInt(event.target.getAttribute('data-status'), 10);\r\n\r\n        // Insert the updated race back into the races array\r\n        races[raceIndex] = race;\r\n\r\n        // Update the race in the database and local state\r\n        this.updateRace(modifiedRaceId, races, race);\r\n    };\r\n\r\n    /* When the user selects a scratching on the Admin page, save to the database and update the state */\r\n    handleSaveScratchings = (modifiedRaceId, modifiedScratchings) => {\r\n        let races = this.state.races;\r\n        let race = races.find(race => {\r\n            return race._id === modifiedRaceId;\r\n        });\r\n        const raceIndex = races.indexOf(race);\r\n\r\n        // Update the placings for the selected race\r\n        race.scratchings = modifiedScratchings;\r\n\r\n        // Insert the updated race back into the races array\r\n        races[raceIndex] = race;\r\n\r\n        // Update the race in the database and local state\r\n        this.updateRace(modifiedRaceId, races, race);\r\n    };\r\n\r\n    /* When the user selects a scratching on the Admin page, save to the database and update the state */\r\n    updateRace = (modifiedRaceId, races, race) => {\r\n        if (!this.useJSON) {\r\n            // Send the updated race to the database\r\n            fetch(`${this.backendURL}/races/${modifiedRaceId}`, {\r\n                method: 'PUT',\r\n                cache: 'no-store',\r\n                mode: 'cors',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(race)\r\n            })\r\n            .catch(error => console.error('Fetch error:', error));\r\n        }\r\n\r\n        // Update the local state with the updated races array\r\n        this.setState({\r\n            races: races\r\n        });\r\n    };\r\n\r\n    /* Function to render the component */\r\n    render() {\r\n        const page = window.location.href.split(\"/\").slice(-1)[0];\r\n\r\n        if ((this.state.selectedCompetition && this.state.punters.length) ||\r\n            (page === 'login' && this.state.allPunters.length) ||\r\n            (this.state.authenticated === false)) {\r\n            return (\r\n                // React Router routes to a particular component based on the URL path\r\n                <Router>\r\n                    <ScrollToTop>\r\n                        <ErrorHandling>\r\n                            <Switch>\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'login'}\r\n                                    render={routeProps => (\r\n                                        !this.state.selectedCompetition ? (\r\n                                            <Login\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                allPunters={this.state.allPunters}\r\n                                                handleLogin={this.handleLogin}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                authenticated={this.state.authenticated}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'results'} />\r\n                                        )\r\n                                    )}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'admin'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition &&\r\n                                        this.state.isAdmin ? (\r\n                                            <Admin\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                meets={this.state.meets}\r\n                                                races={this.state.races}\r\n                                                punters={this.state.punters}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                selectedMeet={this.state.selectedMeet}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                onMeetChange={this.handleMeetSelect}\r\n                                                onPlacingsChange={this.handleSavePlacings}\r\n                                                onStatusChange={this.handleSaveStatus}\r\n                                                onScratchingChange={this.handleSaveScratchings}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'information'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition ? (\r\n                                            <Information\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                punters={this.state.punters}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                authenticated={this.state.authenticated}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'statistics'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition ? (\r\n                                            <Statistics\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                meets={this.state.meets}\r\n                                                races={this.state.races}\r\n                                                punters={this.state.punters}\r\n                                                tips={this.state.tips}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                selectedTab={this.state.selectedTab}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onTabSelect={this.handleTabSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                authenticated={this.state.authenticated}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'tips'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition ? (\r\n                                            <Tips\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                meets={this.state.meets}\r\n                                                races={this.state.races}\r\n                                                tips={this.state.tips}\r\n                                                punters={this.state.punters}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                selectedMeet={this.state.selectedMeet}\r\n                                                selectedRace={this.state.selectedRace}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                onMeetChange={this.handleMeetSelect}\r\n                                                onSelectionChange={this.handleSaveTips}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'results'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition ? (\r\n                                            <Results\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                meets={this.state.meets}\r\n                                                races={this.state.races}\r\n                                                punters={this.state.punters}\r\n                                                tips={this.state.tips}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                selectedMeet={this.state.selectedMeet}\r\n                                                selectedRace={this.state.selectedRace}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                onMeetChange={this.handleMeetSelect}\r\n                                                onRaceChange={this.handleRaceSelect}\r\n                                                user={this.state.user}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path={this.path + 'leaderboard'}\r\n                                    render={routeProps =>\r\n                                        this.state.authenticated &&\r\n                                        this.state.selectedCompetition ? (\r\n                                            <Leaderboard\r\n                                                {...routeProps}\r\n                                                path={this.path}\r\n                                                competitions={this.state.competitions}\r\n                                                meets={this.state.meets}\r\n                                                races={this.state.races}\r\n                                                punters={this.state.punters}\r\n                                                tips={this.state.tips}\r\n                                                user={this.state.user}\r\n                                                selectedCompetition={this.state.selectedCompetition}\r\n                                                handleCompetitionSelect={this.handleCompetitionSelect}\r\n                                                onReloadData={this.handleReloadData}\r\n                                                isAdmin={this.state.isAdmin}\r\n                                            />\r\n                                        ) : (\r\n                                            <Redirect to={this.path + 'login'} />\r\n                                        )\r\n                                    }\r\n                                />\r\n                                <Redirect from=\"/\" to={this.path + 'results'} />\r\n                            </Switch>\r\n                        </ErrorHandling>\r\n                    </ScrollToTop>\r\n                </Router>\r\n            );\r\n        } else {\r\n            return <div />;\r\n        }\r\n    }\r\n}\r\n\r\n// Use to time functions\r\n\r\n//const t0 = performance.now(); <- Put before code to be timed\r\n//const t1 = performance.now(); <- Put after code to be timed\r\n//console.log(\"Code took \" + (t1 - t0) + \" milliseconds.\");\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport initReactFastclick from 'react-fastclick';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\n// Initialise the FastClick plugin to remove the 300ms click delay on some mobile devices\r\ninitReactFastclick();\r\n\r\n// Render the app to the 'root' <div>\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// Register the service worker to cache assets and load them instantly on app start up\r\nregisterServiceWorker();"],"sourceRoot":""}